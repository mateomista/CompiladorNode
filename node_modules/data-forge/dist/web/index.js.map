{"version":3,"sources":["webpack://dataForge/webpack/bootstrap","webpack://dataForge/./src/lib/series.ts","webpack://dataForge/./src/lib/dataframe.ts","webpack://dataForge/./src/index.ts","webpack://dataForge/./node_modules/dayjs/dayjs.min.js","webpack://dataForge/./src/lib/utils.ts","webpack://dataForge/./src/lib/index.ts","webpack://dataForge/./src/lib/iterators/array-iterator.ts","webpack://dataForge/./src/lib/iterables/empty-iterable.ts","webpack://dataForge/./src/lib/iterables/count-iterable.ts","webpack://dataForge/./src/lib/iterables/multi-iterable.ts","webpack://dataForge/./src/lib/iterables/select-iterable.ts","webpack://dataForge/./src/lib/iterables/select-many-iterable.ts","webpack://dataForge/./src/lib/iterables/take-iterable.ts","webpack://dataForge/./src/lib/iterables/take-while-iterable.ts","webpack://dataForge/./src/lib/iterables/where-iterable.ts","webpack://dataForge/./src/lib/iterables/concat-iterable.ts","webpack://dataForge/./src/lib/iterables/reverse-iterable.ts","webpack://dataForge/./src/lib/iterables/zip-iterable.ts","webpack://dataForge/./src/lib/iterables/distinct-iterable.ts","webpack://dataForge/./src/lib/iterables/ordered-iterable.ts","webpack://dataForge/./src/lib/iterables/extract-element-iterable.ts","webpack://dataForge/./src/lib/iterables/skip-iterable.ts","webpack://dataForge/./src/lib/iterables/skip-while-iterable.ts","webpack://dataForge/./node_modules/easy-table/table.js","webpack://dataForge/./node_modules/json5/dist/index.js","webpack://dataForge/./node_modules/papaparse/papaparse.min.js","webpack://dataForge/./src/lib/iterables/cached-iterator-iterable.ts","webpack://dataForge/./node_modules/dayjs/plugin/customParseFormat.js","webpack://dataForge/./src/lib/iterators/empty-iterator.ts","webpack://dataForge/./src/lib/iterators/count-iterator.ts","webpack://dataForge/./src/lib/iterators/multi-iterator.ts","webpack://dataForge/./src/lib/iterators/select-iterator.ts","webpack://dataForge/./src/lib/iterators/select-many-iterator.ts","webpack://dataForge/./src/lib/iterators/take-iterator.ts","webpack://dataForge/./src/lib/iterators/take-while-iterator.ts","webpack://dataForge/./src/lib/iterators/where-iterator.ts","webpack://dataForge/./src/lib/iterators/concat-iterator.ts","webpack://dataForge/./src/lib/iterables/series-window-iterable.ts","webpack://dataForge/./src/lib/iterators/series-window-iterator.ts","webpack://dataForge/./src/lib/iterators/zip-iterator.ts","webpack://dataForge/./src/lib/iterators/distinct-iterator.ts","webpack://dataForge/./src/lib/iterables/series-rolling-window-iterable.ts","webpack://dataForge/./src/lib/iterators/series-rolling-window-iterator.ts","webpack://dataForge/./src/lib/iterables/series-variable-window-iterable.ts","webpack://dataForge/./src/lib/iterators/series-variable-window-iterator.ts","webpack://dataForge/./src/lib/iterators/extract-element-iterator.ts","webpack://dataForge/./src/lib/iterators/skip-iterator.ts","webpack://dataForge/./src/lib/iterators/skip-while-iterator.ts","webpack://dataForge/./node_modules/wcwidth/index.js","webpack://dataForge/./node_modules/defaults/index.js","webpack://dataForge/./node_modules/clone/clone.js","webpack://dataForge/./node_modules/buffer/index.js","webpack://dataForge/(webpack)/buildin/global.js","webpack://dataForge/./node_modules/base64-js/index.js","webpack://dataForge/./node_modules/ieee754/index.js","webpack://dataForge/./node_modules/isarray/index.js","webpack://dataForge/./node_modules/wcwidth/combining.js","webpack://dataForge/./src/lib/iterables/dataframe-window-iterable.ts","webpack://dataForge/./src/lib/iterators/dataframe-window-iterator.ts","webpack://dataForge/./src/lib/iterables/csv-rows-iterable.ts","webpack://dataForge/./src/lib/iterators/csv-rows-iterator.ts","webpack://dataForge/./src/lib/iterables/dataframe-rolling-window-iterable.ts","webpack://dataForge/./src/lib/iterators/dataframe-rolling-window-iterator.ts","webpack://dataForge/./src/lib/iterables/dataframe-variable-window-iterable.ts","webpack://dataForge/./src/lib/iterators/dataframe-variable-window-iterator.ts","webpack://dataForge/./src/lib/iterables/repeat-iterable.ts","webpack://dataForge/./src/lib/iterators/repeat-iterator.ts","webpack://dataForge/./src/lib/iterables/tile-iterable.ts","webpack://dataForge/./src/lib/iterators/tile-iterator.ts","webpack://dataForge/./src/lib/iterables/ravel-iterable.ts","webpack://dataForge/./src/lib/iterators/ravel-iterator.ts","webpack://dataForge/./src/lib/iterables/column-names-iterable.ts","webpack://dataForge/./src/lib/iterators/column-names-iterator.ts","webpack://dataForge/./node_modules/typy/lib/index.js","webpack://dataForge/./node_modules/typy/lib/typy.js","webpack://dataForge/./node_modules/typy/lib/util.js","webpack://dataForge/./src/lib/iterators/cached-iterator.ts","webpack://dataForge/./node_modules/numeral/numeral.js","webpack://dataForge/./node_modules/util/util.js","webpack://dataForge/./node_modules/process/browser.js","webpack://dataForge/./node_modules/util/support/isBufferBrowser.js","webpack://dataForge/./node_modules/inherits/inherits_browser.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","empty_iterable_1","count_iterable_1","multi_iterable_1","select_iterable_1","select_many_iterable_1","take_iterable_1","take_while_iterable_1","where_iterable_1","concat_iterable_1","series_window_iterable_1","reverse_iterable_1","zip_iterable_1","distinct_iterable_1","series_rolling_window_iterable_1","series_variable_window_iterable_1","ordered_iterable_1","index_1","extract_element_iterable_1","skip_iterable_1","skip_while_iterable_1","easy_table_1","__importDefault","dataframe_1","dayjs_1","customParseFormat_1","default","extend","WhichIndex","utils_1","__1","numeral_1","cached_iterator_iterable_1","Series","config","this","configFn","content","indexedContent","configAsAny","undefined","getTypeCode","typeCode","isFunction","isIterator","initFromIterator","isIterable","initFromIterable","initFromConfig","initEmpty","iterator","CachedIteratorIterable","arr","index","defaultCountIterable","values","pairs","MultiIterable","isBaked","defaultEmptyIterable","input","isObject","next","isArray","checkIterable","fieldName","Error","ExtractElementIterable","baked","lazyInit","getContent","getRowByIndex","Map","_a","__values","_b","done","pair","set","cast","getIndex","_this","Index","withIndex","newIndex","select","resetIndex","merge","series","rowMap","numSeries","Array","from","length","seriesIndex","series_1","series_1_1","workingSeries","toPairs","toString","has","mergedPairs","map","row","sort","a","b","args","_i","arguments","concat","toArray","options","includeNulls","push","toObject","keySelector","valueSelector","toMap","transformer","SelectIterable","selectMany","flatMap","SelectManyIterable","outputPairs","transformed","window","period","whichIndex","isNumber","SeriesWindowIterable","End","rollingWindow","SeriesRollingWindowIterable","variableWindow","comparer","SeriesVariableWindowIterable","sequentialDistinct","selector","first","aggregate","seedOrSelector","skip","accum","reduce","reducer","seed","any","series_2","series_2_1","amountRange","max","min","proportionRange","last","percentRange","v","amountChange","proportionChange","percentChange","proportionRank","latestValue","head","filter","prevMomentum","count","percentRank","proportion","cumsum","working","__read","numValues","SkipIterable","skipWhile","predicate","SkipWhileIterable","skipUntil","take","numRows","TakeIterable","takeWhile","TakeWhileIterable","takeUntil","total","lastValue","at","none","toTake","Math","abs","tail","toSkip","where","WhereIterable","forEach","callback","all","startAt","indexValue","lessThan","getLessThan","endAt","lessThanOrEqualTo","getLessThanOrEqualTo","before","after","between","startIndexValue","endIndexValue","header","rows","table","rowIndex","cellIndex","cell","newRow","parseInt","valueIndex","isString","parseInts","parseFloat","parseFloats","parseDate","formatString","toDate","parseDates","isDate","format","toStrings","bake","inflate","DataFrame","asNumberSeries","numberSeries","sum","numberSeries_1","numberSeries_1_1","average","mean","numberSeries_2","numberSeries_2_1","median","ordered","orderBy","floor","lookup","numberSeries_3","numberSeries_3_1","entries","sumOfSquares","sumOfSquaredDiffs","numberSeries_4","numberSeries_4_1","diffFromMean","variance","std","sqrt","standardize","sampleVariance","sampleStd","sampleStandardize","range","invert","counter","groupSequentialBy","group","replicate","reverse","ReverseIterable","distinct","DistinctIterable","groupBy","groups","groupMap","groupKey","existingGroup","newGroup","contents","ConcatIterable","concatInput","series_3","series_3_1","input_1","input_1_1","subInput","zip","zipper","firstSeries","upcast","ZipIterable","slice","apply","__spread","OrderedSeries","direction","Direction","Ascending","parent","orderByDescending","Descending","union","other","intersection","inner","outerSelector","innerSelector","outerValue","outerKey","innerValue","except","join","outerKeySelector","innerKeySelector","resultSelector","outer","innerMap","output","outer_1","outer_1_1","innerGroup","innerGroup_1","innerGroup_1_1","joinOuter","outerResult","innerResult","intersectionResults","joinOuterLeft","joinOuterRight","truncateStrings","maxLength","substring","round","numDecimalPlaces","toFixed","insertPair","appendPair","remove","fillGaps","generator","pairA","pairB","generatedRows","defaultIfEmpty","defaultSequence","detectTypes","totalValues","typeFrequencies","valueType","accumulated","typeInfo","columnNames","keys","detectValues","valueFrequencies","valueInfo","bucket","numBuckets","console","warn","width","bucketMin","Value","Bucket","Min","Mid","Max","frequency","lower","upper","captureValues","Number","MAX_VALUE","MIN_VALUE","numberSeries_5","numberSeries_5_1","numGroups","interval","ceil","groupIndex","minValue","cumulative","beforeGroup","afterGroup","numberSeries_6","numberSeries_6_1","unshift","groups_1","groups_1_1","CountIterable","EmptyIterable","_super","valueSortSpecs","pairSortSpecs","sortLevel","parents","parents_1","parents_1_1","parentConfig","makeSortSpec","makePairsSelector","OrderedIterable","__extends","thenBy","thenByDescending","dataframe_window_iterable_1","csv_rows_iterable_1","dataframe_rolling_window_iterable_1","dataframe_variable_window_iterable_1","repeat_iterable_1","tile_iterable_1","ravel_iterable_1","column_names_iterable_1","json5_1","papaparse_1","firstResult","isCaseSensitive","initColumnNames","inputColumnNames","outputColumnNames","columnNamesMap","columnName","columnNames_1","columnNames_1_1","columnNameLwr","toLowerCase","columnNoMap","columnNames_2","columnNames_2_1","curColumnNo","columns","columnsConfig","iterableColumnsConfig","column","columnIterables","columnNames_3","columnNames_3_1","columnConfig","CsvRowsIterable","caseSensitive","ColumnNamesIterable","considerAllRows","getColumnNames","getColumns","getSeries","firstValue","type","determineType","setIndex","deflate","hasSeries","expectSeries","withSeries","columnNameOrSpec","isUndefined","columnSpec","workingDataFrame","columnNames_4","columnNames_4_1","columnName_1","importSeries","seriesValueMap","toMap2","makeDistinct","modified","assign","dataFrames","resultIsCaseSensitive","dataFrames_1","dataFrames_1_1","dataFrame","clone","allColumnNames","prev","newColumnNames","otherDataFrames","ensureSeries","columnNames_5","columnNames_5_1","columnName_2","subset","columnNames_6","columnNames_6_1","columnNames_7","columnNames_7_1","dropSeries","columnOrColumns","indexOf","columnOrColumns_1","columnOrColumns_1_1","columnOrColumns_2","columnOrColumns_2_1","reorderSeries","columnNames_8","columnNames_8_1","columnNames_9","columnNames_9_1","columnNames_10","columnNames_10_1","bringToFront","columnOrColumns_3","columnOrColumns_3_1","existingColumns","columnsToMove","columnOrColumns_4","columnOrColumns_4_1","columnToMove","untouchedColumnNames","existingColumns_1","existingColumns_1_1","existingColumnName","bringToBack","columnOrColumns_5","columnOrColumns_5_1","columnOrColumns_6","columnOrColumns_6_1","existingColumns_2","existingColumns_2_1","renameSeries","existingColumnsToRename","existingColumnsToRename_1","existingColumnsToRename_1_1","renamedColumns","remapValue","existingColumnsToRename_2","existingColumnsToRename_2_1","existingColumName","toRows","columnIndex","transformSeries","columnSelectors","generateSeries","columnTransformSpec","newColumnNames_2","newColumnNames_2_1","newColumnName","newColumns","newColumnNames_1","newColumnNames_1_1","inflateSeries","row1","row2","DataFrameWindowIterable","DataFrameRollingWindowIterable","DataFrameVariableWindowIterable","columnAggregateSpec_1","aggregatedColumns","columnSelector","dataframe","dataframe_1_1","columnNameOrNames","columnNameOrNames_1","columnNameOrNames_1_1","columnNameOrNames_2","columnNameOrNames_2_1","columnNameOrNames_3","columnNameOrNames_3_1","_d","_e","columnFormatString","columnNames_11","columnNames_11_1","singleColumnName","dataframes","contents_1","contents_1_1","dataframes_1","dataframes_1_1","OrderedDataFrame","summarize","spec","inputColumnName","inputSpec","outputFieldsMap","valueColumnName","inputColumnNames_1","inputColumnNames_1_1","outputFieldNames","outputFieldNames_1","outputFieldNames_1_1","outputFieldName","aggregatorFn","pivot","valueColumnNameOrSpec","aggregator","aggSpec","columnNames_12","columnNames_12_1","_c","columnAggSpec","aggColumnName","outputSpec","firstColumnName","src","columnNameIndex","nextColumnName","parentGroup","subGroup","valueColumnNames","outputColumnsMap","outputColumnNames_1","outputColumnNames_1_1","outputColumName","srcRow","valueColumnNames_1","valueColumnNames_1_1","melt","idColumnOrColumns","valueColumnOrColumns","idColumnNames","idColumnNames_1","idColumnNames_1_1","valueColumnNames_2","valueColumnNames_2_1","K","N","mdata","original","idColumnNames_2","idColumnNames_2_1","col","idData","columnData_1","TileIterable","columnSeries_1","seriesArray","columnData","RavelIterable","columnSeries","valueColumnData","RepeatIterable","valueColumnSeries","defaultDataFrame","typeFrequency","Column","valueFrequency","toJSON","JSON","stringify","toJSON5","toCSV","unparse","toHTML","columNames","columName","serialize","indexValues","serializedColumns","indexType","getType","toISOString","cloned","columns_1","columns_1_1","rows_1","rows_1_1","columnOrder","deserialize","rows_2","rows_2_1","_1","_2","util_1","fromObject","obj","Field","fromJSON","jsonTextString","parse","fromJSON5","fromCSV","csvTextString","skipEmptyLines","data","trim","shift","concatSeries","zipSeries","start","matrix","numColumns","increment","nextValue","colIndex","e","u","h","f","String","z","utcOffset","year","month","add","M","y","w","ms","Q","replace","$","weekdays","split","months","S","g","pl","date","D","locale","$L","utc","$u","$d","Date","NaN","test","match","UTC","init","$y","getFullYear","$M","getMonth","$D","getDate","$W","getDay","$H","getHours","$m","getMinutes","$s","getSeconds","$ms","getMilliseconds","$utils","isValid","isSame","startOf","endOf","isAfter","isBefore","$g","day","hour","minute","second","millisecond","unix","valueOf","getTime","$locale","weekStart","$set","daysInMonth","setDate","subtract","substr","YY","YYYY","MM","MMM","monthsShort","MMMM","DD","dd","weekdaysMin","ddd","weekdaysShort","dddd","H","HH","hh","A","mm","ss","SSS","Z","getTimezoneOffset","diff","toUTCString","isDayjs","en","Ls","typy_1","isBoolean","mapIterable","items","mapFn","result","sent","items_1","items_1_1","item","items_2","items_2_1","items_3","items_3_1","_type","d1","d2","v1","v2","getGreaterThan","ArrayIterator","empty_iterator_1","EmptyIterator","count_iterator_1","CountIterator","multi_iterator_1","iterables","iterators","iterable","MultiIterator","select_iterator_1","SelectIterator","select_many_iterator_1","SelectManyIterator","take_iterator_1","childIterable","numElements","childIterator","TakeIterator","take_while_iterator_1","TakeWhileIterator","where_iterator_1","WhereIterator","concat_iterator_1","ConcatIterator","array_iterator_1","zip_iterator_1","ZipIterator","distinct_iterator_1","DistinctIterator","SortOperation","sortSpec","genKeys","compare","indexA","indexB","keyA","keyB","comparison","indexes","sortOperations","sortOperations_1","sortOperations_1_1","sortedValues","indexes_1","indexes_1_1","extract_element_iterator_1","arrayIterable","extractIndex","arrayIterator","ExtractElementIterator","skip_iterator_1","SkipIterator","skip_while_iterator_1","SkipWhileIterator","wcwidth","Table","__printers","string","val","str","leftPadder","ch","len","printer","separator","padLeft","rightPadder","padRight","each","fn","number","digits","cols","idx","print","widths","out","line","pushDelimeter","totals","forEachTotal","cb","aggr","acc","printTransposed","opts","namePrinter","cmp","comparators","order","exec","prefix","avg","params","log","createCommonjsModule","_global","global","self","Function","__g","_core","core","version","__e","_isObject","it","_anObject","TypeError","_fails","_descriptors","document","is","createElement","_ie8DomDefine","dP","_objectDp","O","P","Attributes","_toPrimitive","_hide","bitmap","configurable","writable","_propertyDesc","_has","id","px","random","_redefine","SRC","$toString","TPL","inspectSource","safe","_ctx","that","_aFunction","$export","source","own","exp","IS_FORCED","F","IS_GLOBAL","G","IS_STATIC","IS_PROTO","IS_BIND","B","target","expProto","U","W","R","TO_STRING","_export","_toInteger","isNaN","$at","pos","_defined","charCodeAt","charAt","codePointAt","fromCharCode","$fromCodePoint","fromCodePoint","x","code","arguments$1","res","aLen","RangeError","parseState","stack","token","root","lexState","buffer","doubleQuote","sign","unicode","Space_Separator","ID_Start","ID_Continue","util","isSpaceSeparator","isIdStartChar","isIdContinueChar","isDigit","isHexDigit","lex","peek","lexStates","read","newToken","comment","invalidChar","multiLineComment","multiLineCommentAsterisk","singleLineComment","literal","Infinity","identifierNameStartEscape","unicodeEscape","invalidIdentifier","identifierName","identifierNameEscape","zero","decimalInteger","decimalPointLeading","decimalPoint","decimalFraction","decimalExponent","decimalExponentSign","decimalExponentInteger","hexadecimal","hexadecimalInteger","hexEscape","escape","formatChar","separatorChar","beforePropertyName","afterPropertyName","beforePropertyValue","afterPropertyValue","beforeArrayValue","afterArrayValue","end","list","parseStates","invalidEOF","pop","current","syntaxError","replacements","'","\"","\\","\b","\f","\n","\r","\t","\u000b","\u0000"," "," ","hexString","message","err","SyntaxError","lineNumber","columnNumber","text","reviver","internalize","holder","replacement","","replacer","space","propertyList","replacerFunc","quote","indent","gap","serializeProperty","Boolean","quoteString","stepback","final","partial","propertyString","properties","properties$1","serializeArray","member","serializeKey","serializeObject","quotes","product","quoteChar","RegExp","firstChar","factory","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","postMessage","location","protocol","dynamicTyping","dynamicTypingFunction","transform","worker","WORKERS_SUPPORTED","URL","webkitURL","BLOB_URL","createObjectURL","Blob","Worker","onmessage","_","userStep","step","userChunk","chunk","userComplete","complete","userError","error","workerId","NODE_STREAM_INPUT","download","readable","on","File","stream","delimiter","BAD_DELIMITERS","newline","escapeChar","q","fields","meta","constructor","RECORD_SEP","UNIT_SEP","BYTE_ORDER_MARK","LocalChunkSize","RemoteChunkSize","DefaultDelimiter","Parser","ParserHandle","NetworkStreamer","FileStreamer","StringStreamer","ReadableStreamStreamer","jQuery","prop","toUpperCase","attr","FileReader","files","file","inputElem","instanceConfig","action","reason","splice","_handle","_finished","_completed","_halted","_input","_baseIndex","_partialLine","_rowCount","_start","_nextChunk","isFirstChunk","_completeResults","errors","E","chunkSize","streamer","_config","parseChunk","beforeFirstChunk","paused","aborted","cursor","preview","results","WORKER_ID","finished","_sendError","_readChunk","_chunkLoaded","XMLHttpRequest","withCredentials","onload","onerror","_chunkError","open","downloadRequestBody","downloadRequestHeaders","setRequestHeader","send","status","readyState","responseText","getResponseHeader","lastIndexOf","statusText","webkitSlice","mozSlice","FileReaderSync","size","readAsText","encoding","pause","resume","_streamData","_streamEnd","_streamError","_checkIsFinished","_streamCleanUp","removeListener","pow","abort","k","transformHeader","comments","successful","bestDelimiter","delimitersToGuess","getCharIndex","setTimeout","I","T","L","fastMode","j","nextDelim","quoteSearch","C","linebreak","truncated","terminate","cached_iterator_1","cached","CachedIterator","_next","zone","offset","afternoon","milliseconds","SS","Do","ordinal","findIndex","Y","ZZ","regex","parser","hours","minutes","seconds","multiResult","outputIterator","outputIterable","outputResult","curIterator","moveToNextIterable","nextIterable","series_window_iterator_1","SeriesWindowIterator","curWindow","curPos","Start","results_1","results_1_1","zippedValues","zipperInput","valuesAlreadySeen","Set","potentialOutput","series_rolling_window_iterator_1","SeriesRollingWindowIterator","series_variable_window_iterator_1","SeriesVariableWindowIterator","prevValue","doneSkipping","defaults","combining","DEFAULTS","nul","control","wcswidth","ucs","mid","bisearch","Buffer","circular","depth","allParents","allChildren","useBuffer","_clone","child","proto","__isArray","__isRegExp","__getRegExpFlags","lastIndex","__isDate","isBuffer","allocUnsafe","copy","getPrototypeOf","attrs","getOwnPropertyDescriptor","__objToStr","re","flags","ignoreCase","multiline","clonePrototype","base64","ieee754","kMaxLength","TYPED_ARRAY_SUPPORT","createBuffer","Uint8Array","__proto__","arg","encodingOrOffset","ArrayBuffer","array","byteOffset","byteLength","fromArrayLike","fromArrayBuffer","isEncoding","actual","write","fromString","checked","assertSize","isView","loweredCase","utf8ToBytes","base64ToBytes","swap","bidirectionalIndexOf","dir","arrayIndexOf","indexSize","arrLength","valLength","buf","readUInt16BE","foundIndex","found","hexWrite","remaining","strLen","parsed","utf8Write","blitBuffer","asciiWrite","byteArray","asciiToBytes","latin1Write","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","base64Slice","fromByteArray","utf8Slice","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","foo","subarray","typedArraySupport","poolSize","_augment","species","fill","allocUnsafeSlow","_isBuffer","swap16","swap32","swap64","hexSlice","asciiSlice","latin1Slice","utf16leSlice","equals","inspect","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","_arr","ret","toHex","bytes","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","INVALID_BASE64_RE","leadSurrogate","toByteArray","stringtrim","base64clean","dst","b64","lens","getLens","validLen","placeHoldersLen","tmp","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","parts","len2","encodeChunk","num","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","rt","LN2","dataframe_window_iterator_1","DataFrameWindowIterator","csv_rows_iterator_1","CsvRowsIterator","rowsIterable","rowsIterator","dataframe_rolling_window_iterator_1","DataFrameRollingWindowIterator","dataframe_variable_window_iterator_1","DataFrameVariableWindowIterator","repeat_iterator_1","RepeatIterator","repetition","tile_iterator_1","TileIterator","firstIteration","ravel_iterator_1","RavelIterator","iteratorIndex","column_names_iterator_1","ColumnNamesIterator","columnNamesIterator","combinedFields","addCustomTypes","Schema","_typy","_typy2","__defineGetter__","_typeof","_createClass","_util","Typy","_classCallCheck","schemaCheck","getNestedObject","convertSchemaAndGetMatch","isNull","Null","Undefined","_arguments","buildSchema","getSchemaMatch","numeral","decimal","binary","unformatRegex","formats","locales","currentLocale","zeroFormat","nullFormat","defaultFormat","scalePercentBy100","Numeral","_value","kind","unformatFunction","regexp","isNumeral","regexps","unformat","stringToNumber","numberToFormat","roundingFunction","leadingCount","abbrForce","int","precision","signed","thousands","negP","optDec","abbr","neg","abbreviations","trillion","billion","million","thousand","delimiters","abbreviation","stringOriginal","currency","symbol","search","insert","subString","multiplier","correctionFactor","mn","maxDecimals","optionals","boundedPrecision","optionalsRegExp","power","splitValue","minDecimals","localeData","reset","register","validate","culture","_decimalSep","_thousandSep","_currSymbol","_valArray","_abbrObj","_thousandRegEx","temp","inputString","formatFunction","corrFactor","curr","currI","multiply","divide","difference","base","suffixes","suffix","bytesMultiplier","symbols","toExponential","timeArray","process","getOwnPropertyDescriptors","descriptors","formatRegExp","objects","deprecate","msg","noDeprecation","warned","throwDeprecation","traceDeprecation","trace","debugEnviron","debugs","ctx","seen","stylize","stylizeNoColor","colors","showHidden","_extend","customInspect","stylizeWithColor","formatValue","styleType","style","styles","recurseTimes","primitive","simple","formatPrimitive","visibleKeys","hash","arrayToHash","getOwnPropertyNames","isError","formatError","isRegExp","braces","formatProperty","formatArray","cur","numLinesEst","reduceToSingleString","desc","ar","objectToString","pad","debuglog","env","NODE_DEBUG","pid","bold","italic","underline","inverse","white","grey","black","blue","cyan","green","magenta","red","yellow","special","boolean","null","isNullOrUndefined","isSymbol","isPrimitive","time","inherits","origin","kCustomPromisifiedSymbol","callbackifyOnRejected","newReason","promisify","promiseResolve","promiseReject","promise","Promise","resolve","reject","setPrototypeOf","defineProperties","custom","callbackify","callbackified","maybeCb","then","nextTick","rej","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","marker","runClearTimeout","Item","noop","title","browser","argv","versions","addListener","once","off","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","umask","ctor","superCtor","super_","TempCtor"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","import { ArrayIterable }  from './iterables/array-iterable';\nimport { EmptyIterable }  from './iterables/empty-iterable';\nimport { CountIterable }  from './iterables/count-iterable';\nimport { MultiIterable }  from './iterables/multi-iterable';\nimport { SelectIterable }  from './iterables/select-iterable';\nimport { SelectManyIterable }  from './iterables/select-many-iterable';\nimport { TakeIterable }  from './iterables/take-iterable';\nimport { TakeWhileIterable }  from './iterables/take-while-iterable';\nimport { WhereIterable }  from './iterables/where-iterable';\nimport { ConcatIterable }  from './iterables/concat-iterable';\nimport { SeriesWindowIterable }  from './iterables/series-window-iterable';\nimport { ReverseIterable }  from './iterables/reverse-iterable';\nimport { ZipIterable }  from './iterables/zip-iterable';\nimport { DistinctIterable }  from './iterables/distinct-iterable';\nimport { SeriesRollingWindowIterable }  from './iterables/series-rolling-window-iterable';\nimport { SeriesVariableWindowIterable }  from './iterables/series-variable-window-iterable';\nimport { OrderedIterable, Direction, ISortSpec, SelectorFn as SortSelectorFn }  from './iterables/ordered-iterable';\nimport { IIndex, Index } from './index';\nimport { ExtractElementIterable } from './iterables/extract-element-iterable';\nimport { SkipIterable } from './iterables/skip-iterable';\nimport { SkipWhileIterable } from './iterables/skip-while-iterable';\n// @ts-ignore\nimport Table from 'easy-table';\nimport { IDataFrame, DataFrame } from './dataframe';\n// @ts-ignore\nimport moment from \"dayjs\";\n// @ts-ignore\nimport customParseFormat from 'dayjs/plugin/customParseFormat';\nmoment.extend(customParseFormat);\nimport { toMap, isArray, isFunction, isNumber, isString, isDate, isObject } from './utils';\nimport { range, replicate } from '..';\nimport numeral from 'numeral';\nimport { CachedIteratorIterable } from './iterables/cached-iterator-iterable';\n\n/**\n * Used to configure a series.\n */\nexport interface ISeriesConfig<IndexT, ValueT> {\n    /**\n     * Values to put in the dataframe.\n     * This should be array or iterable of JavaScript values.\n     */\n    values?: Iterator<ValueT> | Iterable<ValueT>;\n\n    /***\n     * The index for the serires.\n     * If omitted the index will default to a 0-based index.\n     */\n    index?: Iterator<IndexT> | Iterable<IndexT>;\n\n    /**\n     * Array or iterable of index,value pairs to put in the series.\n     * If index and values are not separately specified they can be extracted\n     * from the pairs.\n     */\n    pairs?: Iterator<[IndexT, ValueT]> | Iterable<[IndexT, ValueT]>;\n\n    /***\n     * Set to true when the series has been baked into memory\n     * and does not need to be lazily evaluated.\n     */\n    baked?: boolean;\n}\n\n/**\n * A user-defined callback function that can be applied to each value.\n */\nexport type CallbackFn<ValueT> = (value: ValueT, index: number) => void;\n\n/**\n * A user-defined selector function. \n * Transforms a value into another kind of value.\n */\nexport type SelectorWithIndexFn<FromT, ToT> = (value: FromT, index: number) => ToT;\n\n/**\n * User-defined zipper functions.\n * Used to 'zip together' multiple series or dataframes.\n */\n//TODO: The Zip function should actually be necessary. Should really just output a series of arrays, collecting each value into one array.\n// The caller can then run select on it and this means th the zipper function is unecessary.\nexport type ZipNFn<ValueT, ReturnT> = (input: ISeries<number, ValueT>) => ReturnT;\nexport type Zip2Fn<T1, T2, ReturnT> = (a: T1, b : T2) => ReturnT;\nexport type Zip3Fn<T1, T2, T3, ReturnT> = (a: T1, b: T2, c: T3) => ReturnT;\nexport type Zip4Fn<T1, T2, T3, T4, ReturnT> = (a: T1, b: T2, c: T3, d: T4) => ReturnT;\nexport type Zip5Fn<T1, T2, T3, T4, T5, ReturnT> = (a: T1, b: T2, c: T3, d: T4) => ReturnT;\n\n/**\n * A user-defined selector function with no index. \n * Transforms a value into another kind of value.\n */\nexport type SelectorFn<FromT, ToT> = (value: FromT) => ToT;\n\n/**\n * A user-defined function that joins two values and produces a result.\n */\nexport type JoinFn<ValueT1, ValueT2, ResultT> = (a: ValueT1, b: ValueT2) => ResultT;\n\n/**\n * A user-defined predicate function, returns true or false based on input.\n */\nexport type PredicateFn<ValueT> = (value: ValueT) => boolean;\n\n/**\n * A user-defined function that aggregtates a value into an accumulator\n * and returns the new result.\n */\nexport type AggregateFn<ValueT, ToT> = (accum: ToT, value: ValueT) => ToT;\n\n/**\n * A user-defined comparer function that Compares to values and \n * returns true (truthy) if they are equivalent or false (falsy) if not.\n */\nexport type ComparerFn<ValueT1, ValueT2> = (a: ValueT1, b: ValueT2) => boolean;\n\n/*\n * A user-defined function that generates a series config object.\n * Used to make it easy to create lazy evaluated series.\n */\nexport type SeriesConfigFn<IndexT, ValueT> = () => ISeriesConfig<IndexT, ValueT>;\n\n/*\n * A user-defined gap-filler function.\n * This function generates a sequence of values between to fill the gaps between two other values.\n */\nexport type GapFillFn<ValueT, ResultT> = (a: ValueT, b: ValueT) => ResultT[];\n\n/**\n * Represents the frequency of a type in a series or dataframe.\n */\nexport interface ITypeFrequency {\n\n    /**\n     * The name of the type.\n     */\n    Type: string; \n\n    /**\n     * The frequency of the type's appearance in the series or dataframe.\n     */\n    Frequency: number;\n}\n\n/**\n * Represents the frequency of a value in a series or dataframe.\n */\nexport interface IValueFrequency {\n\n    /**\n     * The value.\n     */\n    Value: any; \n\n    /**\n     * The frequency of the value's appearance in the series or dataframe.\n     */\n    Frequency: number;\n}\n\n/**\n * Places a value in a bucket or range of values.\n * \n * WARNING: This interface is deprecated and will be removed in the future.\n */\nexport interface IBucket {\n    /**\n     * The bucketed value.\n     */\n    Value: number;\n\n    /**\n     * The index of the bucket that contains the value.\n     */\n    Bucket: number;\n\n    /**\n     * The minimum value in the bucket.\n     */\n    Min: number;\n\n    /**\n     * The mid-point value in the bucket.\n     */\n    Mid: number;\n    \n    /**\n     * The maximum value in the bucket.\n     */\n    Max: number;\n}\n\n/**\n * Specifies where from a data window the index is pulled from: the start of the window, the end or from the middle.\n */\nexport enum WhichIndex {\n    Start = \"start\",\n    End = \"end\",\n}\n\n/**\n * Options to the `Series.frequency` function.\n */\nexport interface IFrequencyTableOptions {\n\n    /**\n     * Lower boundary (if defined).\n     */\n    lower?: number;\n\n    /**\n     * Upper boundary (if defined).\n     */\n    upper?: number;\n\n     /**\n     * Directly sets the interval (if defined). This is the range of each group.\n     */\n    interval?: number;\n    \n    /**\n     * Enables capturing of values for each group.\n     */\n    captureValues?: boolean;\n}\n\n/**\n * Defines a record in the frequency table output by the `Series.frequency` function.\n */\nexport interface IFrequencyTableEntry {\n\n    /**\n     * Lower value in this group of the frequency table.\n     */\n    lower?: number;\n\n    /** \n     * Upper value in this group of the frequency table.  \n     */\n    upper?: number;\n\n    /**\n     * Count of values in this group.\n     */\n    count: number;\n\n    /**\n     * Proportion (0-1) of values in this group.\n     */\n    proportion: number;\n\n    /**\n     * Cumulative proportion of values in this and earlier groups.\n     */\n    cumulative: number;\n\n    /**\n     * The values that were record in this group.\n     * (if enabled in the options).\n     */\n    values?: number[];\n}\n\n\n/**\n * Interface that represents a series.\n * A series contains an indexed sequence of values.\n * A series indexed by time is a timeseries.\n * \n * @typeparam IndexT The type to use for the index.\n * @typeparam ValueT The type to use for each value.\n */\nexport interface ISeries<IndexT = number, ValueT = any> extends Iterable<ValueT> {\n\n    /**\n     * Get an iterator to enumerate the values of the series.\n     * Enumerating the iterator forces lazy evaluation to complete.\n     * This function is automatically called by `for...of`.\n     * \n     * @return An iterator for the values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * for (const value of series) {\n     *     // ... do something with the value ...\n     * }\n     * </pre>\n     */\n    [Symbol.iterator] (): Iterator<ValueT>;\n\n    /**\n     * Cast the value of the series to a new type.\n     * This operation has no effect but to retype the values that the series contains.\n     * \n     * @return The same series, but with the type changed.\n     * \n     * @example\n     * <pre>\n     * \n     * const castSeries = series.cast<SomeOtherType>();\n     * </pre>\n     */\n    cast<NewValueT> (): ISeries<IndexT, NewValueT>;\n\n    /**\n     * Get the index for the series.\n     * \n     * @return The {@link Index} for the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const index = series.getIndex();\n     * </pre>\n     */\n    getIndex (): IIndex<IndexT>;\n\n    /**\n     * Apply a new {@link Index} to the series.\n     * \n     * @param newIndex The new array or iterable to be the new {@link Index} of the series. Can also be a selector to choose the {@link Index} for each value in the series.\n     * \n     * @return Returns a new series with the specified {@link Index} attached.\n     * \n     * @example\n     * <pre>\n     * \n     * const indexedSeries = series.withIndex([10, 20, 30]);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const indexedSeries = series.withIndex(someOtherSeries);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const indexedSeries = series.withIndex(value => computeIndexFromValue(value));\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const indexedSeries = series.withIndex(value => value + 20);\n     * </pre>\n     */\n    withIndex<NewIndexT> (newIndex: Iterable<NewIndexT> | SelectorFn<ValueT, NewIndexT>): ISeries<NewIndexT, ValueT>;\n\n    /**\n     * Resets the {@link Index} of the series back to the default zero-based sequential integer index.\n     * \n     * @return Returns a new series with the {@link Index} reset to the default zero-based index. \n     * \n     * @example\n     * <pre>\n     * \n     * const seriesWithResetIndex = series.resetIndex();\n     * </pre>\n     */\n    resetIndex (): ISeries<number, ValueT>;\n\n   /**\n     * Merge one or more series into this series.\n     * Values are merged by index.\n     * Values at each index are combined into arrays in the resulting series.\n     * \n     * @param series... One or more other series to merge into the series.\n     * \n     * @returns The merged series.\n     * \n     * @example\n     * <pre>\n     * \n     * const mergedSeries = series1.merge(series2);\n     * </pre>\n     * \n     * <pre>\n     * \n     * const mergedSeries = series1.merge(series2, series3, etc);\n     * </pre>\n     */\n    merge<MergedValueT = any>(...args: any[]): ISeries<IndexT, MergedValueT[]>;\n\n    /**\n    * Extract values from the series as an array.\n    * This forces lazy evaluation to complete.\n    * \n    * @return Returns an array of the values contained within the series.\n    * \n    * @example\n    * <pre>\n    * const values = series.toArray();\n    * </pre>\n    */\n   toArray (options?: { includeNulls?: boolean }): ValueT[];\n\n    /**\n     * Retreive the index, values pairs from the series as an array.\n     * Each pair is [index, value].\n     * This forces lazy evaluation to complete.\n     * \n     * @return Returns an array of pairs that contains the series values. Each pair is a two element array that contains an index and a value.\n     * \n     * @example\n     * <pre>\n     * const pairs = series.toPairs();\n     * </pre>\n     */\n    toPairs (): ([IndexT,ValueT])[];\n\n    /**\n     * Convert the series to a JavaScript object.\n     *\n     * @param keySelector User-defined selector function that selects keys for the resulting object.\n     * @param valueSelector User-defined selector function that selects values for the resulting object.\n     * \n     * @return Returns a JavaScript object generated from the series by applying the key and value selector functions. \n     * \n     * @example\n     * <pre>\n     * \n     * const someObject = series.toObject(\n     *      value => value, // Specify the value to use for field names in the output object.\n     *      value => value // Specify the value to use as the value for each field.\n     * );\n     * </pre>\n     */\n    toObject<KeyT = any, FieldT = any, OutT = any> (keySelector: (value: ValueT) => KeyT, valueSelector: (value: ValueT) => FieldT): OutT;\n\n    /**\n     * Transforms an input series, generating a new series.\n     * The transformer function is called for each element of the input and the collection of outputs creates the generated series.\n     * \n     * `select` is an alias for {@link Series.map}.\n     * \n     * This is the same concept as the JavaScript function `Array.map` but maps over a data series rather than an array.\n     *\n     * @param transformer A user-defined transformer function that transforms each element from the input to generate the output.\n     * \n     * @return Returns the series generated by calling the transformer function over each value in the input series.\n     * \n     * @example\n     * <pre>\n     * \n     * function transformer (input) {\n     *      const output = // ... construct output from input ...\n     *      return output;\n     * }\n     *  \n     * const transformed = series.select(transformer);\n     * console.log(transformed.toString());\n     * </pre>\n     */\n    select<ToT> (transformer: SelectorWithIndexFn<ValueT, ToT>): ISeries<IndexT, ToT>;\n\n    /**\n     * Transforms an input series, generating a new series.\n     * The transformer function is called for each element of the input and the collection of outputs creates the generated series.\n     * \n     * This is the same concept as the JavaScript function `Array.map` but maps over a data series rather than an array.\n     *\n     * @param transformer A user-defined transformer function that transforms each element from the input to generate the output.\n     * \n     * @return Returns a new series generated by calling the transformer function over each element of the input.\n     * \n     * @example\n     * <pre>\n     * \n     * function transformer (input) {\n     *      const output = // ... construct output from input ...\n     *      return output;\n     * }\n     *  \n     * const transformed = series.map(transformer);\n     * console.log(transformed.toString());\n     * </pre>\n     */\n    map<ToT> (transformer: SelectorWithIndexFn<ValueT, ToT>): ISeries<IndexT, ToT>;\n    \n    /**\n     * Transforms and flattens an input series, generating a new series.\n     * The transformer function is called for each value in the input series and produces an array that is then flattened into the generated series.\n     * \n     * `selectMany` is an alias for {@link Series.flatMap}.\n     * \n     * This is the same concept as the JavaScript function `Array.flatMap` but maps over a data series rather than an array.\n     * \n     * @param transformer A user-defined function that transforms each value into an array that is then flattened into the generated series.\n     * \n     * @return Returns a new series generated by calling the transformer function over each element of the input.\n     * \n     * @example\n     * <pre>\n     * \n     * function transformer (input) {\n     *      const output = [];\n     *      while (someCondition) {\n     *          // ... generate zero or more outputs from a single input ...\n     *          output.push(... some generated value ...);\n     *      }\n     *      return output;\n     * }\n     * \n     * const transformed = series.selectMany(transformer);\n     * console.log(transformed.toString());\n     * </pre>\n     */\n    selectMany<ToT> (transformer: SelectorWithIndexFn<ValueT, Iterable<ToT>>): ISeries<IndexT, ToT>;\n\n    /**\n     * Transforms and flattens an input series, generating a new series.\n     * The transformer function is called for each value in the input series and produces an array that is then flattened into the generated series.\n     * \n     * This is the same concept as the JavaScript function `Array.flatMap` but maps over a data series rather than an array.\n     * \n     * @param transformer A user-defined function that transforms each value into an array that is then flattened into the generated series.\n     * \n     * @return Returns a new series generated by calling the transformer function over each element of the input.\n     * \n     * @example\n     * <pre>\n     * \n     * function transformer (input) {\n     *      const output = [];\n     *      while (someCondition) {\n     *          // ... generate zero or more outputs from a single input ...\n     *          output.push(... some generated value ...);\n     *      }\n     *      return output;\n     * }\n     * \n     * const transformed = series.flatMap(transformer);\n     * console.log(transformed.toString());\n     * </pre>\n     */\n    flatMap<ToT> (transformer: SelectorWithIndexFn<ValueT, Iterable<ToT>>): ISeries<IndexT, ToT>;\n        \n    /**\n     * Partition a series into a {@link Series} of *data windows*. \n     * Each value in the new series is a chunk of data from the original series.\n     *\n     * @param period The number of values to include in each data window.\n     * @param whichIndex Sets which side of the window the index comes from: start or end. Can be \"start\" or \"end\", defaults to \"end\".\n     * \n     * @return Returns a new series, each value of which is a chunk (data window) of the original series.\n     * \n     * @example\n     * <pre>\n     * \n     * const windows = series.window(2); // Get values in pairs.\n     * const pctIncrease = windows.select(pair => (pair.last() - pair.first()) / pair.first());\n     * console.log(pctIncrease.toString());\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const salesDf = ... // Daily sales data.\n     * const weeklySales = salesDf.window(7); // Partition up into weekly data sets.\n     * console.log(weeklySales.toString());\n     * </pre>\n     */\n    window (period: number, whichIndex?: WhichIndex): ISeries<IndexT, ISeries<IndexT, ValueT>>;\n\n    /** \n     * Partition a series into a new series of *rolling data windows*. \n     * Each value in the new series is a rolling chunk of data from the original series.\n     *\n     * @param period The number of data values to include in each data window. \n     * @param whichIndex Sets which side of the window the index comes from: start or end. Can be \"start\" or \"end\", defaults to \"end\".\n     * \n     * @return Returns a new series, each value of which is a rolling chunk of the original series.\n     * \n     * @example\n     * <pre>\n     * \n     * const salesData = ... // Daily sales data.\n     * const rollingWeeklySales = salesData.rollingWindow(7); // Get rolling window over weekly sales data.\n     * console.log(rollingWeeklySales.toString());\n     * </pre>\n     */\n    rollingWindow (period: number, whichIndex?: WhichIndex): ISeries<IndexT, ISeries<IndexT, ValueT>>;\n\n    /**\n     * Partition a series into a new series of variable-length *data windows* \n     * where the divisions between the data chunks are\n     * defined by a user-provided *comparer* function.\n     * \n     * @param comparer Function that compares two adjacent data values and returns true if they should be in the same window.\n     * \n     * @return Returns a new series, each value of which is a chunk of data from the original series.\n     * \n     * @example\n     * <pre>\n     * \n     * function rowComparer (valueA, valueB) {\n     *      if (... valueA should be in the same data window as valueB ...) {\n     *          return true;\n     *      }\n     *      else {\n     *          return false;\n     *      }\n     * };\n     * \n     * const variableWindows = series.variableWindow(rowComparer);\n     */\n    variableWindow (comparer: ComparerFn<ValueT, ValueT>): ISeries<number, ISeries<IndexT, ValueT>>;\n\n    /**\n     * Eliminates adjacent duplicate values.\n     * \n     * For each group of adjacent values that are equivalent only returns the last index/row for the group, \n     * thus ajacent equivalent values are collapsed down to the last value.\n     *\n     * @param selector Optional selector function to determine the value used to compare for equivalence.\n     * \n     * @return Returns a new series with groups of adjacent duplicate vlaues collapsed to a single value per group.\n     * \n     * @example\n     * <pre>\n     * \n     * const seriesWithDuplicateRowsRemoved = series.sequentialDistinct(value => value);\n     * \n     * // Or\n     * const seriesWithDuplicateRowsRemoved = series.sequentialDistinct(value => value.someNestedField);\n     * </pre>\n     */\n    sequentialDistinct<ToT> (selector: SelectorFn<ValueT, ToT>): ISeries<IndexT, ValueT>;\n    \n    /**\n     * Reduces the values in the series to a single result.\n     *\n     * `aggregate` is similar to {@link Series.reduce}, but the parameters are reversed. \n     * Please use {@link Series.reduce} in preference to `aggregate`.\n     *\n     * @param seed Optional seed value for producing the aggregation.\n     * @param reducer Function that takes the seed and then each value in the series and produces the reduced value.\n     * \n     * @return Returns a new value that has been reduced from the input series by passing it through the 'reducer' function.\n     * \n     * @example\n     * <pre>\n     * \n     * const dailySales = ... daily sales figures for the past month ...\n     * const totalSalesForthisMonth = dailySales.aggregate(\n     *      0, // Seed - the starting value.\n     *      (accumulator, salesAmount) => accumulator + salesAmount // Aggregation function.\n     * );\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const previousSales = 500; // We'll seed the aggregation with this value.\n     * const dailySales = ... daily sales figures for the past month ...\n     * const updatedSales = dailySales.aggregate(\n     *      previousSales, \n     *      (accumulator, salesAmount) => accumulator + salesAmount\n     * );\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * var salesDataSummary = salesData.aggregate({\n     *      TotalSales: series => series.count(),\n     *      AveragePrice: series => series.average(),\n     *      TotalRevenue: series => series.sum(), \n     * });\n     * </pre>\n     */\n    aggregate<ToT = ValueT> (seedOrSelector: AggregateFn<ValueT, ToT> | ToT, selector?: AggregateFn<ValueT, ToT>): ToT;\n   \n    /**\n     * Reduces the values in the series to a single result.\n     *\n     * This is the same concept as the JavaScript function `Array.reduce` but reduces a data series rather than an array.\n\n     * @param reducer Function that takes the seed and then each value in the series and produces the reduced value.\n     * @param seed Optional initial value, if not specifed the first value in the series is used as the initial value.\n     * \n     * @return Returns a new value that has been reduced from the input series by passing it through the 'reducer' function.\n     * \n     * @example\n     * <pre>\n     * \n     * const dailySales = ... daily sales figures for the past month ...\n     * const totalSalesForthisMonth = dailySales.reduce(\n     *      (accumulator, salesAmount) => accumulator + salesAmount, // Reducer function.\n     *      0  // Seed value, the starting value.\n     * );\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const previousSales = 500; // We'll seed the reduction with this value.\n     * const dailySales = ... daily sales figures for the past month ...\n     * const updatedSales = dailySales.reduce(\n     *      (accumulator, salesAmount) => accumulator + salesAmount,\n     *      previousSales\n     * );\n     * </pre>\n     */\n    reduce<ToT = ValueT> (reducer: AggregateFn<ValueT, ToT>, seed?: ToT): ToT;\n\n    /**\n     * Compute the absolute range of values in each period.\n     * The range for each period is the absolute difference between largest (max) and smallest (min) values in that period.\n     * \n     * @param period - Period for computing the range.\n     * @param whichIndex Sets which side of the window the index comes from: start or end. Can be \"start\" or \"end\", defaults to \"end\".\n     * \n     * @returns Returns a new series where each value indicates the absolute range of values for each period in the original series.\n     * \n     * @example\n     * <pre>\n     * \n     * const closingPrice = ... series of closing prices for a particular stock ...\n     * const volatility = closingPrice.amountRange(5);\n     * </pre>\n     */\n    amountRange (period: number, whichIndex?: WhichIndex): ISeries<IndexT, number>;\n\n    /**\n     * Compute the range of values in each period in proportion to the latest value.\n     * The range for each period is the absolute difference between largest (max) and smallest (min) values in that period.\n     * Proportions are expressed as 0-1 values.\n     * \n     * @param period - Period for computing the range.\n     * @param whichIndex Sets which side of the window the index comes from: start or end. Can be \"start\" or \"end\", defaults to \"end\".\n     * \n     * @returns Returns a new series where each value indicates the proportion change from the previous number value in the original series.\n     * \n     * @returns Returns a new series where each value indicates the proportionate range of values for each period in the original series.\n     * \n     * @example\n     * <pre>\n     * \n     * const closingPrice = ... series of closing prices for a particular stock ...\n     * const proportionVolatility = closingPrice.proportionRange(5);\n     * </pre>\n     */\n    proportionRange (period: number, whichIndex?: WhichIndex): ISeries<IndexT, number>;\n\n    /**\n     * Compute the range of values in each period in proportion to the latest value.\n     * The range for each period is the absolute difference between largest (max) and smallest (min) values in that period.\n     * Proportions are expressed as 0-1 values.\n     * \n     * @param period - Period for computing the range.\n     * @param whichIndex Sets which side of the window the index comes from: start or end. Can be \"start\" or \"end\", defaults to \"end\".\n     * \n     * @returns Returns a new series where each value indicates the proportion change from the previous number value in the original series.\n     * \n     * @returns Returns a new series where each value indicates the proportionate range of values for each period in the original series.\n     * \n     * @example\n     * <pre>\n     * \n     * const closingPrice = ... series of closing prices for a particular stock ...\n     * const percentVolatility = closingPrice.percentRange(5);\n     * </pre>\n     */\n    percentRange (period: number, whichIndex?: WhichIndex): ISeries<IndexT, number>;\n\n    /**\n     * Compute the amount of change between pairs or sets of values in the series.\n     * \n     * @param period Optional period for computing the change - defaults to 2.\n     * @param whichIndex Sets which side of the window the index comes from: start or end. Can be \"start\" or \"end\", defaults to \"end\".\n     * \n     * @returns Returns a new series where each value indicates the amount of change from the previous number value in the original series.  \n     * \n     * @example\n     * <pre>\n     * \n     * const saleFigures = ... running series of daily sales figures ...\n     * const amountChanged = salesFigures.amountChanged(); // Amount that sales has changed, day to day.\n     * </pre>\n     * @example\n     * <pre>\n     * \n     * const saleFigures = ... running series of daily sales figures ...\n     * const amountChanged = salesFigures.amountChanged(7); // Amount that sales has changed, week to week.\n     * </pre>\n     */\n    amountChange (period?: number, whichIndex?: WhichIndex): ISeries<IndexT, number>;\n\n    /**\n     * Compute the proportion change between pairs or sets of values in the series.\n     * Proportions are expressed as 0-1 values.\n     * \n     * @param period Optional period for computing the proportion - defaults to 2.\n     * @param whichIndex Sets which side of the window the index comes from: start or end. Can be \"start\" or \"end\", defaults to \"end\".\n     * \n     * @returns Returns a new series where each value indicates the proportion change from the previous number value in the original series.\n     * \n     * @example\n     * <pre>\n     * \n     * const saleFigures = ... running series of daily sales figures ...\n     * const proportionChanged = salesFigures.amountChanged(); // Proportion that sales has changed, day to day.\n     * </pre>\n     * @example\n     * <pre>\n     * \n     * const saleFigures = ... running series of daily sales figures ...\n     * const proportionChanged = salesFigures.amountChanged(7); // Proportion that sales has changed, week to week.\n     * </pre>\n     */\n    proportionChange (period?: number, whichIndex?: WhichIndex): ISeries<IndexT, number>;\n\n    /**\n     * Compute the percentage change between pairs or sets of values in the series.\n     * Percentages are expressed as 0-100 values.\n     * \n     * @param period Optional period for computing the percentage - defaults to 2.\n     * @param whichIndex Sets which side of the window the index comes from: start or end. Can be \"start\" or \"end\", defaults to \"end\".\n     * \n     * @returns Returns a new series where each value indicates the percent change from the previous number value in the original series.\n     * \n     * @example\n     * <pre>\n     * \n     * const saleFigures = ... running series of daily sales figures ...\n     * const percentChanged = salesFigures.amountChanged(); // Percent that sales has changed, day to day.\n     * </pre>\n     * @example\n     * <pre>\n     * \n     * const saleFigures = ... running series of daily sales figures ...\n     * const percentChanged = salesFigures.amountChanged(7); // Percent that sales has changed, week to week.\n     * </pre>\n     */\n    percentChange (period?: number, whichIndex?: WhichIndex): ISeries<IndexT, number>;\n\n    /**\n     * For each period, compute the proportion of values that are less than the last value in the period.\n     * Proportions are expressed as 0-1 values.\n     * \n     * @param period Optional period for computing the proportion rank - defaults to 2.\n     * \n     * @returns Returns a new series where each value indicates the proportion rank value for that period.\n     * \n     * @example\n     * <pre>\n     * \n     * const proportionRank = series.proportionRank();\n     * </pre>\n     * @example\n     * <pre>\n     * \n     * const proportionRank = series.proportionRank(100);\n     * </pre>\n     */\n    proportionRank (period?: number): ISeries<IndexT, number>;\n\n    /**\n     * For each period, compute the percent of values that are less than the last value in the period.\n     * Percent are expressed as 0-100 values.\n     * \n     * @param period Optional period for computing the percent rank - defaults to 2.\n     * \n     * @returns Returns a new series where each value indicates the percent rank value for that period.\n     * \n     * @example\n     * <pre>\n     * \n     * const percentRank = series.percentRank();\n     * </pre>\n     * @example\n     * <pre>\n     * \n     * const percentRank = series.percentRank(100);\n     * </pre>\n     */\n    percentRank (period?: number): ISeries<IndexT, number>;\n\n    /**\n     * Generates a cumulative sum across a series.\n     * \n     * @returns Returns a new series that is the cumulative sum of values across the input series.\n     */\n    cumsum (): ISeries<IndexT, number>;\n    \n    /**\n     * Skip a number of values in the series.\n     *\n     * @param numValues Number of values to skip.\n     * \n     * @return Returns a new series with the specified number of values skipped.\n     * \n     * @example\n     * <pre>\n     * \n     * const seriesWithRowsSkipped = series.skip(10); // Skip 10 rows in the original series.\n     * </pre>\n     */\n    skip (numValues: number): ISeries<IndexT, ValueT>;\n\n    /**\n     * Skips values in the series while a condition evaluates to true or truthy.\n     *\n     * @param predicate Returns true/truthy to continue to skip values in the original series.\n     * \n     * @return Returns a new series with all initial sequential values removed while the predicate returned true/truthy.\n     * \n     * @example\n     * <pre>\n     * \n     * const seriesWithRowsSkipped = series.skipWhile(salesFigure => salesFigure > 100); // Skip initial sales figure that are less than 100.\n     * </pre>\n     */\n    skipWhile (predicate: PredicateFn<ValueT>): ISeries<IndexT, ValueT>;\n\n    /**\n     * Skips values in the series untils a condition evaluates to true or truthy.\n     *\n     * @param predicate Return true/truthy to stop skipping values in the original series.\n     * \n     * @return Returns a new series with all initial sequential values removed until the predicate returned true/truthy.\n     * \n     * @example\n     * <pre>\n     * \n     * const seriesWithRowsSkipped = series.skipUntil(salesFigure => salesFigure > 100); // Skip initial sales figures unitl we see one greater than 100.\n     * </pre>\n     */\n    skipUntil (predicate: PredicateFn<ValueT>): ISeries<IndexT, ValueT>;\n    \n    /**\n     * Take a number of  values from the series.\n     *\n     * @param numValues Number of values to take.\n     * \n     * @return Returns a new series with only the specified number of values taken from the original series.\n     * \n     * @example\n     * <pre>\n     * \n     * const seriesWithRowsTaken = series.take(15); // Take only the first 15 values from the original series.\n     * </pre>\n     */\n    take (numRows: number): ISeries<IndexT, ValueT>;\n    \n    /**\n     * Takes values from the series while a condition evaluates to true or truthy.\n     *\n     * @param predicate Returns true/truthy to continue to take values from the original series.\n     * \n     * @return Returns a new series with only the initial sequential values that were taken while the predicate returned true/truthy.\n     * \n     * @example\n     * <pre>\n     * \n     * const seriesWithRowsTaken = series.takeWhile(salesFigure => salesFigure > 100); // Take only initial sales figures that are greater than 100.\n     * </pre>\n     */\n    takeWhile (predicate: PredicateFn<ValueT>): ISeries<IndexT, ValueT>;\n\n    /**\n     * Takes values from the series until a condition evaluates to true or truthy.\n     *\n     * @param predicate Return true/truthy to stop taking values in the original series.\n     * \n     * @return Returns a new series with only the initial sequential values taken until the predicate returned true/truthy.\n     * \n     * @example\n     * <pre>\n     * \n     * const seriesWithRowsTaken = series.takeUntil(salesFigure => salesFigure > 100); // Take all initial sales figures until we see one that is greater than 100.\n     * </pre>\n     */\n    takeUntil (predicate: PredicateFn<ValueT>): ISeries<IndexT, ValueT>;\n    \n    /**\n     * Count the number of values in the seriese\n     *\n     * @return Returns the count of all values.\n     * \n     * @example\n     * <pre>\n     * \n     * const numValues = series.count();\n     * </pre>\n     */\n    count (): number;\n    \n    /**\n     * Get the first value of the series.\n     *\n     * @return Returns the first value of the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const firstValue = series.first();\n     * </pre>\n     */\n    first (): ValueT;\n\n    /**\n     * Get the last value of the series.\n     *\n     * @return Returns the last value of the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const lastValue = series.last();\n     * </pre>\n     */\n    last (): ValueT;\n\n    /**\n     * Get the value, if there is one, with the specified index.\n     *\n     * @param index Index to for which to retreive the value.\n     *\n     * @return Returns the value from the specified index in the series or undefined if there is no such index in the present in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const value = series.at(5); // Get the value at index 5 (with a default 0-based index).\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const date = ... some date ...\n     * // Retreive the value with specified date from a time-series (assuming date indexed has been applied).\n     * const value = series.at(date); \n     * </pre>\n     */\n    at (index: IndexT): ValueT | undefined;\n\n    /** \n     * Get X value from the start of the series.\n     * Pass in a negative value to get all values at the head except for X values at the tail.\n     *\n     * @param numValues Number of values to take.\n     * \n     * @return Returns a new series that has only the specified number of values taken from the start of the original series.\n     * \n     * @examples\n     * <pre>\n     * \n     * const sample = series.head(10); // Take a sample of 10 values from the start of the series.\n     * </pre>\n     */\n    head (numValues: number): ISeries<IndexT, ValueT>;\n\n    /** \n     * Get X values from the end of the series.\n     * Pass in a negative value to get all values at the tail except X values at the head.\n     *\n     * @param numValues Number of values to take.\n     * \n     * @return Returns a new series that has only the specified number of values taken from the end of the original series.  \n     * \n     * @examples\n     * <pre>\n     * \n     * const sample = series.tail(12); // Take a sample of 12 values from the end of the series.\n     * </pre>\n     */\n    tail (numValues: number): ISeries<IndexT, ValueT>;\n\n    /**\n     * Filter the series using user-defined predicate function.\n     * \n     * `where` is an alias for {@link Series.filter}.\n     *\n     * This is the same concept as the JavaScript function `Array.filter` but filters a data series rather than an array.\n     * \n     * @param predicate Predicate function to filter values from the series. Returns true/truthy to keep elements, or false/falsy to omit elements.\n     * \n     * @return Returns a new series containing only the values from the original series that matched the predicate. \n     * \n     * @example\n     * <pre>\n     * \n     * // Filter so we only have sales figures greater than 100.\n     * const filtered = series.where(salesFigure => salesFigure > 100); \n     * console.log(filtered.toArray());\n     * </pre>\n     */\n    where (predicate: PredicateFn<ValueT>): ISeries<IndexT, ValueT>;\n\n    /**\n     * Filter the series through a user-defined predicate function.\n     * \n     * This is the same concept as the JavaScript function `Array.filter` but filters a data series rather than an array.\n     *\n     * @param predicate Predicate function to filter values from the series. Returns true/truthy to keep elements, or false/falsy to omit elements.\n     * \n     * @return Returns a new series containing only the values from the original series that matched the predicate. \n     * \n     * @example\n     * <pre>\n     * \n     * // Filter so we only have sales figures greater than 100.\n     * const filtered = series.filter(salesFigure => salesFigure > 100); \n     * console.log(filtered.toArray());\n     * </pre>\n     */\n    filter (predicate: PredicateFn<ValueT>): ISeries<IndexT, ValueT>;\n\n    /**\n     * Invoke a callback function for each value in the series.\n     *\n     * @param callback The calback function to invoke for each value.\n     * \n     * @return Returns the original series with no modifications.\n     * \n     * @example\n     * <pre>\n     * \n     * series.forEach(value => {\n     *      // ... do something with the value ...\n     * });\n     * </pre>\n     */\n    forEach (callback: CallbackFn<ValueT>): ISeries<IndexT, ValueT>;\n\n    /**\n     * Evaluates a predicate function for every value in the series to determine \n     * if some condition is true/truthy for **all** values in the series.\n     * \n     * @param predicate Predicate function that receives each value. It should returns true/truthy for a match, otherwise false/falsy.\n     *\n     * @return Returns true if the predicate has returned true or truthy for every value in the series, otherwise returns false. Returns false for an empty series.\n     * \n     * @example\n     * <pre>\n     * \n     * const result = series.all(salesFigure => salesFigure > 100); // Returns true if all sales figures are greater than 100.\n     * </pre>\n     */\n    all (predicate: PredicateFn<ValueT>): boolean;\n    \n    /**\n     * Evaluates a predicate function for every value in the series to determine \n     * if some condition is true/truthy for **any** of values in the series.\n     * \n     * If no predicate is specified then it simply checks if the series contains more than zero values.\n     *\n     * @param predicate Optional predicate function that receives each value. It should return true/truthy for a match, otherwise false/falsy.\n     *\n     * @return Returns true if the predicate has returned truthy for any value in the series, otherwise returns false. \n     * If no predicate is passed it returns true if the series contains any values at all.\n     * Returns false for an empty series.\n     * \n     * @example\n     * <pre>\n     * \n     * const result = series.any(salesFigure => salesFigure > 100); // Do we have any sales figures greater than 100?\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const result = series.any(); // Do we have any sales figures at all?\n     * </pre>\n     */\n    any (predicate?: PredicateFn<ValueT>): boolean;\n\n    /**\n     * Evaluates a predicate function for every value in the series to determine \n     * if some condition is true/truthy for **none** of values in the series.\n     * \n     * If no predicate is specified then it simply checks if the series contains zero values.\n     *\n     * @param predicate Optional predicate function that receives each value. It should return true/truthy for a match, otherwise false/falsy.\n     *\n     * @return Returns true if the predicate has returned truthy for zero values in the series, otherwise returns false. Returns false for an empty series.\n     * \n     * @example\n     * <pre>\n     * \n     * const result = series.none(salesFigure => salesFigure > 100); // Do we have zero sales figures greater than 100?\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const result = series.none(); // Do we have zero sales figures?\n     * </pre>\n     */\n    none (predicate?: PredicateFn<ValueT>): boolean;\n\n    /**\n     * Gets a new series containing all values starting at or after the specified index value.\n     * \n     * @param indexValue The index value at which to start the new series.\n     * \n     * @return Returns a new series containing all values starting at or after the specified index value. \n     * \n     * @example\n     * <pre>\n     * \n     * const series = new Series({ \n     *      index: [0, 1, 2, 3], // This is the default index.\n     *      values: [10, 20, 30, 40],\n     * });\n     * \n     * const lastHalf = series.startAt(2);\n     * expect(lastHalf.toArray()).to.eql([30, 40]);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const timeSeries = ... a series indexed by date/time ...\n     * \n     * // Get all values starting at (or after) a particular date.\n     * const result = timeSeries.startAt(new Date(2016, 5, 4)); \n     * </pre>\n     */\n    startAt (indexValue: IndexT): ISeries<IndexT, ValueT>;\n\n    /**\n     * Gets a new series containing all values up until and including the specified index value (inclusive).\n     * \n     * @param indexValue The index value at which to end the new series.\n     * \n     * @return Returns a new series containing all values up until and including the specified index value.\n     * \n     * @example\n     * <pre>\n     * \n     * const series = new Series({ \n     *      index: [0, 1, 2, 3], // This is the default index.\n     *      values: [10, 20, 30, 40],\n     * });\n     * \n     * const firstHalf = series.endAt(1);\n     * expect(firstHalf.toArray()).to.eql([10, 20]);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const timeSeries = ... a series indexed by date/time ...\n     * \n     * // Get all values ending at a particular date.\n     * const result = timeSeries.endAt(new Date(2016, 5, 4)); \n     * </pre>\n     */\n    endAt (indexValue: IndexT): ISeries<IndexT, ValueT>;\n\n    /**\n     * Gets a new series containing all values up to the specified index value (exclusive).\n     * \n     * @param indexValue The index value at which to end the new series.\n     * \n     * @return Returns a new series containing all values up to (but not including) the specified index value. \n     * \n     * @example\n     * <pre>\n     * \n     * const series = new Series({ \n     *      index: [0, 1, 2, 3], // This is the default index.\n     *      values: [10, 20, 30, 40],\n     * });\n     * \n     * const firstHalf = series.before(2);\n     * expect(firstHalf.toArray()).to.eql([10, 20]);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const timeSeries = ... a series indexed by date/time ...\n     * \n     * // Get all values before the specified date.\n     * const result = timeSeries.before(new Date(2016, 5, 4)); \n     * </pre>\n     */\n    before (indexValue: IndexT): ISeries<IndexT, ValueT>;\n\n    /**\n     * Gets a new series containing all values after the specified index value (exclusive).\n     * \n     * @param indexValue The index value after which to start the new series.\n     * \n     * @return Returns a new series containing all values after the specified index value.\n     * \n     * @example\n     * <pre>\n     * \n     * const series = new Series({ \n     *      index: [0, 1, 2, 3], // This is the default index.\n     *      values: [10, 20, 30, 40],\n     * });\n     * \n     * const lastHalf = df.before(1);\n     * expect(lastHalf.toArray()).to.eql([30, 40]);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const timeSerie = ... a series indexed by date/time ...\n     * \n     * // Get all values after the specified date.\n     * const result = timeSeries.after(new Date(2016, 5, 4)); \n     * </pre>\n     */    \n    after (indexValue: IndexT): ISeries<IndexT, ValueT>;\n\n    /**\n     * Gets a new series containing all values between the specified index values (inclusive).\n     * \n     * @param startIndexValue The index at which to start the new series.\n     * @param endIndexValue The index at which to end the new series.\n     * \n     * @return Returns a new series containing all values between the specified index values (inclusive).\n     * \n     * @example\n     * <pre>\n     * \n     * const series = new Series({ \n     *      index: [0, 1, 2, 3, 4, 6], // This is the default index.\n     *      values: [10, 20, 30, 40, 50, 60],\n     * });\n     * \n     * const middleSection = series.between(1, 4);\n     * expect(middleSection.toArray()).to.eql([20, 30, 40, 50]);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const timeSeries = ... a series indexed by date/time ...\n     * \n     * // Get all values between the start and end dates (inclusive).\n     * const result = timeSeries.after(new Date(2016, 5, 4), new Date(2016, 5, 22)); \n     * </pre>\n     */\n    between (startIndexValue: IndexT, endIndexValue: IndexT): ISeries<IndexT, ValueT>;\n\n    /** \n     * Format the series for display as a string.\n     * This forces lazy evaluation to complete.\n     * \n     * @return Generates and returns a string representation of the series.\n     * \n     * @example\n     * <pre>\n     * \n     * console.log(series.toString());\n     * </pre>\n     */\n    toString (): string;\n\n    /**\n     * Parse a series with string values and convert it to a series with int values.\n     *\n     * @return Returns a new series with values parsed from strings to ints.\n     * \n     * @example\n     * <pre>\n     * \n     * const parsed = series.parseInts();\n     * </pre>\n     */\n    parseInts (): ISeries<IndexT, number>;\n\n    /**\n     * Parse a series with string values and convert it to a series with float values.\n     *\n     * @return Returns a new series with values parsed from strings to floats.\n     * \n     * @example\n     * <pre>\n     * \n     * const parsed = series.parseFloats();\n     * </pre>\n     */\n    parseFloats (): ISeries<IndexT, number>;\n\n    /**\n     * Parse a series with string values and convert it to a series with date values.\n     *\n     * @param formatString Optional formatting string for dates.\n     * \n     * Moment is used for date parsing.\n     * https://momentjs.com\n     * \n     * @return Returns a new series with values parsed from strings to dates.\n     * \n     * @example\n     * <pre>\n     * \n     * const parsed = series.parseDates();\n     * </pre>\n     */\n    parseDates (formatString?: string): ISeries<IndexT, Date>;\n\n    /**\n     * Convert a series of values of different types to a series containing string values.\n     *\n     * @param formatString Optional formatting string for dates.\n     * \n     * Numeral.js is used for number formatting.\n     * http://numeraljs.com/\n     * \n     * Moment is used for date formatting.\n     * https://momentjs.com/docs/#/parsing/string-format/\n     * \n     * @return Returns a new series values converted from values to strings.\n     * \n     * @example\n     * <pre>\n     * \n     * const result = series.toStrings(\"YYYY-MM-DD\");\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const result = series.toStrings(\"0.00\");\n     * </pre>\n     */\n    toStrings (formatString?: string): ISeries<IndexT, string>;\n\n    /**\n     * Forces lazy evaluation to complete and 'bakes' the series into memory.\n     * \n     * @return Returns a series that has been 'baked', all lazy evaluation has completed.\n     * \n     * @example\n     * <pre>\n     * \n     * const baked = series.bake();\n     * </pre>\n     */\n    bake (): ISeries<IndexT, ValueT>;\n\n    /** \n     * Converts (inflates) a series to a {@link DataFrame}.\n     *\n     * @param selector Optional user-defined selector function that transforms each value to produce the dataframe.\n     *\n     * @returns Returns a dataframe that was created from the original series.\n     * \n     * @example\n     * <pre>\n     * \n     * const dataframe = series.inflate(); // Inflate a series of objects to a dataframe.\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const dataframe = series.inflate(value => { AColumn:  value }); // Produces a dataframe with 1 column from a series of values.\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const dataframe = series.inflate(value => { AColumn:  value.NestedValue }); // Extract a nested value and produce a dataframe from it.\n     * </pre>\n     */\n    inflate<ToT = ValueT> (selector?: SelectorWithIndexFn<ValueT, ToT>): IDataFrame<IndexT, ToT>;\n\n    /**\n     * Sum the values in a series and returns the result.\n     * \n     * @returns Returns the sum of the number values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const totalSales = salesFigures.sum();\n     * </pre>\n     */\n    sum (): number;\n\n    /**\n     * Average the values in a series and returns the result.\n     * \n     * `average` is an alias of {@link Series.mean}.\n     * \n     * @returns Returns the average of the number values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const averageSales = salesFigures.average();\n     * </pre>\n     */\n    average (): number;\n\n    /**\n     * Computes and returns the mean value of a set of values.\n     * \n     * @returns Returns the mean of the number values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const averageSales = salesFigures.mean();\n     * </pre>\n     */\n    mean (): number;\n\n    /**\n     * Get the median value in the series. \n     * Note that this sorts the series, which can be expensive.\n     * \n     * @returns Returns the median of the values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const medianSales = salesFigures.median();\n     * </pre>\n     */\n    median (): number;\n    \n    /**\n     * Get the mode of the values in the series. \n     * The mode is the most frequent value in the series.\n     * Note that this reads the entire series into memory, which can be expensive.\n     * \n     * @returns Returns the mode of the values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const modeSales = salesFigures.mode();\n     * </pre>\n     */\n    mode (): any;\n\n    /**\n     * Get the variance of number values in the series. \n     * \n     * @returns Returns the variance of the values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const salesVariance = salesFigures.variance();\n     * </pre>\n     */\n    variance (): number;\n\n    /**\n     * Get the standard deviation of number values in the series. \n     * \n     * @returns Returns the standard deviation of the values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const salesStdDev = salesFigures.std();\n     * </pre>\n     */\n    std (): number;\n\n    /**\n     * Standardize a series of numbers by converting each \"standard deviations from the mean\".\n     * This converts the input series to Z scores using the population standard deviation.\n     * \n     * @returns A new series containing Z scores computed from the input series.\n     * \n     * @example\n     * <pre>\n     * \n     * const standardizedSeries = series.standardize();\n     * </pre>\n     */\n    standardize (): ISeries<IndexT, number>;\n\n    /**\n     * Get the (sample) variance of number values in the series. \n     * \n     * @returns Returns the (sample) variance of the values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const salesVariance = salesFigures.variance();\n     * </pre>\n     */\n    sampleVariance (): number;\n\n    /**\n     * Get the (sample) standard deviation of number values in the series. \n     * \n     * @returns Returns the (sample) standard deviation of the values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const salesStdDev = salesFigures.sampleStd();\n     * </pre>\n     */\n    sampleStd (): number;\n\n    /**\n     * Standardize a series of numbers by converting each \"standard deviations from the mean\".\n     * This converts the input series to Z scores using the sample standard deviation.\n     * \n     * @returns A new series containing Z scores computed from the input series.\n     * \n     * @example\n     * <pre>\n     * \n     * const standardizedSeries = series.sampleStandardize();\n     * </pre>\n     */\n    sampleStandardize (): ISeries<IndexT, number>;\n\n    /**\n     * Get the min value in the series.\n     * \n     * @returns Returns the minimum of the number values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const minSales = salesFigures.min();\n     * </pre>\n     */\n    min (): number;\n\n    /**\n     * Get the max value in the series.\n     * \n     * @returns Returns the maximum of the number values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const maxSales = salesFigures.max();\n     * </pre>\n     */\n    max (): number;\n\n    /**\n     * Get the range of values in the series.\n     * \n     * @returns Returns the range of the number values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const range = salesFigures.range();\n     * </pre>\n     */\n    range (): number;\n\n    /**\n     * Invert the sign of every number value in the series.\n     * This assumes that the input series contains numbers.\n     * \n     * @returns Returns a new series with all number values inverted.\n     * \n     * @example\n     * <pre>\n     * \n     * const inverted = series.invert();\n     * </pre>\n     */\n    invert (): ISeries<IndexT, number>;\n\n    /**\n     * Counts the number of sequential values where the predicate evaluates to truthy.\n     * Outputs 0 for values when the predicate evaluates to falsy.\n     * \n     * @param predicate User-defined function. Should evaluate to truthy to activate the counter or falsy to deactivate it.\n     * \n     * @returns Returns a new series that counts up the number of sequential values where the predicate evaluates to truthy. 0 values appear when the prediate evaluates to falsy.\n     * \n     * @example\n     * <pre>\n     * \n     * const series = new Series([ 1, 10, 3, 15, 8, 5 ]);\n     * const counted = series.counter(value => value >= 3);\n     * console.log(counted.toString());\n     * </pre>\n     */\n    counter (predicate: PredicateFn<ValueT>): ISeries<IndexT, number>;\n\n    /** \n     * Gets a new series in reverse order.\n     * \n     * @return Returns a new series that is the reverse of the original.\n     * \n     * @example\n     * <pre>\n     * \n     * const reversed = series.reverse();\n     * </pre>\n     */\n    reverse (): ISeries<IndexT, ValueT>;\n\n    /**\n     * Returns only the set of values in the series that are distinct.\n     * Provide a user-defined t (tor to specify criteria for determining the distinctness.\n     * This can be used to remove duplicate values from the series.\n     *\n     * @param selector Optional user-defined selector function that specifies the criteria used to make comparisons for duplicate values.\n     * \n     * @return Returns a series containing only unique values in the series. \n     * \n     * @example\n     * <pre>\n     * \n     * const uniqueValues = series.distinct(); // Get only non-duplicated value in the series.\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const bucketedValues = series.distinct(value => Math.floor(value / 10)); // Lump values into buckets of 10.\n     * </pre>\n     */\n    distinct<ToT> (selector?: SelectorFn<ValueT, ToT>): ISeries<IndexT, ValueT>;\n\n    /**\n     * Collects values in the series into a new series of groups according to a user-defined selector function.\n     *\n     * @param selector User-defined selector function that specifies the criteriay to group by.\n     *\n     * @return Returns a new series of groups. Each group is a series with values that have been grouped by the 'selector' function.\n     * \n     * @example\n     * <pre>\n     * \n     * const sales = ... product sales ...\n     * const salesByProduct = sales.groupBy(sale => sale.ProductId);\n     * for (const productSalesGroup of salesByProduct) {\n     *      // ... do something with each product group ...\n     *      const productId = productSalesGroup.first().ProductId;\n     *      const totalSalesForProduct = productSalesGroup.deflate(sale => sale.Amount).sum();\n     *      console.log(totalSalesForProduct);\n     * }\n     * </pre>\n     */\n    groupBy<GroupT> (selector: SelectorFn<ValueT, GroupT>): ISeries<number, ISeries<IndexT, ValueT>>;\n\n    /**\n     * Collects values in the series into a new series of groups based on if the values are the same or according to a user-defined selector function.\n     *\n     * @param selector Optional selector that specifies the criteria for grouping.\n     *\n     * @return Returns a new series of groups. Each group is a series with values that are the same or have been grouped by the 'selector' function.\n     * \n     * @example\n     * <pre>\n     * \n     * // Some ultra simple stock trading strategy backtesting...\n     * const dailyStockPrice = ... daily stock price for a company ...\n     * const priceGroups  = dailyStockPrice.groupBy(day => day.close > day.movingAverage);\n     * for (const priceGroup of priceGroups) {\n     *      // ... do something with each stock price group ...\n     * \n     *      const firstDay = priceGroup.first();\n     *      if (firstDay.close > movingAverage) {\n     *          // This group of days has the stock price above its moving average.\n     *          // ... maybe enter a long trade here ...\n     *      }\n     *      else {\n     *          // This group of days has the stock price below its moving average.\n     *          // ... maybe enter a short trade here ...\n     *      }\n     * }\n     * </pre>\n     */    \n    groupSequentialBy<GroupT> (selector?: SelectorFn<ValueT, GroupT>): ISeries<number, ISeries<IndexT, ValueT>>;\n    \n    /**\n     * Concatenate multiple other series onto this series.\n     * \n     * @param series Multiple arguments. Each can be either a series or an array of series.\n     * \n     * @return Returns a single series concatenated from multiple input series. \n     * \n     * @example\n     * <pre>\n     * \n     * const concatenated = a.concat(b);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const concatenated = a.concat(b, c);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const concatenated = a.concat([b, c]);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const concatenated = a.concat(b, [c, d]);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const otherSeries = [... array of series...];\n     * const concatenated = a.concat(otherSeries);\n     * </pre>\n     */    \n    concat (...series: (ISeries<IndexT, ValueT>[]|ISeries<IndexT, ValueT>)[]): ISeries<IndexT, ValueT>;\n\n    /**\n    * Zip together multiple series to create a new series.\n    * Preserves the index of the first series.\n    * \n    * @param s2, s3, s4, s4 Multiple series to zip.\n    * @param zipper User-defined zipper function that merges rows. It produces values for the new series based-on values from the input series.\n    * \n    * @return Returns a single series merged from multiple input series. \n    * \n    * @example\n    * <pre>\n    * \n    * const a = new Series([1, 2, 3]);\n    * const b = new Series([10, 20, 30]);\n    * const zipped = a.zip(b (valueA, valueB) => valueA + valueB);\n    * </pre>\n    */    \n   zip<Index2T, Value2T, ResultT>  (s2: ISeries<Index2T, Value2T>, zipper: Zip2Fn<ValueT, Value2T, ResultT> ): ISeries<IndexT, ResultT>;\n   zip<Index2T, Value2T, Index3T, Value3T, ResultT>  (s2: ISeries<Index2T, Value2T>, s3: ISeries<Index3T, Value3T>, zipper: Zip3Fn<ValueT, Value2T, Value3T, ResultT> ): ISeries<IndexT, ResultT>;\n   zip<Index2T, Value2T, Index3T, Value3T, Index4T, Value4T, ResultT>  (s2: ISeries<Index2T, Value2T>, s3: ISeries<Index3T, Value3T>, s4: ISeries<Index4T, Value4T>, zipper: Zip3Fn<ValueT, Value2T, Value3T, ResultT> ): ISeries<IndexT, ResultT>;\n   zip<ResultT>  (...args: any[]): ISeries<IndexT, ResultT>;\n   \n    /**\n     * Sorts the series in ascending order by a value defined by the user-defined selector function. \n     * \n     * @param selector User-defined selector function that selects the value to sort by.\n     * \n     * @return Returns a new series that has been ordered accorrding to the value chosen by the selector function. \n     * \n     * @example\n     * <pre>\n     * \n     * const orderedSeries = series.orderBy(value => value); \n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const orderedSeries = series.orderBy(value => value.NestedValue); \n     * </pre>\n     */\n    orderBy<SortT> (selector: SelectorWithIndexFn<ValueT, SortT>): IOrderedSeries<IndexT, ValueT, SortT>;\n\n    /**\n     * Sorts the series in descending order by a value defined by the user-defined selector function. \n     * \n     * @param selector User-defined selector function that selects the value to sort by.\n     * \n     * @return Returns a new series that has been ordered accorrding to the value chosen by the selector function. \n     * \n     * @example\n     * <pre>\n     * \n     * const orderedSeries = series.orderByDescending(value => value); \n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const orderedSeries = series.orderByDescending(value => value.NestedValue); \n     * </pre>\n     */\n    orderByDescending<SortT> (selector: SelectorWithIndexFn<ValueT, SortT>): IOrderedSeries<IndexT, ValueT, SortT>;\n\n    /**\n     * Creates a new series by merging two input dataframes.\n     * The resulting series contains the union of value from the two input series.\n     * These are the unique combination of values in both series.\n     * This is basically a concatenation and then elimination of duplicates.\n     *\n     * @param other The other series to merge.\n     * @param selector Optional user-defined selector function that selects the value to compare to determine distinctness.\n     * \n     * @return Returns the union of the two series.\n     * \n     * @example\n     * <pre>\n     *\n     * const seriesA = ...\n     * const seriesB = ...\n     * const merged = seriesA.union(seriesB);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     *\n     * // Merge two sets of customer records that may contain the same\n     * // customer record in each set. This is basically a concatenation\n     * // of the series and then an elimination of any duplicate records\n     * // that result.\n     * const customerRecordsA = ...\n     * const customerRecordsB = ...\n     * const mergedCustomerRecords = customerRecordsA.union(\n     *      customerRecordsB, \n     *      customerRecord => customerRecord.CustomerId\n     * );\n     * </pre>\n     * \n     * \n     * @example\n     * <pre>\n     *\n     * // Note that you can achieve the exact same result as the previous\n     * // example by doing a {@link Series.concat) and {@link Series.distinct}\n     * // of the input series and then an elimination of any duplicate records\n     * // that result.\n     * const customerRecordsA = ...\n     * const customerRecordsB = ...\n     * const mergedCustomerRecords = customerRecordsA\n     *      .concat(customerRecordsB)\n     *      .distinct(customerRecord => customerRecord.CustomerId);\n     * </pre>\n     * \n     */\n    union<KeyT = ValueT> (\n        other: ISeries<IndexT, ValueT>, \n        selector?: SelectorFn<ValueT, KeyT>): \n            ISeries<IndexT, ValueT>;\n\n    /**\n     * Creates a new series by merging two input series.\n     * The resulting series contains the intersection of values from the two input series.\n     * These are only the values that appear in both series.\n     *\n     * @param inner The inner series to merge (the series you call the function on is the 'outer' series).\n     * @param outerSelector Optional user-defined selector function that selects the key from the outer series that is used to match the two series.\n     * @param innerSelector Optional user-defined selector function that selects the key from the inner series that is used to match the two series.\n     * \n     * @return Returns a new series that contains the intersection of values from the two input series.\n     * \n     * @example\n     * <pre>\n     * \n     * const seriesA = ...\n     * const seriesB = ...\n     * const mergedDf = seriesA.intersection(seriesB);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     *\n     * // Merge two sets of customer records to find only the\n     * // customers that appears in both.\n     * const customerRecordsA = ...\n     * const customerRecordsB = ...\n     * const intersectionOfCustomerRecords = customerRecordsA.intersection(\n     *      customerRecordsB, \n     *      customerRecord => customerRecord.CustomerId\n     * );\n     * </pre>     \n     */    \n    intersection<InnerIndexT = IndexT, InnerValueT = ValueT, KeyT = ValueT> (\n        inner: ISeries<InnerIndexT, InnerValueT>, \n        outerSelector?: SelectorFn<ValueT, KeyT>,\n        innerSelector?: SelectorFn<InnerValueT, KeyT>): \n            ISeries<IndexT, ValueT>;\n\n    /**\n     * Creates a new series by merging two input series.\n     * The resulting series contains only the values from the 1st series that don't appear in the 2nd series.\n     * This is essentially subtracting the values from the 2nd series from the 1st and creating a new series with the remaining values.\n     *\n     * @param inner The inner series to merge (the series you call the function on is the 'outer' series).\n     * @param outerSelector Optional user-defined selector function that selects the key from the outer series that is used to match the two series.\n     * @param innerSelector Optional user-defined selector function that selects the key from the inner series that is used to match the two series.\n     * \n     * @return Returns a new series that contains only the values from the 1st series that don't appear in the 2nd series.\n     * \n     * @example\n     * <pre>\n     * \n     * const seriesA = ...\n     * const seriesB = ...\n     * const remainingDf = seriesA.except(seriesB);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     *\n     * // Find the list of customers haven't bought anything recently.\n     * const allCustomers = ... list of all customers ...\n     * const recentCustomers = ... list of customers who have purchased recently ...\n     * const remainingCustomers = allCustomers.except(\n     *      recentCustomers, \n     *      customerRecord => customerRecord.CustomerId\n     * );\n     * </pre>\n     */    \n    except<InnerIndexT = IndexT, InnerValueT = ValueT, KeyT = ValueT> (\n        inner: ISeries<InnerIndexT, InnerValueT>, \n        outerSelector?: SelectorFn<ValueT, KeyT>,\n        innerSelector?: SelectorFn<InnerValueT, KeyT>): \n            ISeries<IndexT, ValueT>;\n\n   /**\n     * Creates a new series by merging two input series.\n     * The resulting dataframe contains only those value that have matching keys in both input series.\n     *\n     * @param inner The 'inner' series to join (the series you are callling the function on is the 'outer' series).\n     * @param outerKeySelector User-defined selector function that chooses the join key from the outer series.\n     * @param innerKeySelector User-defined selector function that chooses the join key from the inner series.\n     * @param resultSelector User-defined function that merges outer and inner values.\n     * \n     * @return Returns the new merged series.\n     * \n     * @example\n     * <pre>\n     * \n     * // Join together two sets of customers to find those\n     * // that have bought both product A and product B.\n     * const customerWhoBoughtProductA = ...\n     * const customerWhoBoughtProductB = ...\n     * const customersWhoBoughtBothProductsDf = customerWhoBoughtProductA.join(\n     *          customerWhoBoughtProductB,\n     *          customerA => customerA.CustomerId, // Join key.\n     *          customerB => customerB.CustomerId, // Join key.\n     *          (customerA, customerB) => {\n     *              return {\n     *                  // ... merge the results ...\n     *              };\n     *          }\n     *      );\n     * </pre>\n     */\n    join<KeyT, InnerIndexT, InnerValueT, ResultValueT> (\n        inner: ISeries<InnerIndexT, InnerValueT>, \n        outerKeySelector: SelectorFn<ValueT, KeyT>, \n        innerKeySelector: SelectorFn<InnerValueT, KeyT>, \n        resultSelector: JoinFn<ValueT, InnerValueT, ResultValueT>):\n            ISeries<number, ResultValueT>;\n\n    /**\n     * Creates a new series by merging two input series.\n     * The resulting series contains only those values that are only present in one or the other of the series, not both.\n     *\n     * @param inner The 'inner' series to join (the series you are callling the function on is the 'outer' series).\n     * @param outerKeySelector User-defined selector function that chooses the join key from the outer series.\n     * @param innerKeySelector User-defined selector function that chooses the join key from the inner series.\n     * @param resultSelector User-defined function that merges outer and inner values.\n     * \n     * Implementation from here:\n     * \n     * \thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n     * \n     * @return Returns the new merged series.\n     * \n     * @example\n     * <pre>\n     * \n     * // Join together two sets of customers to find those\n     * // that have bought either product A or product B, not not both.\n     * const customerWhoBoughtProductA = ...\n     * const customerWhoBoughtProductB = ...\n     * const customersWhoBoughtEitherProductButNotBothDf = customerWhoBoughtProductA.joinOuter(\n     *          customerWhoBoughtProductB,\n     *          customerA => customerA.CustomerId, // Join key.\n     *          customerB => customerB.CustomerId, // Join key.\n     *          (customerA, customerB) => {\n     *              return {\n     *                  // ... merge the results ...\n     *              };\n     *          }\n     *      );\n     * </pre>\n     */    \n    joinOuter<KeyT, InnerIndexT, InnerValueT, ResultValueT> (\n        inner: ISeries<InnerIndexT, InnerValueT>, \n        outerKeySelector: SelectorFn<ValueT, KeyT>, \n        innerKeySelector: SelectorFn<InnerValueT, KeyT>, \n        resultSelector: JoinFn<ValueT | null, InnerValueT | null, ResultValueT>):\n            ISeries<number, ResultValueT>;\n\n    /**\n     * Creates a new series by merging two input series.\n     * The resulting series contains only those values that are present either in both series or only in the outer (left) series.\n     * \n     * @param inner The 'inner' series to join (the series you are callling the function on is the 'outer' series).\n     * @param outerKeySelector User-defined selector function that chooses the join key from the outer series.\n     * @param innerKeySelector User-defined selector function that chooses the join key from the inner series.\n     * @param resultSelector User-defined function that merges outer and inner values.\n     * \n     * Implementation from here:\n     * \n     * \thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n     * \n     * @return Returns the new merged series.\n     * \n     * @example\n     * <pre>\n     * \n     * // Join together two sets of customers to find those\n     * // that have bought either just product A or both product A and product B.\n     * const customerWhoBoughtProductA = ...\n     * const customerWhoBoughtProductB = ...\n     * const boughtJustAorAandB = customerWhoBoughtProductA.joinOuterLeft(\n     *          customerWhoBoughtProductB,\n     *          customerA => customerA.CustomerId, // Join key.\n     *          customerB => customerB.CustomerId, // Join key.\n     *          (customerA, customerB) => {\n     *              return {\n     *                  // ... merge the results ...\n     *              };\n     *          }\n     *      );\n     * </pre>\n     */\n    joinOuterLeft<KeyT, InnerIndexT, InnerValueT, ResultValueT> (\n        inner: ISeries<InnerIndexT, InnerValueT>, \n        outerKeySelector: SelectorFn<ValueT, KeyT>, \n        innerKeySelector: SelectorFn<InnerValueT, KeyT>, \n        resultSelector: JoinFn<ValueT | null, InnerValueT | null, ResultValueT>):\n            ISeries<number, ResultValueT>;\n\n    /**\n     * Creates a new series by merging two input series.\n     * The resulting series contains only those values that are present either in both series or only in the inner (right) series.\n     *\n     * @param inner The 'inner' series to join (the series you are callling the function on is the 'outer' series).\n     * @param outerKeySelector User-defined selector function that chooses the join key from the outer series.\n     * @param innerKeySelector User-defined selector function that chooses the join key from the inner series.\n     * @param resultSelector User-defined function that merges outer and inner values.\n     * \n     * Implementation from here:\n     * \n     * \thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n     * \n     * @return Returns the new merged series.\n     * \n     * @example\n     * <pre>\n     * \n     * // Join together two sets of customers to find those\n     * // that have bought either just product B or both product A and product B.\n     * const customerWhoBoughtProductA = ...\n     * const customerWhoBoughtProductB = ...\n     * const boughtJustAorAandB = customerWhoBoughtProductA.joinOuterRight(\n     *          customerWhoBoughtProductB,\n     *          customerA => customerA.CustomerId, // Join key.\n     *          customerB => customerB.CustomerId, // Join key.\n     *          (customerA, customerB) => {\n     *              return {\n     *                  // ... merge the results ...\n     *              };\n     *          }\n     *      );\n     * </pre>\n     */\n    joinOuterRight<KeyT, InnerIndexT, InnerValueT, ResultValueT> (\n        inner: ISeries<InnerIndexT, InnerValueT>, \n        outerKeySelector: SelectorFn<ValueT, KeyT>, \n        innerKeySelector: SelectorFn<InnerValueT, KeyT>, \n        resultSelector: JoinFn<ValueT | null, InnerValueT | null, ResultValueT>):\n            ISeries<number, ResultValueT>;\n\n    /**\n     * Produces a new series with all string values truncated to the requested maximum length.\n     *\n     * @param maxLength - The maximum length of the string values after truncation.\n     * \n     * @returns Returns a new series with strings that are truncated to the specified maximum length. \n     * \n     * @example\n     * <pre>\n     * \n     * const truncated = series.truncateStrings(10); // Truncate all string values to max length of 10 characters.\n     * </pre>\n     */\n    truncateStrings (maxLength: number): ISeries<IndexT, ValueT>;\n\n    /**\n     * Produces a new series with all number values rounded to the specified number of places.\n     *\n     * @param numDecimalPlaces The number of decimal places, defaults to 2.\n     * \n     * @returns Returns a new series with all number values rounded to the specified number of places.\n     * \n     * @example\n     * <pre>\n     * \n     * const series = ... your data series ...\n     * const rounded = series.round(); // Round numbers to two decimal places.\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const series = ... your data series ...\n     * const rounded = series.round(3); // Round numbers to three decimal places.\n     * </pre>\n     */\n    round (numDecimalPlaces?: number): ISeries<IndexT, ValueT>;\n\n    /**\n     * Insert a pair at the start of the series.\n     * Doesn't modify the original series! The returned series is entirely new and contains values from the original series plus the inserted pair.\n     *\n     * @param pair The index/value pair to insert.\n     * \n     * @return Returns a new series with the specified pair inserted.\n     * \n     * @example\n     * <pre>\n     * \n     * const newIndex = ... index of the new row ...\n     * const newRow = ... the new data row to insert ...\n     * const insertedSeries = series.insertPair([newIndex, newRows]);\n     * </pre>\n     */\n    insertPair (pair: [IndexT, ValueT]): ISeries<IndexT, ValueT>;\n\n    /**\n     * Append a pair to the end of a series.\n     * Doesn't modify the original series! The returned series is entirely new and contains values from the original series plus the appended pair.\n     *\n     * @param pair The index/value pair to append.\n     *  \n     * @return Returns a new series with the specified pair appended.\n     * \n     * @example\n     * <pre>\n     * \n     * const newIndex = ... index of the new row ...\n     * const newRow = ... the new data row to append ...\n     * const appendedSeries = series.appendPair([newIndex, newRows]);\n     * </pre>\n     */\n    appendPair (pair: [IndexT, ValueT]): ISeries<IndexT, ValueT>;\n\n    /**\n     * Removes values from the series by index.\n     */\n    remove(index: IndexT): ISeries<IndexT, ValueT>;\n    \n    /**\n     * Fill gaps in a series.\n     *\n     * @param comparer User-defined comparer function that is passed pairA and pairB, two consecutive values, return truthy if there is a gap between the value, or falsey if there is no gap.\n     * @param generator User-defined generator function that is passed pairA and pairB, two consecutive values, returns an array of pairs that fills the gap between the values.\n     *\n     * @return Returns a new series with gaps filled in.\n     * \n     * @example\n     * <pre>\n     * \n     *   var sequenceWithGaps = ...\n     *\n     *  // Predicate that determines if there is a gap.\n     *  var gapExists = (pairA, pairB) => {\n     *      // Returns true if there is a gap.\n     *      return true;\n     *  };\n     *\n     *  // Generator function that produces new rows to fill the game.\n     *  var gapFiller = (pairA, pairB) => {\n     *      // Create an array of index, value pairs that fill the gaps between pairA and pairB.\n     *      return [\n     *          newPair1,\n     *          newPair2,\n     *          newPair3,\n     *      ];\n     *  };\n     *\n     *  var sequenceWithoutGaps = sequenceWithGaps.fillGaps(gapExists, gapFiller);\n     * </pre>\n     */\n    fillGaps (comparer: ComparerFn<[IndexT, ValueT], [IndexT, ValueT]>, generator: GapFillFn<[IndexT, ValueT], [IndexT, ValueT]>): ISeries<IndexT, ValueT>;\n\n    /**\n     * Returns the specified default series if the input series is empty. \n     *\n     * @param defaultSequence Default series to return if the input series is empty.\n     * \n     * @return Returns 'defaultSequence' if the input series is empty. \n     * \n     * @example\n     * <pre>\n     * \n     * const emptySeries = new Series();\n     * const defaultSeries = new Series([ 1, 2, 3 ]);\n     * expect(emptyDataFrame.defaultIfEmpty(defaultSeries)).to.eql(defaultSeries);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const nonEmptySeries = new Series([ 100 ]);\n     * const defaultSeries = new Series([ 1, 2, 3 ]);\n     * expect(nonEmptySeries.defaultIfEmpty(defaultSeries)).to.eql(nonEmptySeries);\n     * </pre>\n     */\n    defaultIfEmpty (defaultSequence: ValueT[] | ISeries<IndexT, ValueT>): ISeries<IndexT, ValueT>;\n\n    /**\n     * Detect the the frequency of the types of the values in the series.\n     * This is a good way to understand the shape of your data.\n     *\n     * @return Returns a {@link DataFrame} with rows that confirm to {@link ITypeFrequency} that describes the data types contained in the original series.\n     * \n     * @example\n     * <pre>\n     * \n     * const dataTypes = series.detectTypes();\n     * console.log(dataTypes.toString());\n     * </pre>\n     */\n    detectTypes (): IDataFrame<number, ITypeFrequency>;\n\n    /**\n     * Detect the frequency of the values in the series.\n     * This is a good way to understand the shape of your data.\n     *\n     * @return Returns a {@link DataFrame} with rows that conform to {@link IValueFrequency} that describes the values contained in the original series.\n     * \n     * @example\n     * <pre>\n     * \n     * const dataValues = series.detectValues();\n     * console.log(dataValues.toString());\n     * </pre>\n     */\n    detectValues (): IDataFrame<number, IValueFrequency>;\n\n    /**\n     * Organise all values in the series into the specified number of buckets.\n     * Assumes that the series is a series of numbers.\n     * \n     * WARNING: This function is deprecated and will be removed in the future.\n     * \n     * @param numBuckets - The number of buckets to create.\n     * \n     * @returns Returns a dataframe containing bucketed values. The input values are divided up into these buckets.\n     * \n     * @example\n     * <pre>\n     * \n     * const buckets = series.bucket(20); // Distribute values into 20 evenly spaced buckets.\n     * console.log(buckets.toString());\n     * </pre>\n     */\n    bucket (numBuckets: number): IDataFrame<IndexT, IBucket>;    \n\n    /**\n     * Counts frequencies in the series to produce a frequency table.\n     * \n     * @param options - Options for computing the frequency table (e.g. `numGroups` which defaults to 10).\n     * \n     * @returns Returns a dataframe for the frequency table showing the frequency for the band of values in each group.\n     * \n     * @example\n     * <pre>\n     * \n     * const series = new Series([ 1, 2, 3, 4 ]);\n     * // Or \n     * const series = dataFrame.getSeries(\"SomeColumn\");\n     *  \n     * const frequencyTable = series.frequency();\n     * console.log(frequencyTable.toArray());\n     * </pre>\n     * @example\n     * <pre>\n     * \n     * const series = new Series([ 37, 63, 56, 54, 39, 49, 55, 114, 59, 55 ]);\n     * const frequencyTable = series.frequency({ \n     *      lower: 40,\n     *      upper: 90,\n     *      interval: 10,\n     * })\n     * console.log(frequencyTable.toArray());\n     * </pre>\n     */\n    frequency (options?: IFrequencyTableOptions): IDataFrame<number, IFrequencyTableEntry>;\n}\n\n/**\n * Interface to a series that has been ordered.\n */\nexport interface IOrderedSeries<IndexT = number, ValueT = any, SortT = any> extends ISeries<IndexT, ValueT> {\n\n    /** \n     * Applys additional sorting (ascending) to an already sorted series.\n     * \n     * @param selector User-defined selector that selects the additional value to sort by.\n     * \n     * @return Returns a new series has been additionally sorted by the value chosen by the selector function. \n     * \n     * @example\n     * <pre>\n     * \n     * // Order sales by salesperson and then by amount (from least to most).\n     * const ordered = sales.orderBy(sale => sale.SalesPerson).thenBy(sale => sale.Amount);\n     * </pre>\n     */\n    thenBy<SortT> (selector: SelectorWithIndexFn<ValueT, SortT>): IOrderedSeries<IndexT, ValueT, SortT>;\n\n    /** \n     * Applys additional sorting (descending) to an already sorted series.\n     * \n     * @param selector User-defined selector that selects the additional value to sort by.\n     * \n     * @return Returns a new series has been additionally sorted by the value chosen by the selector function. \n     * \n     * @example\n     * <pre>\n     * \n     * // Order sales by salesperson and then by amount (from most to least).\n     * const ordered = sales.orderBy(sale => sale.SalesPerson).thenByDescending(sale => sale.Amount);\n     * </pre>\n     */\n    thenByDescending<SortT> (selector: SelectorWithIndexFn<ValueT, SortT>): IOrderedSeries<IndexT, ValueT, SortT>;\n}\n\n//\n// Represents the contents of a series.\n//\ninterface ISeriesContent<IndexT, ValueT> {\n\n    /***\n     * Iterates the index for the series.\n     */\n    index: Iterable<IndexT>;\n\n    /**\n     * Iterates values for each item in the series.\n     */\n    values: Iterable<ValueT>;\n\n    /**\n     * Iterates the index/value pairs in the series.\n     */\n    pairs: Iterable<[IndexT, ValueT]>;\n\n    /***\n      * Set to true when the dataframe has been baked into memory\n      * and does not need to be lazily evaluated.\n      */\n     isBaked: boolean;\n}\n\n/**\n * Class that represents a series containing a sequence of indexed values.\n */\nexport class Series<IndexT = number, ValueT = any> implements ISeries<IndexT, ValueT> {\n\n    //\n    // Function to lazy evaluate the configuration of the series.\n    //\n    private configFn: SeriesConfigFn<IndexT, ValueT> | null = null;\n\n    //\n    // The content of the series.\n    // When this is null it means the series is yet to be lazy initialised.\n    //\n    private content: ISeriesContent<IndexT, ValueT> | null = null;\n\n    // \n    // Indexed content of the dataframe.\n    // \n    private indexedContent: Map<any, ValueT> | null = null;\n\n    private static readonly defaultCountIterable = new CountIterable();\n    private static readonly defaultEmptyIterable = new EmptyIterable();\n\n    //\n    // Initialise a series from an iterator (or generator object).\n    //\n    private static initFromIterator<IndexT, ValueT>(iterator: Iterator<ValueT>): ISeriesContent<IndexT, ValueT> {\n        return Series.initFromIterable<IndexT, ValueT>(new CachedIteratorIterable(iterator));\n    }\n\n    //\n    // Initialise series content from an iterable of values.\n    //\n    private static initFromIterable<IndexT, ValueT>(arr: Iterable<ValueT>): ISeriesContent<IndexT, ValueT> {\n        return {\n            index: Series.defaultCountIterable,\n            values: arr,\n            pairs: new MultiIterable([Series.defaultCountIterable, arr]),\n            isBaked: true,\n        };\n    }\n\n    //\n    // Initialise an empty series.\n    //\n    private static initEmpty<IndexT, ValueT>(): ISeriesContent<IndexT, ValueT> {\n        return {\n            index: Series.defaultEmptyIterable,\n            values: Series.defaultEmptyIterable,\n            pairs: Series.defaultEmptyIterable,\n            isBaked: true,\n        };\n    }\n\n    //\n    // Returns true if the input is an iterator.\n    //\n    private static isIterator(input: any): boolean {\n        return isObject(input) && isFunction(input.next);\n    }\n\n    //\n    // Returns true if the input is an iterable.\n    //\n    private static isIterable(input: any): boolean {\n        return isArray(input) || \n               (isObject(input) && isFunction(input[Symbol.iterator]));\n    }\n\n    //\n    // Check that a value is an interable.\n    //\n    private static checkIterable<T>(input: any, fieldName: string): void {\n        if (Series.isIterable(input)) {\n            // Assume it's an iterable.\n            // Ok\n        }\n        else {\n            // Not ok\n            throw new Error(\"Expected '\" + fieldName + \"' field of Series config object to be an array of values or an iterable of values.\");\n        }\n    }\n\n    //\n    // Initialise series content from a config object.\n    //\n    private static initFromConfig<IndexT, ValueT>(config: ISeriesConfig<IndexT, ValueT>): ISeriesContent<IndexT, ValueT> {\n\n        let index: Iterable<IndexT>;\n        let values: Iterable<ValueT>;\n        let pairs: Iterable<[IndexT, ValueT]> | undefined;\n        let isBaked = false;\n\n        if (config.pairs) {\n            if (Series.isIterator(config.pairs)) {\n                pairs = new CachedIteratorIterable(config.pairs as Iterator<[IndexT, ValueT]>);\n            }\n            else {\n                Series.checkIterable<[IndexT, ValueT]>(config.pairs, \"pairs\");\n                pairs = config.pairs as Iterable<[IndexT, ValueT]>;\n            }\n        }\n\n        if (config.index) {\n            if (Series.isIterator(config.index)) {\n                index = new CachedIteratorIterable(config.index as Iterator<IndexT>);\n            }\n            else {\n                Series.checkIterable<IndexT>(config.index, \"index\")\n                index = config.index as Iterable<IndexT>;\n            }\n        }\n        else if (pairs) {\n            index = new ExtractElementIterable(pairs, 0);\n        }\n        else {\n            index = Series.defaultCountIterable;\n        }\n\n        if (config.values) {\n            if (Series.isIterator(config.values)) {\n                values = new CachedIteratorIterable(config.values as Iterator<ValueT>);\n            }\n            else {\n                Series.checkIterable<ValueT>(config.values, \"values\");\n                values = config.values as Iterable<ValueT>;\n            }\n        }\n        else if (pairs) {\n            values = new ExtractElementIterable(pairs, 1);\n        }\n        else {\n            values = Series.defaultEmptyIterable;\n        }\n\n        if (!pairs) {\n            pairs = new MultiIterable([index, values]);\n        }\n\n        if (config.baked !== undefined) {\n            isBaked = config.baked;\n        }\n\n        return {\n            index: index,\n            values: values,\n            pairs: pairs,\n            isBaked: isBaked,\n        };\n    }\n\n    /**\n     * Create a series.\n     * \n     * @param config This can be an array, a configuration object or a function that lazily produces a configuration object. \n     * \n     * It can be an array that specifies the values that the series contains.\n     * \n     * It can be a {@link ISeriesConfig} that defines the values and configuration of the series.\n     * \n     * Or it can be a function that lazily produces a {@link ISeriesConfig}.\n     * \n     * @example\n     * <pre>\n     * \n     * const series = new Series();\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const series = new Series([10, 20, 30, 40]);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const series = new Series({ index: [1, 2, 3, 4], values: [10, 20, 30, 40]});\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const lazyInit = () => ({ index: [1, 2, 3, 4], values: [10, 20, 30, 40] });\n     * const series = new Series(lazyInit);\n     * </pre>\n     */\n    constructor(config?: Iterator<ValueT> | Iterable<ValueT> | ISeriesConfig<IndexT, ValueT> | SeriesConfigFn<IndexT, ValueT>) {\n        if (config) {\n            const configAsAny = config as any;\n            if (configAsAny.getTypeCode !== undefined) {\n                const typeCode = configAsAny.getTypeCode();\n                if (typeCode === \"dataframe\" || typeCode === \"series\") {\n                    if (configAsAny.content !== undefined) {\n                        this.content = configAsAny.content;\n                    }\n                    else {\n                        this.configFn = configAsAny.configFn;\n                    }\n                    return;\n                }\n            }\n\n            if (isFunction(config)) {\n                this.configFn = config;\n            }\n            else if (Series.isIterator(config)) {\n                this.content = Series.initFromIterator(config as Iterator<ValueT>);\n            }\n            else if (Series.isIterable(config)) {\n                this.content = Series.initFromIterable(config as Iterable<ValueT>);\n            }\n            else {\n                this.content = Series.initFromConfig(config as ISeriesConfig<IndexT, ValueT>);\n            }\n        }\n        else {\n            this.content = Series.initEmpty();\n        }\n    }\n\n    //\n    // Ensure the series content has been initialised.\n    //\n    private lazyInit() {\n        if (this.content === null && this.configFn !== null) {\n            this.content = Series.initFromConfig(this.configFn());\n        }\n    }\n\n    //\n    // Ensure the series content is lazy initalised and return it.\n    //\n    private getContent(): ISeriesContent<IndexT, ValueT> { \n        this.lazyInit();\n        return this.content!;\n    }\n\n    // \n    // Lazy builds content index, does basic hash lookup.\n    //\n    private getRowByIndex(index: IndexT): ValueT | undefined {\n        if (!this.indexedContent) {\n            this.indexedContent = new Map<any, ValueT>();\n            for (const pair of this.getContent().pairs) {\n                this.indexedContent.set(pair[0], pair[1]);\n            }\n        }\n       \n        return this.indexedContent.get(index);\n    }\n\n    /**\n     * Get an iterator to enumerate the values of the series.\n     * Enumerating the iterator forces lazy evaluation to complete.\n     * This function is automatically called by `for...of`.\n     * \n     * @return An iterator for the series.\n     * \n     * @example\n     * <pre>\n     * \n     * for (const value of series) {\n     *     // ... do something with the value ...\n     * }\n     * </pre>\n     */\n    [Symbol.iterator](): Iterator<ValueT> {\n        return this.getContent().values[Symbol.iterator]();\n    }\n\n    /**\n     * Cast the value of the series to a new type.\n     * This operation has no effect but to retype the values that the series contains.\n     * \n     * @return The same series, but with the type changed.\n     * \n     * @example\n     * <pre>\n     * \n     * const castSeries = series.cast<SomeOtherType>();\n     * </pre>\n     */\n    cast<NewValueT> (): ISeries<IndexT, NewValueT> {\n        return this as any as ISeries<IndexT, NewValueT>;\n    }\n    \n    /**\n     * Get the index for the series.\n     * \n     * @return The {@link Index} for the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const index = series.getIndex();\n     * </pre>\n     */\n    getIndex (): IIndex<IndexT> {\n        return new Index<IndexT>(() => ({ values: this.getContent().index }));\n    }\n\n    /**\n     * Apply a new {@link Index} to the series.\n     * \n     * @param newIndex The new array or iterable to be the new {@link Index} of the series. Can also be a selector to choose the {@link Index} for each value in the series.\n     * \n     * @return Returns a new series with the specified {@link Index} attached.\n     * \n     * @example\n     * <pre>\n     * \n     * const indexedSeries = series.withIndex([10, 20, 30]);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const indexedSeries = series.withIndex(someOtherSeries);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const indexedSeries = series.withIndex(value => computeIndexFromValue(value));\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const indexedSeries = series.withIndex(value => value + 20);\n     * </pre>\n     */\n    withIndex<NewIndexT> (newIndex: Iterable<NewIndexT> | SelectorFn<ValueT, NewIndexT>): ISeries<NewIndexT, ValueT> {\n\n        if (isFunction(newIndex)) {\n            return new Series<NewIndexT, ValueT>(() => ({\n                values: this.getContent().values,\n                index: this.select(newIndex),\n            }));\n        }\n        else {\n            Series.checkIterable(newIndex as Iterable<NewIndexT>, 'newIndex');\n            \n            return new Series<NewIndexT, ValueT>(() => ({\n                values: this.getContent().values,\n                index: newIndex as Iterable<NewIndexT>,\n            }));\n        }\n    }\n\n    /**\n     * Resets the {@link Index} of the series back to the default zero-based sequential integer index.\n     * \n     * @return Returns a new series with the {@link Index} reset to the default zero-based index. \n     * \n     * @example\n     * <pre>\n     * \n     * const seriesWithResetIndex = series.resetIndex();\n     * </pre>\n     */\n    resetIndex (): ISeries<number, ValueT> {\n        return new Series<number, ValueT>(() => ({\n            values: this.getContent().values // Just strip the index.\n        }));\n    }\n\n    /**\n     * Merge multiple series into a single series.\n     * Values are merged by index.\n     * Values at each index are combined into arrays in the resulting series.\n     * \n     * @param series An array or series of series to merge.\n     * \n     * @returns The merged series.\n     * \n     * @example\n     * <pre>\n     * \n     * const mergedSeries = Series.merge([series1, series2, etc]);\n     * </pre>\n     */\n    static merge<MergedValueT = any, IndexT = any>(series: Iterable<ISeries<IndexT, any>>): ISeries<IndexT, MergedValueT[]> {\n\n        const rowMap = new Map<string, { index: IndexT, values: any[]}>();\n        const numSeries = Array.from(series).length; //TODO: Be nice not to have to do this.\n        let seriesIndex = 0;\n        for (const workingSeries of series) {\n            for (const pair of workingSeries.toPairs()) {\n                const index = pair[0].toString();\n                if (!rowMap.has(index)) {\n                    rowMap.set(index, { index: pair[0], values: new Array(numSeries) });\n                }\n\n                rowMap.get(index)!.values[seriesIndex] = pair[1];\n            }\n\n            ++seriesIndex;\n        }\n\n        const mergedPairs = Array.from(rowMap.values())\n            .map(row => [row.index, row.values]);\n\n        mergedPairs.sort((a, b) => { // Sort by index, ascending.\n            if (a[0] === b[0]) {\n                return 0;\n            }\n            else if (a[0] > b[0]) {\n                return 1;\n            }\n            else {\n                return -1;\n            }\n        });\n\n        return new Series<IndexT, MergedValueT[]>({\n            pairs: mergedPairs as [IndexT, MergedValueT[]][],\n        });\n    }\n\n   /**\n     * Merge one or more series into this series.\n     * Values are merged by index.\n     * Values at each index are combined into arrays in the resulting series.\n     * \n     * @param series... One or more other series to merge into the series.\n     * \n     * @returns The merged series.\n     * \n     * @example\n     * <pre>\n     * \n     * const mergedSeries = series1.merge(series2);\n     * </pre>\n     * \n     * <pre>\n     * \n     * const mergedSeries = series1.merge(series2, series3, etc);\n     * </pre>\n     */\n    merge<MergedValueT = any>(...args: any[]): ISeries<IndexT, MergedValueT[]> {\n        return Series.merge<MergedValueT, IndexT>([this].concat(args));\n    }\n    \n    /**\n    * Extract values from the series as an array.\n    * This forces lazy evaluation to complete.\n    * \n    * @return Returns an array of the values contained within the series.\n    * \n    * @example\n    * <pre>\n    * const values = series.toArray();\n    * </pre>\n    */\n   toArray (options?: { includeNulls?: boolean }): any[] {\n        const values = [];\n        for (const value of this.getContent().values) {\n            if (options && options.includeNulls && value !== undefined) {\n                values.push(value);\n            } else if (value !== undefined && value !== null) {\n                values.push(value);\n            }\n        }\n        return values;\n    }\n\n    /**\n     * Retreive the index, values pairs from the series as an array.\n     * Each pair is [index, value].\n     * This forces lazy evaluation to complete.\n     * \n     * @return Returns an array of pairs that contains the series values. Each pair is a two element array that contains an index and a value.\n     * \n     * @example\n     * <pre>\n     * const pairs = series.toPairs();\n     * </pre>\n     */\n    toPairs (): ([IndexT, ValueT])[] {\n        const pairs = [];\n        for (const pair of this.getContent().pairs) {\n            if (pair[1] !== undefined && pair[1] !== null) {\n                pairs.push(pair);\n            }\n        }\n        return pairs;\n    }\n\n    /**\n     * Convert the series to a JavaScript object.\n     *\n     * @param keySelector User-defined selector function that selects keys for the resulting object.\n     * @param valueSelector User-defined selector function that selects values for the resulting object.\n     * \n     * @return Returns a JavaScript object generated from the series by applying the key and value selector functions. \n     * \n     * @example\n     * <pre>\n     * \n     * const someObject = series.toObject(\n     *      value => value, // Specify the value to use for field names in the output object.\n     *      value => value // Specify the value to use as the value for each field.\n     * );\n     * </pre>\n     */\n    toObject<KeyT = any, FieldT = any, OutT = any> (keySelector: (value: ValueT) => KeyT, valueSelector: (value: ValueT) => FieldT): OutT {\n\n        if (!isFunction(keySelector)) throw new Error(\"Expected 'keySelector' parameter to Series.toObject to be a function.\");\n        if (!isFunction(valueSelector)) throw new Error(\"Expected 'valueSelector' parameter to Series.toObject to be a function.\");\n\n        return toMap(this, keySelector, valueSelector);\n    }\n    \n    /**\n     * Transforms an input series, generating a new series.\n     * The transformer function is called for each element of the input and the collection of outputs creates the generated series.\n     * \n     * `select` is an alias for {@link Series.map}.\n     * \n     * This is the same concept as the JavaScript function `Array.map` but maps over a data series rather than an array.\n     *\n     * @param transformer A user-defined transformer function that transforms each element from the input to generate the output.\n     * \n     * @return Returns the series generated by calling the transformer function over each value in the input series.\n     * \n     * @example\n     * <pre>\n     * \n     * function transformer (input) {\n     *      const output = // ... construct output from input ...\n     *      return output;\n     * }\n     *  \n     * const transformed = series.select(transformer);\n     * console.log(transformed.toString());\n     * </pre>\n     */\n     select<ToT> (transformer: SelectorWithIndexFn<ValueT, ToT>): ISeries<IndexT, ToT> {\n        if (!isFunction(transformer)) throw new Error(\"Expected 'transformer' parameter to 'Series.select' to be a function.\");\n\n        return this.map<ToT>(transformer);\n    }\n\n    /**\n     * Transforms an input series, generating a new series.\n     * The transformer function is called for each element of the input and the collection of outputs creates the generated series.\n     * \n     * This is the same concept as the JavaScript function `Array.map` but maps over a data series rather than an array.\n     *\n     * @param transformer A user-defined transformer function that transforms each element from the input to generate the output.\n     * \n     * @return Returns a new series generated by calling the transformer function over each element of the input.\n     * \n     * @example\n     * <pre>\n     * \n     * function transformer (input) {\n     *      const output = // ... construct output from input ...\n     *      return output;\n     * }\n     *  \n     * const transformed = series.map(transformer);\n     * console.log(transformed.toString());\n     * </pre>\n     */\n     map<ToT> (transformer: SelectorWithIndexFn<ValueT, ToT>): ISeries<IndexT, ToT> {\n        if (!isFunction(transformer)) throw new Error(\"Expected 'transformer' parameter to 'Series.map' to be a function.\");\n\n        return new Series(() => {\n            const content = this.getContent();\n            return {\n                values: new SelectIterable(content.values, transformer),\n                index: content.index,\n            };\n        });\n    }\n\n    /**\n     * Transforms and flattens an input series, generating a new series.\n     * The transformer function is called for each value in the input series and produces an array that is then flattened into the generated series.\n     * \n     * `selectMany` is an alias for {@link Series.flatMap}.\n     * \n     * This is the same concept as the JavaScript function `Array.flatMap` but maps over a data series rather than an array.\n     * \n     * @param transformer A user-defined function that transforms each value into an array that is then flattened into the generated series.\n     * \n     * @return Returns a new series generated by calling the transformer function over each element of the input.\n     * \n     * @example\n     * <pre>\n     * \n     * function transformer (input) {\n     *      const output = [];\n     *      while (someCondition) {\n     *          // ... generate zero or more outputs from a single input ...\n     *          output.push(... some generated value ...);\n     *      }\n     *      return output;\n     * }\n     * \n     * const transformed = series.selectMany(transformer);\n     * console.log(transformed.toString());\n     * </pre>\n     */\n    selectMany<ToT> (transformer: SelectorWithIndexFn<ValueT, Iterable<ToT>>): ISeries<IndexT, ToT> {\n        if (!isFunction(transformer)) throw new Error(\"Expected 'transformer' parameter to 'Series.selectMany' to be a function.\");\n\n        return this.flatMap<ToT>(transformer);\n    }\n\n    /**\n     * Transforms and flattens an input series, generating a new series.\n     * The transformer function is called for each value in the input series and produces an array that is then flattened into the generated series.\n     * \n     * This is the same concept as the JavaScript function `Array.flatMap` but maps over a data series rather than an array.\n     * \n     * @param transformer A user-defined function that transforms each value into an array that is then flattened into the generated series.\n     * \n     * @return Returns a new series generated by calling the transformer function over each element of the input.\n     * \n     * @example\n     * <pre>\n     * \n     * function transformer (input) {\n     *      const output = [];\n     *      while (someCondition) {\n     *          // ... generate zero or more outputs from a single input ...\n     *          output.push(... some generated value ...);\n     *      }\n     *      return output;\n     * }\n     * \n     * const transformed = series.flatMap(transformer);\n     * console.log(transformed.toString());\n     * </pre>\n     */\n    flatMap<ToT> (transformer: SelectorWithIndexFn<ValueT, Iterable<ToT>>): ISeries<IndexT, ToT> {\n        if (!isFunction(transformer)) throw new Error(\"Expected 'transformer' parameter to 'Series.flatMap' to be a function.\");\n\n        return new Series(() => ({\n            pairs: new SelectManyIterable(\n                this.getContent().pairs, \n                (pair: [IndexT, ValueT], index: number): Iterable<[IndexT, ToT]> => {\n                    const outputPairs: [IndexT, ToT][] = [];\n                    for (const transformed of transformer(pair[1], index)) {\n                        outputPairs.push([\n                            pair[0],\n                            transformed\n                        ]);\n                    }\n                    return outputPairs;\n                }\n            )\n        }));\n    }\n\n    /**\n     * Partition a series into a {@link Series} of *data windows*. \n     * Each value in the new series is a chunk of data from the original series.\n     *\n     * @param period The number of values to include in each data window.\n     * @param whichIndex Sets which side of the window the index comes from: start or end. Can be \"start\" or \"end\", defaults to \"end\".\n     * \n     * @return Returns a new series, each value of which is a chunk (data window) of the original series.\n     * \n     * @example\n     * <pre>\n     * \n     * const windows = series.window(2); // Get values in pairs.\n     * const pctIncrease = windows.select(pair => (pair.last() - pair.first()) / pair.first());\n     * console.log(pctIncrease.toString());\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const salesDf = ... // Daily sales data.\n     * const weeklySales = salesDf.window(7); // Partition up into weekly data sets.\n     * console.log(weeklySales.toString());\n     * </pre>\n     */\n    window (period: number, whichIndex?: WhichIndex): ISeries<IndexT, ISeries<IndexT, ValueT>> {\n\n        if (!isNumber(period)) throw new Error(\"Expected 'period' parameter to 'Series.window' to be a number.\");\n\n        return new Series<IndexT, ISeries<IndexT, ValueT>>(() => ({\n            pairs: new SeriesWindowIterable<IndexT, ValueT>(this.getContent().pairs, period, whichIndex || WhichIndex.End),\n        }));\n    }\n\n    /** \n     * Partition a series into a new series of *rolling data windows*. \n     * Each value in the new series is a rolling chunk of data from the original series.\n     *\n     * @param period The number of data values to include in each data window.\n     * @param whichIndex Sets which side of the window the index comes from: start or end. Can be \"start\" or \"end\", defaults to \"end\".\n     * \n     * @return Returns a new series, each value of which is a rolling chunk of the original series.\n     * \n     * @example\n     * <pre>\n     * \n     * const salesData = ... // Daily sales data.\n     * const rollingWeeklySales = salesData.rollingWindow(7); // Get rolling window over weekly sales data.\n     * console.log(rollingWeeklySales.toString());\n     * </pre>\n     */\n    rollingWindow (period: number, whichIndex?: WhichIndex): ISeries<IndexT, ISeries<IndexT, ValueT>> {\n\n        if (!isNumber(period)) throw new Error(\"Expected 'period' parameter to 'Series.rollingWindow' to be a number.\");\n\n        return new Series<IndexT, ISeries<IndexT, ValueT>>(() => ({\n            pairs: new SeriesRollingWindowIterable<IndexT, ValueT>(this.getContent().pairs, period, whichIndex || WhichIndex.End),\n        }));\n    }\n\n    /**\n     * Partition a series into a new series of variable-length *data windows* \n     * where the divisions between the data chunks are\n     * defined by a user-provided *comparer* function.\n     * \n     * @param comparer Function that compares two adjacent data values and returns true if they should be in the same window.\n     * \n     * @return Returns a new series, each value of which is a chunk of data from the original series.\n     * \n     * @example\n     * <pre>\n     * \n     * function rowComparer (valueA, valueB) {\n     *      if (... valueA should be in the same data window as valueB ...) {\n     *          return true;\n     *      }\n     *      else {\n     *          return false;\n     *      }\n     * };\n     * \n     * const variableWindows = series.variableWindow(rowComparer);\n     */\n    variableWindow (comparer: ComparerFn<ValueT, ValueT>): ISeries<number, ISeries<IndexT, ValueT>> {\n        \n        if (!isFunction(comparer)) throw new Error(\"Expected 'comparer' parameter to 'Series.variableWindow' to be a function.\")\n\n        return new Series<number, ISeries<IndexT, ValueT>>(() => ({\n            values: new SeriesVariableWindowIterable<IndexT, ValueT>(this.getContent().pairs, comparer)\n        }));\n    }\n\n    /**\n     * Eliminates adjacent duplicate values.\n     * \n     * For each group of adjacent values that are equivalent only returns the last index/row for the group, \n     * thus ajacent equivalent values are collapsed down to the last value.\n     *\n     * @param selector Optional selector function to determine the value used to compare for equivalence.\n     * \n     * @return Returns a new series with groups of adjacent duplicate vlaues collapsed to a single value per group.\n     * \n     * @example\n     * <pre>\n     * \n     * const seriesWithDuplicateRowsRemoved = series.sequentialDistinct(value => value);\n     * \n     * // Or\n     * const seriesWithDuplicateRowsRemoved = series.sequentialDistinct(value => value.someNestedField);\n     * </pre>\n     */\n    sequentialDistinct<ToT = ValueT> (selector?: SelectorFn<ValueT, ToT>): ISeries<IndexT, ValueT> {\n        \n        if (selector) {\n            if (!isFunction(selector)) throw new Error(\"Expected 'selector' parameter to 'Series.sequentialDistinct' to be a selector function that determines the value to compare for duplicates.\")\n        }\n        else {\n            selector = (value: ValueT): ToT => <ToT> <any> value;\n        }\n\n        return this.variableWindow((a, b) => selector!(a) === selector!(b))\n            .select((window): [IndexT, ValueT] => {\n                return [window.getIndex().first(), window.first()] ;\n            })\n            .withIndex(pair => pair[0])\n            .select(pair => pair[1]);\n    }\n\n    /**\n     * Reduces the values in the series to a single result.\n     *\n     * `aggregate` is similar to {@link Series.reduce}, but the parameters are reversed. \n     * Please use {@link Series.reduce} in preference to `aggregate`.\n     *\n     * @param seed Optional seed value for producing the aggregation.\n     * @param reducer Function that takes the seed and then each value in the series and produces the reduced value.\n     * \n     * @return Returns a new value that has been reduced from the input series by passing it through the 'reducer' function.\n     * \n     * @example\n     * <pre>\n     * \n     * const dailySales = ... daily sales figures for the past month ...\n     * const totalSalesForthisMonth = dailySales.aggregate(\n     *      0, // Seed - the starting value.\n     *      (accumulator, salesAmount) => accumulator + salesAmount // Aggregation function.\n     * );\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const previousSales = 500; // We'll seed the aggregation with this value.\n     * const dailySales = ... daily sales figures for the past month ...\n     * const updatedSales = dailySales.aggregate(\n     *      previousSales, \n     *      (accumulator, salesAmount) => accumulator + salesAmount\n     * );\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * var salesDataSummary = salesData.aggregate({\n     *      TotalSales: series => series.count(),\n     *      AveragePrice: series => series.average(),\n     *      TotalRevenue: series => series.sum(), \n     * });\n     * </pre>\n     */\n    aggregate<ToT = ValueT> (seedOrSelector: AggregateFn<ValueT, ToT> | ToT, selector?: AggregateFn<ValueT, ToT>): ToT {\n\n        if (isFunction(seedOrSelector) && !selector) {\n            return this.skip(1).aggregate(<ToT> <any> this.first(), seedOrSelector);\n        }\n        else {\n            if (!isFunction(selector)) throw new Error(\"Expected 'selector' parameter to aggregate to be a function.\");\n\n            let accum = <ToT> seedOrSelector;\n\n            for (const value of this) {\n                accum = selector!(accum, value);\n            }\n\n            return accum;\n        }\n    }\n   \n    /**\n     * Reduces the values in the series to a single result.\n     *\n     * This is the same concept as the JavaScript function `Array.reduce` but reduces a data series rather than an array.\n\n     * @param reducer Function that takes the seed and then each value in the series and produces the reduced value.\n     * @param seed Optional initial value, if not specifed the first value in the series is used as the initial value.\n     * \n     * @return Returns a value that has been reduced from the input series by passing each element through the reducer function.\n     * \n     * @example\n     * <pre>\n     * \n     * const dailySales = ... daily sales figures for the past month ...\n     * const totalSales = dailySales.reduce(\n     *      (accumulator, salesAmount) => accumulator + salesAmount, // Reducer function.\n     *      0  // Seed value, the starting value.\n     * );\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const previousSales = 500; // We'll seed the reduction with this value.\n     * const dailySales = ... daily sales figures for the past month ...\n     * const updatedSales = dailySales.reduce(\n     *      (accumulator, salesAmount) => accumulator + salesAmount,\n     *      previousSales\n     * );\n     * </pre>\n     */\n    reduce<ToT = ValueT> (reducer: AggregateFn<ValueT, ToT>, seed?: ToT): ToT {\n        if (!isFunction(reducer)) throw new Error(\"Expected 'reducer' parameter to `Series.reduce` to be a function.\");\n\n        let accum = <ToT> seed;\n        let series: ISeries<any, ValueT> = this;\n        if (accum === undefined) {\n            if (series.any()) {\n                accum = series.first() as any as ToT;\n                series = series.skip(1);\n            }\n        }\n\n        for (const value of series) {\n            accum = reducer(accum, value);\n        }\n\n        return accum;\n    }\n\n    /**\n     * Compute the absolute range of values in each period.\n     * The range for each period is the absolute difference between largest (max) and smallest (min) values in that period.\n     * \n     * @param period - Period for computing the range.\n     * \n     * @returns Returns a new series where each value indicates the absolute range of values for each period in the original series.\n     * \n     * @example\n     * <pre>\n     * \n     * const closingPrice = ... series of closing prices for a particular stock ...\n     * const volatility = closingPrice.amountRange(5);\n     * </pre>\n     */\n    amountRange (period: number, whichIndex?: WhichIndex): ISeries<IndexT, number> {\n        return (<ISeries<IndexT, number>> <any> this) // Have to assume this is a number series.\n            .rollingWindow(period, whichIndex)\n            .select(window => window.max() - window.min());\n    }   \n\n    /**\n     * Compute the range of values in each period in proportion to the latest value.\n     * The range for each period is the absolute difference between largest (max) and smallest (min) values in that period.\n     * Proportions are expressed as 0-1 values.\n     * \n     * @param period - Period for computing the range.\n     * \n     * @returns Returns a new series where each value indicates the proportion change from the previous number value in the original series.\n     * \n     * @returns Returns a new series where each value indicates the proportionate range of values for each period in the original series.\n     * \n     * @example\n     * <pre>\n     * \n     * const closingPrice = ... series of closing prices for a particular stock ...\n     * const proportionVolatility = closingPrice.proportionRange(5);\n     * </pre>\n     */\n    proportionRange (period: number, whichIndex?: WhichIndex): ISeries<IndexT, number> {\n        return (<ISeries<IndexT, number>> <any> this) // Have to assume this is a number series.\n            .rollingWindow(period, whichIndex)\n            .select(window => (window.max() - window.min()) / window.last());\n    }    \n\n    /**\n     * Compute the range of values in each period in proportion to the latest value.\n     * The range for each period is the absolute difference between largest (max) and smallest (min) values in that period.\n     * Proportions are expressed as 0-1 values.\n     * \n     * @param period - Period for computing the range.\n     * \n     * @returns Returns a new series where each value indicates the proportion change from the previous number value in the original series.\n     * \n     * @returns Returns a new series where each value indicates the proportionate range of values for each period in the original series.\n     * \n     * @example\n     * <pre>\n     * \n     * const closingPrice = ... series of closing prices for a particular stock ...\n     * const percentVolatility = closingPrice.percentRange(5);\n     * </pre>\n     */\n    percentRange (period: number, whichIndex?: WhichIndex): ISeries<IndexT, number> {\n        return this.proportionRange(period, whichIndex).select(v => v * 100);\n    }\n\n    /**\n     * Compute the amount of change between pairs or sets of values in the series.\n     * \n     * @param period Optional period for computing the change - defaults to 2.\n     * \n     * @returns Returns a new series where each value indicates the amount of change from the previous number value in the original series.  \n     * \n     * @example\n     * <pre>\n     * \n     * const saleFigures = ... running series of daily sales figures ...\n     * const amountChanged = salesFigures.amountChanged(); // Amount that sales has changed, day to day.\n     * </pre>\n     * @example\n     * <pre>\n     * \n     * const saleFigures = ... running series of daily sales figures ...\n     * const amountChanged = salesFigures.amountChanged(7); // Amount that sales has changed, week to week.\n     * </pre>\n     */\n    amountChange (period?: number, whichIndex?: WhichIndex): ISeries<IndexT, number> {\n        return (<ISeries<IndexT, number>> <any> this) // Have to assume this is a number series.\n            .rollingWindow(period === undefined ? 2 : period, whichIndex)\n            .select(window => window.last() - window.first());\n    }   \n\n    /**\n     * Compute the proportion change between pairs or sets of values in the series.\n     * Proportions are expressed as 0-1 values.\n     * \n     * @param period Optional period for computing the proportion - defaults to 2.\n     * \n     * @returns Returns a new series where each value indicates the proportion change from the previous number value in the original series.\n     * \n     * @example\n     * <pre>\n     * \n     * const saleFigures = ... running series of daily sales figures ...\n     * const proportionChanged = salesFigures.amountChanged(); // Proportion that sales has changed, day to day.\n     * </pre>\n     * @example\n     * <pre>\n     * \n     * const saleFigures = ... running series of daily sales figures ...\n     * const proportionChanged = salesFigures.amountChanged(7); // Proportion that sales has changed, week to week.\n     * </pre>\n     */\n    proportionChange (period?: number, whichIndex?: WhichIndex): ISeries<IndexT, number> {\n        return (<ISeries<IndexT, number>> <any> this) // Have to assume this is a number series.\n            .rollingWindow(period === undefined ? 2 : period, whichIndex)\n            .select(window => (window.last() - window.first())  / window.first());\n    }    \n\n    /**\n     * Compute the percentage change between pairs or sets of values in the series.\n     * Percentages are expressed as 0-100 values.\n     * \n     * @param period Optional period for computing the percentage - defaults to 2.\n     * \n     * @returns Returns a new series where each value indicates the percent change from the previous number value in the original series.\n     * \n     * @example\n     * <pre>\n     * \n     * const saleFigures = ... running series of daily sales figures ...\n     * const percentChanged = salesFigures.amountChanged(); // Percent that sales has changed, day to day.\n     * </pre>\n     * @example\n     * <pre>\n     * \n     * const saleFigures = ... running series of daily sales figures ...\n     * const percentChanged = salesFigures.amountChanged(7); // Percent that sales has changed, week to week.\n     * </pre>\n     */\n    percentChange (period?: number, whichIndex?: WhichIndex): ISeries<IndexT, number> {\n        return this.proportionChange(period, whichIndex).select(v => v * 100);\n    }    \n    \n    /**\n     * For each period, compute the proportion of values that are less than the last value in the period.\n     * Proportions are expressed as 0-1 values.\n     * \n     * @param period Optional period for computing the proportion rank - defaults to 2.\n     * \n     * @returns Returns a new series where each value indicates the proportion rank value for that period.\n     * \n     * @example\n     * <pre>\n     * \n     * const proportionRank = series.proportionRank();\n     * </pre>\n     * @example\n     * <pre>\n     * \n     * const proportionRank = series.proportionRank(100);\n     * </pre>\n     */\n    proportionRank (period?: number): ISeries<IndexT, number> {\n        if (period === undefined) {\n            period = 2;\n        }\n\n        if (!isNumber(period)) {\n            throw new Error(\"Expected 'period' parameter to 'Series.proportionRank' to be a number that specifies the time period for the ranking.\");\n        }\n    \n        return this.rollingWindow(period+1) // +1 to account for the last value being used.\n            .select(window => {\n                const latestValue = window.last();\n                const numLowerValues = window.head(-1).filter(prevMomentum => prevMomentum < latestValue).count();\n                const proportionRank = numLowerValues / period!;\n                return proportionRank;\n            });\n    }\n\n    /**\n     * For each period, compute the percent of values that are less than the last value in the period.\n     * Percent are expressed as 0-100 values.\n     * \n     * @param period Optional period for computing the percent rank - defaults to 2.\n     * \n     * @returns Returns a new series where each value indicates the percent rank value for that period.\n     * \n     * @example\n     * <pre>\n     * \n     * const percentRank = series.percentRank();\n     * </pre>\n     * @example\n     * <pre>\n     * \n     * const percentRank = series.percentRank(100);\n     * </pre>\n     */\n    percentRank (period?: number): ISeries<IndexT, number> {\n        if (period === undefined) {\n            period = 2;\n        }\n\n        if (!isNumber(period)) {\n            throw new Error(\"Expected 'period' parameter to 'Series.percentRank' to be a number that specifies the time period for the ranking.\");\n        }\n    \n        return this.proportionRank(period).select(proportion => proportion * 100);\n    }\n\n    /**\n     * Generates a cumulative sum across a series.\n     * \n     * @returns Returns a new series that is the cumulative sum of values across the input series.\n     */\n    cumsum (): ISeries<IndexT, number> {\n        return new Series<IndexT, number>(() => {\n            let working = 0;\n            const pairs: any[][] = this.toPairs();\n            const output: any = pairs.map(([index, value]) => ([index, working += value]));\n            return { pairs: output };\n        });\n    }\n\n    /**\n     * Skip a number of values in the series.\n     *\n     * @param numValues Number of values to skip.\n     * \n     * @return Returns a new series with the specified number of values skipped.\n     * \n     * @example\n     * <pre>\n     * \n     * const seriesWithRowsSkipped = series.skip(10); // Skip 10 rows in the original series.\n     * </pre>\n     */\n    skip (numValues: number): ISeries<IndexT, ValueT> {\n        return new Series<IndexT, ValueT>(() => ({\n            values: new SkipIterable(this.getContent().values, numValues),\n            index: new SkipIterable(this.getContent().index, numValues),\n            pairs: new SkipIterable(this.getContent().pairs, numValues),\n        }));\n    }\n    \n    /**\n     * Skips values in the series while a condition evaluates to true or truthy.\n     *\n     * @param predicate Returns true/truthy to continue to skip values in the original series.\n     * \n     * @return Returns a new series with all initial sequential values removed while the predicate returned true/truthy.\n     * \n     * @example\n     * <pre>\n     * \n     * const seriesWithRowsSkipped = series.skipWhile(salesFigure => salesFigure > 100); // Skip initial sales figure that are less than 100.\n     * </pre>\n     */\n    skipWhile (predicate: PredicateFn<ValueT>): ISeries<IndexT, ValueT> {\n        if (!isFunction(predicate)) throw new Error(\"Expected 'predicate' parameter to 'Series.skipWhile' function to be a predicate function that returns true/false.\");\n\n        return new Series<IndexT, ValueT>(() => ({\n            values: new SkipWhileIterable(this.getContent().values, predicate),\n            pairs: new SkipWhileIterable(this.getContent().pairs, pair => predicate(pair[1])),\n        }));\n    }\n\n    /**\n     * Skips values in the series untils a condition evaluates to true or truthy.\n     *\n     * @param predicate Return true/truthy to stop skipping values in the original series.\n     * \n     * @return Returns a new series with all initial sequential values removed until the predicate returned true/truthy.\n     * \n     * @example\n     * <pre>\n     * \n     * const seriesWithRowsSkipped = series.skipUntil(salesFigure => salesFigure > 100); // Skip initial sales figures unitl we see one greater than 100.\n     * </pre>\n     */\n    skipUntil (predicate: PredicateFn<ValueT>): ISeries<IndexT, ValueT> {\n        if (!isFunction(predicate)) throw new Error(\"Expected 'predicate' parameter to 'Series.skipUntil' function to be a predicate function that returns true/false.\");\n\n        return this.skipWhile(value => !predicate(value)); \n    }\n\n    /**\n     * Take a number of  values from the series.\n     *\n     * @param numValues Number of values to take.\n     * \n     * @return Returns a new series with only the specified number of values taken from the original series.\n     * \n     * @example\n     * <pre>\n     * \n     * const seriesWithRowsTaken = series.take(15); // Take only the first 15 values from the original series.\n     * </pre>\n     */\n    take (numRows: number): ISeries<IndexT, ValueT> {\n        if (!isNumber(numRows)) throw new Error(\"Expected 'numRows' parameter to 'Series.take' function to be a number.\");\n\n        return new Series(() => ({\n            index: new TakeIterable(this.getContent().index, numRows),\n            values: new TakeIterable(this.getContent().values, numRows),\n            pairs: new TakeIterable(this.getContent().pairs, numRows)\n        }));\n    }\n\n    /**\n     * Takes values from the series while a condition evaluates to true or truthy.\n     *\n     * @param predicate Returns true/truthy to continue to take values from the original series.\n     * \n     * @return Returns a new series with only the initial sequential values that were taken while the predicate returned true/truthy.\n     * \n     * @example\n     * <pre>\n     * \n     * const seriesWithRowsTaken = series.takeWhile(salesFigure => salesFigure > 100); // Take only initial sales figures that are greater than 100.\n     * </pre>\n     */\n    takeWhile (predicate: PredicateFn<ValueT>): ISeries<IndexT, ValueT> {\n        if (!isFunction(predicate)) throw new Error(\"Expected 'predicate' parameter to 'Series.takeWhile' function to be a predicate function that returns true/false.\");\n\n        return new Series(() => ({\n            values: new TakeWhileIterable(this.getContent().values, predicate),\n            pairs: new TakeWhileIterable(this.getContent().pairs, pair => predicate(pair[1]))\n        }));\n    }\n\n    /**\n     * Takes values from the series until a condition evaluates to true or truthy.\n     *\n     * @param predicate Return true/truthy to stop taking values in the original series.\n     * \n     * @return Returns a new series with only the initial sequential values taken until the predicate returned true/truthy.\n     * \n     * @example\n     * <pre>\n     * \n     * const seriesWithRowsTaken = series.takeUntil(salesFigure => salesFigure > 100); // Take all initial sales figures until we see one that is greater than 100.\n     * </pre>\n     */\n    takeUntil (predicate: PredicateFn<ValueT>): ISeries<IndexT, ValueT> {\n        if (!isFunction(predicate)) throw new Error(\"Expected 'predicate' parameter to 'Series.takeUntil' function to be a predicate function that returns true/false.\");\n\n        return this.takeWhile(value => !predicate(value));\n    }\n\n    /**\n     * Static version of the count function for use with {@link DataFrame.summarize} and {@link DataFrame.pivot} functions.\n     * \n     * @param series Input series to be counted.\n     * \n     * @returns Returns the count of values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const summary = dataFrame.summarize({\n     *      ColumnToBeCounted: Series.count,\n     * });\n     * </pre>\n     */\n    static count<IndexT = any> (series: ISeries<IndexT, number>): number {\n        return series.count();\n    }\n    \n    /**\n     * Count the number of values in the series.\n     *\n     * @return Returns the count of all values.\n     * \n     * @example\n     * <pre>\n     * \n     * const numValues = series.count();\n     * </pre>\n     */\n    count (): number {\n\n        let total = 0;\n        for (const value of this.getContent().values) {\n            ++total;\n        }\n        return total;\n    }\n\n    /**\n     * Get the first value of the series.\n     *\n     * @return Returns the first value of the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const firstValue = series.first();\n     * </pre>\n     */\n    first (): ValueT {\n\n        for (const value of this) {\n            return value; // Only need the first value.\n        }\n\n        throw new Error(\"Series.first: No values in Series.\");\n    }\n\n    /**\n     * Get the last value of the series.\n     *\n     * @return Returns the last value of the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const lastValue = series.last();\n     * </pre>\n     */\n    last (): ValueT {\n\n        let lastValue = null;\n\n        for (const value of this) {\n            lastValue = value; // Throw away all values until we get to the last one.\n        }\n\n        if (lastValue === null) {\n            throw new Error(\"Series.last: No values in Series.\");\n        }\n\n        return lastValue;\n    }    \n    \n    /**\n     * Get the value, if there is one, with the specified index.\n     *\n     * @param index Index to for which to retreive the value.\n     *\n     * @return Returns the value from the specified index in the series or undefined if there is no such index in the present in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const value = series.at(5); // Get the value at index 5 (with a default 0-based index).\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const date = ... some date ...\n     * // Retreive the value with specified date from a time-series (assuming date indexed has been applied).\n     * const value = series.at(date); \n     * </pre>\n     */\n    at (index: IndexT): ValueT | undefined {\n\n        if (this.none()) {\n            return undefined;\n        }\n\n        return this.getRowByIndex(index);\n    }\n    \n    /** \n     * Get X value from the start of the series.\n     * Pass in a negative value to get all values at the head except for X values at the tail.\n     *\n     * @param numValues Number of values to take.\n     * \n     * @return Returns a new series that has only the specified number of values taken from the start of the original series.\n     * \n     * @examples\n     * <pre>\n     * \n     * const sample = series.head(10); // Take a sample of 10 values from the start of the series.\n     * </pre>\n     */\n    head (numValues: number): ISeries<IndexT, ValueT> {\n\n        if (!isNumber(numValues)) throw new Error(\"Expected 'numValues' parameter to 'Series.head' function to be a number.\");\n\n        if (numValues === 0) {\n            return new Series<IndexT, ValueT>(); // Empty series.\n        }\n\n        const toTake = numValues < 0 ? this.count() - Math.abs(numValues) : numValues;\n        return this.take(toTake);\n    }\n\n    /** \n     * Get X values from the end of the series.\n     * Pass in a negative value to get all values at the tail except X values at the head.\n     *\n     * @param numValues Number of values to take.\n     * \n     * @return Returns a new series that has only the specified number of values taken from the end of the original series.  \n     * \n     * @examples\n     * <pre>\n     * \n     * const sample = series.tail(12); // Take a sample of 12 values from the end of the series.\n     * </pre>\n     */\n    tail (numValues: number): ISeries<IndexT, ValueT> {\n\n        if (!isNumber(numValues)) throw new Error(\"Expected 'numValues' parameter to 'Series.tail' function to be a number.\");\n\n        if (numValues === 0) {\n            return new Series<IndexT, ValueT>(); // Empty series.\n        }\n\n        const toSkip = numValues > 0 ? this.count() - numValues : Math.abs(numValues);\n        return this.skip(toSkip);\n    }\n\n    /**\n     * Filter the series through a user-defined predicate function.\n     * \n     * `where` is an alias for {@link Series.filter}.\n     *\n     * This is the same concept as the JavaScript function `Array.filter` but filters a data series rather than an array.\n     * \n     * @param predicate Predicate function to filter values from the series. Returns true/truthy to keep elements, or false/falsy to omit elements.\n     * \n     * @return Returns a new series containing only the values from the original series that matched the predicate. \n     * \n     * @example\n     * <pre>\n     * \n     * // Filter so we only have sales figures greater than 100.\n     * const filtered = series.where(salesFigure => salesFigure > 100); \n     * console.log(filtered.toArray());\n     * </pre>\n     */\n    where (predicate: PredicateFn<ValueT>): ISeries<IndexT, ValueT> {\n        if (!isFunction(predicate)) throw new Error(\"Expected 'predicate' parameter to 'Series.where' to be a function.\");\n\n        return this.filter(predicate);\n    }\n\n    /**\n     * Filter the series through a user-defined predicate function.\n     * \n     * This is the same concept as the JavaScript function `Array.filter` but filters a data series rather than an array.\n     *\n     * @param predicate Predicate function to filter values from the series. Returns true/truthy to keep elements, or false/falsy to omit elements.\n     * \n     * @return Returns a new series containing only the values from the original series that matched the predicate. \n     * \n     * @example\n     * <pre>\n     * \n     * // Filter so we only have sales figures greater than 100.\n     * const filtered = series.filter(salesFigure => salesFigure > 100); \n     * console.log(filtered.toArray());\n     * </pre>\n     */\n    filter (predicate: PredicateFn<ValueT>): ISeries<IndexT, ValueT> {\n        if (!isFunction(predicate)) throw new Error(\"Expected 'predicate' parameter to 'Series.filter' to be a function.\");\n\n        return new Series(() => {\n            const content = this.getContent();\n            return {\n                values: new WhereIterable(this.getContent().values, predicate),\n                pairs: new WhereIterable(this.getContent().pairs, pair => predicate(pair[1]))\n            };\n        });\n    }\n\n    /**\n     * Invoke a callback function for each value in the series.\n     *\n     * @param callback The calback function to invoke for each value.\n     * \n     * @return Returns the original series with no modifications.\n     * \n     * @example\n     * <pre>\n     * \n     * series.forEach(value => {\n     *      // ... do something with the value ...\n     * });\n     * </pre>\n     */\n    forEach (callback: CallbackFn<ValueT>): ISeries<IndexT, ValueT> {\n        if (!isFunction(callback)) throw new Error(\"Expected 'callback' parameter to 'Series.forEach' to be a function.\");\n\n        let index = 0;\n        for (const value of this) {\n            callback(value, index++);\n        }\n\n        return this;\n    }\n\n    /**\n     * Evaluates a predicate function for every value in the series to determine \n     * if some condition is true/truthy for **all** values in the series.\n     * \n     * @param predicate Predicate function that receives each value. It should returns true/truthy for a match, otherwise false/falsy.\n     *\n     * @return Returns true if the predicate has returned true or truthy for every value in the series, otherwise returns false. Returns false for an empty series.\n     * \n     * @example\n     * <pre>\n     * \n     * const result = series.all(salesFigure => salesFigure > 100); // Returns true if all sales figures are greater than 100.\n     * </pre>\n     */\n    all (predicate: PredicateFn<ValueT>): boolean {\n        if (!isFunction(predicate)) throw new Error(\"Expected 'predicate' parameter to 'Series.all' to be a function.\")\n\n        let count = 0;\n\n        for (const value of this) {\n            if (!predicate(value)) {\n                return false;\n            }\n\n            ++count;\n        }\n\n        return count > 0;\n    }\n\n    /**\n     * Evaluates a predicate function for every value in the series to determine \n     * if some condition is true/truthy for **any** of values in the series.\n     * \n     * If no predicate is specified then it simply checks if the series contains more than zero values.\n     *\n     * @param predicate Optional predicate function that receives each value. It should return true/truthy for a match, otherwise false/falsy.\n     *\n     * @return Returns true if the predicate has returned truthy for any value in the series, otherwise returns false. \n     * If no predicate is passed it returns true if the series contains any values at all.\n     * Returns false for an empty series.\n     * \n     * @example\n     * <pre>\n     * \n     * const result = series.any(salesFigure => salesFigure > 100); // Do we have any sales figures greater than 100?\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const result = series.any(); // Do we have any sales figures at all?\n     * </pre>\n     */\n    any (predicate?: PredicateFn<ValueT>): boolean {\n        if (predicate) {\n            if (!isFunction(predicate)) throw new Error(\"Expected 'predicate' parameter to 'Series.any' to be a function.\")\n        }\n\n        if (predicate) {\n            // Use the predicate to check each value.\n            for (const value of this) {\n                if (predicate(value)) {\n                    return true;\n                }\n            }\n        }\n        else {\n            // Just check if there is at least one item.\n            const iterator = this[Symbol.iterator]()\n            return !iterator.next().done;\n        }\n\n        return false; // Nothing passed.\n    }\n\n    /**\n     * Evaluates a predicate function for every value in the series to determine \n     * if some condition is true/truthy for **none** of values in the series.\n     * \n     * If no predicate is specified then it simply checks if the series contains zero values.\n     *\n     * @param predicate Optional predicate function that receives each value. It should return true/truthy for a match, otherwise false/falsy.\n     *\n     * @return Returns true if the predicate has returned truthy for zero values in the series, otherwise returns false. Returns false for an empty series.\n     * \n     * @example\n     * <pre>\n     * \n     * const result = series.none(salesFigure => salesFigure > 100); // Do we have zero sales figures greater than 100?\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const result = series.none(); // Do we have zero sales figures?\n     * </pre>\n     */\n    none (predicate?: PredicateFn<ValueT>): boolean {\n\n        if (predicate) {\n            if (!isFunction(predicate)) throw new Error(\"Expected 'predicate' parameter to 'Series.none' to be a function.\")\n        }\n\n        if (predicate) {\n            // Use the predicate to check each value.\n            for (const value of this) {\n                if (predicate(value)) {\n                    return false;\n                }\n            }\n        }\n        else {\n            // Just check if empty.\n            const iterator = this[Symbol.iterator]()\n            return iterator.next().done;\n        }\n\n        return true; // Nothing failed the predicate.\n    }\n\n    /**\n     * Gets a new series containing all values starting at or after the specified index value.\n     * \n     * @param indexValue The index value at which to start the new series.\n     * \n     * @return Returns a new series containing all values starting at or after the specified index value. \n     * \n     * @example\n     * <pre>\n     * \n     * const series = new Series({ \n     *      index: [0, 1, 2, 3], // This is the default index.\n     *      values: [10, 20, 30, 40],\n     * });\n     * \n     * const lastHalf = series.startAt(2);\n     * expect(lastHalf.toArray()).to.eql([30, 40]);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const timeSeries = ... a series indexed by date/time ...\n     * \n     * // Get all values starting at (or after) a particular date.\n     * const result = timeSeries.startAt(new Date(2016, 5, 4)); \n     * </pre>\n     */\n    startAt (indexValue: IndexT): ISeries<IndexT, ValueT> {\n        return new Series<IndexT, ValueT>(() => {\n            const lessThan = this.getIndex().getLessThan();\n            return {                \n                index: new SkipWhileIterable(this.getContent().index, index => lessThan(index, indexValue)),\n                pairs: new SkipWhileIterable(this.getContent().pairs, pair => lessThan(pair[0], indexValue)),\n            }\n        });\n    }\n\n    /**\n     * Gets a new series containing all values up until and including the specified index value (inclusive).\n     * \n     * @param indexValue The index value at which to end the new series.\n     * \n     * @return Returns a new series containing all values up until and including the specified index value.\n     * \n     * @example\n     * <pre>\n     * \n     * const series = new Series({ \n     *      index: [0, 1, 2, 3], // This is the default index.\n     *      values: [10, 20, 30, 40],\n     * });\n     * \n     * const firstHalf = series.endAt(1);\n     * expect(firstHalf.toArray()).to.eql([10, 20]);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const timeSeries = ... a series indexed by date/time ...\n     * \n     * // Get all values ending at a particular date.\n     * const result = timeSeries.endAt(new Date(2016, 5, 4)); \n     * </pre>\n     */\n    endAt (indexValue: IndexT): ISeries<IndexT, ValueT> {\n        return new Series<IndexT, ValueT>(() => {\n            const lessThanOrEqualTo = this.getIndex().getLessThanOrEqualTo();\n            return {\n                index: new TakeWhileIterable(this.getContent().index, index => lessThanOrEqualTo(index, indexValue)),\n                pairs: new TakeWhileIterable(this.getContent().pairs, pair => lessThanOrEqualTo(pair[0], indexValue)),\n            };\n        });\n    }\n\n    /**\n     * Gets a new series containing all values up to the specified index value (exclusive).\n     * \n     * @param indexValue The index value at which to end the new series.\n     * \n     * @return Returns a new series containing all values up to (but not including) the specified index value. \n     * \n     * @example\n     * <pre>\n     * \n     * const series = new Series({ \n     *      index: [0, 1, 2, 3], // This is the default index.\n     *      values: [10, 20, 30, 40],\n     * });\n     * \n     * const firstHalf = series.before(2);\n     * expect(firstHalf.toArray()).to.eql([10, 20]);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const timeSeries = ... a series indexed by date/time ...\n     * \n     * // Get all values before the specified date.\n     * const result = timeSeries.before(new Date(2016, 5, 4)); \n     * </pre>\n     */\n    before (indexValue: IndexT): ISeries<IndexT, ValueT> {\n        return new Series<IndexT, ValueT>(() => {\n            const lessThan = this.getIndex().getLessThan();\n            return {\n                index: new TakeWhileIterable(this.getContent().index, index => lessThan(index, indexValue)),\n                pairs: new TakeWhileIterable(this.getContent().pairs, pair => lessThan(pair[0], indexValue)),\n            };\n        });\n    }\n\n    /**\n     * Gets a new series containing all values after the specified index value (exclusive).\n     * \n     * @param indexValue The index value after which to start the new series.\n     * \n     * @return Returns a new series containing all values after the specified index value.\n     * \n     * @example\n     * <pre>\n     * \n     * const series = new Series({ \n     *      index: [0, 1, 2, 3], // This is the default index.\n     *      values: [10, 20, 30, 40],\n     * });\n     * \n     * const lastHalf = df.before(1);\n     * expect(lastHalf.toArray()).to.eql([30, 40]);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const timeSerie = ... a series indexed by date/time ...\n     * \n     * // Get all values after the specified date.\n     * const result = timeSeries.after(new Date(2016, 5, 4)); \n     * </pre>\n     */    \n    after (indexValue: IndexT): ISeries<IndexT, ValueT> {\n        return new Series<IndexT, ValueT>(() => {\n            const lessThanOrEqualTo = this.getIndex().getLessThanOrEqualTo();\n            return {\n                index: new SkipWhileIterable(this.getContent().index, index => lessThanOrEqualTo(index, indexValue)),\n                pairs: new SkipWhileIterable(this.getContent().pairs, pair => lessThanOrEqualTo(pair[0], indexValue)),\n            };\n        });\n    }\n\n    /**\n     * Gets a new series containing all values between the specified index values (inclusive).\n     * \n     * @param startIndexValue The index at which to start the new series.\n     * @param endIndexValue The index at which to end the new series.\n     * \n     * @return Returns a new series containing all values between the specified index values (inclusive).\n     * \n     * @example\n     * <pre>\n     * \n     * const series = new Series({ \n     *      index: [0, 1, 2, 3, 4, 6], // This is the default index.\n     *      values: [10, 20, 30, 40, 50, 60],\n     * });\n     * \n     * const middleSection = series.between(1, 4);\n     * expect(middleSection.toArray()).to.eql([20, 30, 40, 50]);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const timeSeries = ... a series indexed by date/time ...\n     * \n     * // Get all values between the start and end dates (inclusive).\n     * const result = timeSeries.after(new Date(2016, 5, 4), new Date(2016, 5, 22)); \n     * </pre>\n     */\n    between (startIndexValue: IndexT, endIndexValue: IndexT): ISeries<IndexT, ValueT> {\n        return this.startAt(startIndexValue).endAt(endIndexValue); \n    }\n\n    /** \n     * Format the series for display as a string.\n     * This forces lazy evaluation to complete.\n     * \n     * @return Generates and returns a string representation of the series.\n     * \n     * @example\n     * <pre>\n     * \n     * console.log(series.toString());\n     * </pre>\n     */\n    toString (): string {\n\n        const header = [\"__index__\", \"__value__\"];\n        const rows = this.toPairs();\n\n        const table = new Table();\n        for (let rowIndex = 0; rowIndex < rows.length; ++rowIndex) {\n            const row = rows[rowIndex];\n            for (let cellIndex = 0; cellIndex < row.length; ++cellIndex) {\n                const cell = row[cellIndex];\n                table.cell(header[cellIndex], cell);\n            }\n            table.newRow();\n        }\n\n        return table.toString();\n    }\n\n    //\n    // Helper function to parse a string to an int.\n    //\n    static parseInt (value: any | undefined | null, valueIndex: number): number | undefined {\n        if (value === undefined || value === null) {\n            return undefined;\n        }\n        else {\n            if (!isString(value)) {\n                throw new Error(\"Called Series.parseInts, expected all values in the series to be strings, instead found a '\" + typeof(value) + \"' at index \" + valueIndex);\n            }\n\n            if (value.length === 0) {\n                return undefined;\n            }\n\n            return parseInt(value);\n        }\n    }\n\n    /**\n     * Parse a series with string values and convert it to a series with int values.\n     *\n     * @return Returns a new series with values parsed from strings to ints.\n     * \n     * @example\n     * <pre>\n     * \n     * const parsed = series.parseInts();\n     * </pre>\n     */\n    parseInts (): ISeries<IndexT, number> {\n        return <ISeries<IndexT, number>> this.select(Series.parseInt);\n    }\n\n    //\n    // Helper function to parse a string to a float.\n    //\n    static parseFloat (value: any | undefined | null, valueIndex: number): number | undefined {\n        if (value === undefined || value === null) {\n            return undefined;\n        }\n        else {\n            if (!isString(value)) throw new Error(\"Called Series.parseFloats, expected all values in the series to be strings, instead found a '\" + typeof(value) + \"' at index \" + valueIndex);\n\n            if (value.length === 0) {\n                return undefined;\n            }\n\n            return parseFloat(value);\n        }\n    }\n\n    /**\n     * Parse a series with string values and convert it to a series with float values.\n     *\n     * @return Returns a new series with values parsed from strings to floats.\n     * \n     * @example\n     * <pre>\n     * \n     * const parsed = series.parseFloats();\n     * </pre>\n     */\n    parseFloats (): ISeries<IndexT, number> {\n        return <ISeries<IndexT, number>> this.select(Series.parseFloat);\n    }\n\n    //\n    // Helper function to parse a string to a date.\n    //\n    static parseDate (value: any | undefined | null, valueIndex: number, formatString?: string): Date | undefined {\n        if (value === undefined || value === null) {\n            return undefined;\n        }\n        else {\n            if (!isString(value)) throw new Error(\"Called Series.parseDates, expected all values in the series to be strings, instead found a '\" + typeof(value) + \"' at index \" + valueIndex);\n\n            if (value.length === 0) {\n                return undefined;\n            }\n\n            return moment(value, formatString).toDate();\n        }\n    }\n\n    /**\n     * Parse a series with string values and convert it to a series with date values.\n     *\n     * @param formatString Optional formatting string for dates.\n     * \n     * Moment is used for date parsing.\n     * https://momentjs.com\n     * \n     * @return Returns a new series with values parsed from strings to dates.\n     * \n     * @example\n     * <pre>\n     * \n     * const parsed = series.parseDates();\n     * </pre>\n     */\n    parseDates (formatString?: string): ISeries<IndexT, Date> {\n\n        if (formatString) {\n            if (!isString(formatString)) throw new Error(\"Expected optional 'formatString' parameter to Series.parseDates to be a string (if specified).\");\n        }\n\n        return <ISeries<IndexT, Date>> this.select((value: any | undefined, valueIndex: number) => Series.parseDate(value, valueIndex, formatString));\n    }\n\n    //\n    // Helper function to convert a value to a string.\n    //\n    static toString(value: any | undefined | null, formatString?: string): string | undefined | null {\n        if (value === undefined) {\n            return undefined;\n        }\n        else if (value === null) {\n            return null;\n        }\n        else if (formatString && isDate(value)) {\n            return moment(value).format(formatString);\n        }\n        else if (formatString && isNumber(value)) {\n            return numeral(value).format(formatString);\n        }\n        else {\n            return value.toString();\t\n        }\t\t\n    }\n\n    /**\n     * Convert a series of values of different types to a series containing string values.\n     *\n     * @param formatString Optional formatting string for dates.\n     * \n     * Numeral.js is used for number formatting.\n     * http://numeraljs.com/\n     * \n     * Moment is used for date formatting.\n     * https://momentjs.com/docs/#/parsing/string-format/\n     * \n     * @return Returns a new series values converted from values to strings.\n     * \n     * @example\n     * <pre>\n     * \n     * const result = series.toStrings(\"YYYY-MM-DD\");\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const result = series.toStrings(\"0.00\");\n     * </pre>\n     */\n    toStrings (formatString?: string): ISeries<IndexT, string> {\n\n        if (formatString) {\n            if (!isString(formatString)) throw new Error(\"Expected optional 'formatString' parameter to Series.toStrings to be a string (if specified).\");\n        }\n\n        return <ISeries<IndexT, string>> this.select(value => Series.toString(value, formatString));\n    }\n\n    /**\n     * Forces lazy evaluation to complete and 'bakes' the series into memory.\n     * \n     * @return Returns a series that has been 'baked', all lazy evaluation has completed.\n     * \n     * @example\n     * <pre>\n     * \n     * const baked = series.bake();\n     * </pre>\n     */\n    bake (): ISeries<IndexT, ValueT> {\n\n        if (this.getContent().isBaked) {\n            // Already baked.\n            return this;\n        }\n\n        return new Series<IndexT, ValueT>({\n            values: this.toArray(),\n            pairs: this.toPairs(),\n            baked: true,\n        });\n    }\n\n    /** \n     * Converts (inflates) a series to a {@link DataFrame}.\n     *\n     * @param selector Optional user-defined selector function that transforms each value to produce the dataframe.\n     *\n     * @returns Returns a dataframe that was created from the original series.\n     * \n     * @example\n     * <pre>\n     * \n     * const dataframe = series.inflate(); // Inflate a series of objects to a dataframe.\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const dataframe = series.inflate(value => { AColumn:  value }); // Produces a dataframe with 1 column from a series of values.\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const dataframe = series.inflate(value => { AColumn:  value.NestedValue }); // Extract a nested value and produce a dataframe from it.\n     * </pre>\n     */\n    inflate<ToT = ValueT> (selector?: SelectorWithIndexFn<ValueT, ToT>): IDataFrame<IndexT, ToT> {\n\n        if (selector) {\n            if (!isFunction(selector)) throw new Error(\"Expected 'selector' parameter to Series.inflate to be a selector function.\");\n\n            return new DataFrame<IndexT, ToT>(() => {\n                const content = this.getContent();\n                return {\n                    values: new SelectIterable(content.values, selector),\n                    index: content.index,\n                    pairs: new SelectIterable(content.pairs, (pair: [IndexT, ValueT], index: number): [IndexT, ToT] => [pair[0], selector(pair[1], index)]),\n                };\n            });\n        }\n        else {\n            return new DataFrame<IndexT, ToT>(() => {\n                const content = this.getContent();\n                return {\n                    values: <Iterable<ToT>> <any> content.values,\n                    index: content.index,\n                    pairs: <Iterable<[IndexT, ToT]>> <any> content.pairs,\n                };\n            });\n        }\n    }\n\n    //\n    // For functions that work with a number series convert this series to a number series.\n    // Throws an error if anything other than a number is found.\n    //\n    private asNumberSeries(): ISeries<IndexT, number> {\n        //\n        // From here: http://stackoverflow.com/questions/5275115/add-a-median-method-to-a-list\n        //\n        // Have to assume we are working with a number series here.\n        const numberSeries = <ISeries<IndexT, number>> <any> this.filter(value => value !== null && value !== undefined);\n\n        if (numberSeries.any(value => typeof(value) !== \"number\")) {\n            throw new Error(`Expected series to contain only numbers, you should parse this series or filter out non-number values.`);\n        }\n\n        return numberSeries;\n    }\n\n    /**\n     * Static version of the sum function for use with {@link DataFrame.summarize} and {@link DataFrame.pivot} functions.\n     * \n     * @param series Input series to be summed.\n     * \n     * @returns Returns the sum of the number values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const summary = dataFrame.summarize({\n     *      ColumnToBeSummed: Series.sum,\n     * });\n     * </pre>\n     */\n    static sum<IndexT = any> (series: ISeries<IndexT, number>): number {\n        return series.sum();\n    }\n\n    /**\n     * Sum the values in a series and returns the result.\n     * \n     * @returns Returns the sum of the number values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const totalSales = salesFigures.sum();\n     * </pre>\n     */\n    sum (): number {\n\n        const numberSeries = this.asNumberSeries();\n        if (numberSeries.none()) {\n            return 0;\n        }\n\n        let total = 0;\n\n        for (const value of numberSeries) {\n            total += value;\n        }\n\n        return total;\n    }\n\n    /**\n     * Static version of the average function for use with {@link DataFrame.summarize} and {@link DataFrame.pivot} functions.\n     * \n     * @param series Input series to be averaged.\n     * \n     * @returns Returns the average of the number values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const summary = dataFrame.summarize({\n     *      ColumnToBeAveraged: Series.average,\n     * });\n     * </pre>\n     */\n    static average<IndexT = any> (series: ISeries<IndexT, number>): number {\n        return series.average();\n    }\n    \n    /**\n     * Average the values in a series and returns the result\n     *\n     * `average` is an alias of {@link Series.mean}.\n     *  \n     * @returns Returns the average of the number values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const averageSales = salesFigures.average();\n     * </pre>\n     */\n    average (): number {\n        return this.mean();\n    }\n\n    /**\n     * Static version of the mean function for use with {@link DataFrame.summarize} and {@link DataFrame.pivot} functions.\n     * \n     * @param series Input series for which to compute the mean.\n     * \n     * @returns Returns the mean of the number values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const summary = dataFrame.summarize({\n     *      ColumnToBeAveraged: Series.mean,\n     * });\n     * </pre>\n     */\n    static mean<IndexT = any> (series: ISeries<IndexT, number>): number {\n        return series.mean();\n    }\n     \n    /**\n     * Computes and returns the mean value of a set of values.\n     * \n     * @returns Returns the mean of the number values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const averageSales = salesFigures.mean();\n     * </pre>\n     */\n     mean (): number {\n\n        const numberSeries = this.asNumberSeries();\n        if (numberSeries.none()) {\n            return 0;\n        }\n\n        let total = 0;\n        let count = 0;\n\n        for (const value of numberSeries) {\n            count += 1;\n            total += value;\n        }\n\n        if (count === 0) {\n            return 0;\n        }\n\n        return total / count;\n     }\n\n    /**\n     * Static version of the median function for use with {@link DataFrame.summarize} and {@link DataFrame.pivot} functions.\n     * \n     * @param series Input series to find the median of.\n     * \n     * @returns Returns the median of the number values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const summary = dataFrame.summarize({\n     *      InputColumn: Series.median,\n     * });\n     * </pre>\n     */\n    static median<IndexT = any> (series: ISeries<IndexT, number>): number {\n        return series.median();\n    }\n\n    /**\n     * Get the median value in the series. \n     * Note that this sorts the series, which can be expensive.\n     * \n     * @returns Returns the median of the values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const medianSales = salesFigures.median();\n     * </pre>\n     */\n    median (): number {\n\n        const numberSeries = this.asNumberSeries();\n        const count = numberSeries.count();\n        if (count === 0) {\n            return 0;\n        }\n\n        const ordered = numberSeries.orderBy(value => value).toArray();\n        if ((count % 2) == 0) {\n            // Even.\n            const a = ordered[count / 2 - 1];\n            const b = ordered[count / 2];\n            return (a + b) / 2;\t\n        }\n\n        // Odd\n        return ordered[Math.floor(count / 2)];\n    }\n\n    /**\n     * Static version of the mode function for use with {@link DataFrame.summarize} and {@link DataFrame.pivot} functions.\n     * \n     * @param series Input series for which to find the mode.\n     * \n     * @returns Returns the mode of the number values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const summary = dataFrame.summarize({\n     *      InputColumn: Series.mode,\n     * });\n     * </pre>\n     */\n    static mode<IndexT = any> (series: ISeries<IndexT, any>): any {\n        return series.mode();\n    }\n\n    /**\n     * Get the mode of the values in the series. \n     * The mode is the most frequent value in the series.\n     * Note that this reads the entire series into memory, which can be expensive.\n     * \n     * @returns Returns the mode of the values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const modeSales = salesFigures.mode();\n     * </pre>\n     */\n    mode (): any {\n\n        const numberSeries = this.asNumberSeries();\n        if (numberSeries.none()) {\n            return undefined;\n        }\n\n        const lookup = new Map<any, number>();\n\n        for (const value of numberSeries) {\n            if (lookup.has(value))  {\n                lookup.set(value, lookup.get(value)! + 1);\n            }\n            else {\n                lookup.set(value, 1);\n            }\n        }\n\n        const entries = Array.from(lookup.entries());\n        entries.sort((a, b) => b[1] - a[1]);\n        return entries[0][0];\n    }\n\n    //\n    // Gets the sum of squares for the series (and the count).\n    //\n    private sumOfSquares (): [number, number] {\n\n        if (this.none()) {\n            return [0, 1];\n        }\n\n        const average = this.mean();\n        let sumOfSquaredDiffs = 0;\n        const numberSeries = this.asNumberSeries();\n        \n        let count = 0;\n        for (const value of numberSeries) {\n            count += 1;\n            const numberValue = value as any as number;\n            const diffFromMean = numberValue - average; // Assume input series are numbers.\n            const diffFromMeanSqr = diffFromMean * diffFromMean;\n            sumOfSquaredDiffs += diffFromMeanSqr;\n        }\n\n        return [sumOfSquaredDiffs, count];\n    }\n\n    /**\n     * Static version of the (population) variance function for use with {@link DataFrame.summarize} and {@link DataFrame.pivot} functions.\n     * \n     * @param series Input series for which to find the (population) variance.\n     * \n     * @returns Returns the (population) variance of the values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const summary = dataFrame.summarize({\n     *      InputColumn: Series.variance,\n     * });\n     * </pre>\n     */\n     static variance<IndexT = any> (series: ISeries<IndexT, number>): number {\n        return series.variance();\n    }\n    \n    /**\n     * Get the (population) variance of number values in the series. \n     * \n     * @returns Returns the (population) variance of the values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const salesVariance = salesFigures.variance();\n     * </pre>\n     */\n     variance (): number {\n\n        if (this.none()) {\n            return 0;\n        }\n\n        const [sumOfSquaredDiffs, count] = this.sumOfSquares();\n        return sumOfSquaredDiffs / count;\n    }\n\n    /**\n     * Static version of the (population) standard deviation function for use with {@link DataFrame.summarize} and {@link DataFrame.pivot} functions.\n     * \n     * @param series Input series for which to find the (population) standard deviation.\n     * \n     * @returns Returns the (population) standard deviation of the values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const summary = dataFrame.summarize({\n     *      InputColumn: Series.std,\n     * });\n     * </pre>\n     */\n    static std<IndexT = any> (series: ISeries<IndexT, number>): number {\n        return series.std();\n    }\n    \n    /**\n     * Get the (population) standard deviation of number values in the series. \n     * \n     * @returns Returns the (population) standard deviation of the values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const salesStdDev = salesFigures.std();\n     * </pre>\n     */\n    std (): number {\n\n        if (this.none()) {\n            return 0;\n        }\n\n        return Math.sqrt(this.variance());\n    }\n\n    /**\n     * Standardize a series of numbers by converting each \"standard deviations from the mean\".\n     * This converts the input series to Z scores using the population standard deviation.\n     * \n     * @returns A new series containing Z scores computed from the input series.\n     * \n     * @example\n     * <pre>\n     * \n     * const standardizedSeries = series.standardize();\n     * </pre>\n     */\n    standardize (): ISeries<IndexT, number> {\n        \n        if (this.none()) {\n            // There are no values in the input series.\n            return new Series<IndexT, number>();\n        }\n\n        const mean = this.mean();\n        const std = this.std();\n        if (std === 0) {\n            throw new Error(`Can't standardize a series that has no variation.`);\n        }\n\n        const numberSeries = this.asNumberSeries();\n        return numberSeries.map(value => {\n            const zScore = (value - mean) / std;\n            return zScore;\n        });\n    }\n\n    /**\n     * Static version of the (sample) variance function for use with {@link DataFrame.summarize} and {@link DataFrame.pivot} functions.\n     * \n     * @param series Input series for which to find the (sample) variance.\n     * \n     * @returns Returns the (sample) variance of the values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const summary = dataFrame.summarize({\n     *      InputColumn: Series.sampleVariance,\n     * });\n     * </pre>\n     */\n     static sampleVariance<IndexT = any> (series: ISeries<IndexT, number>): number {\n        return series.sampleVariance();\n    }\n    \n    /**\n     * Get the (sample) variance of number values in the series. \n     * \n     * @returns Returns the (sample) variance of the values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const salesVariance = salesFigures.variance();\n     * </pre>\n     */\n     sampleVariance (): number {\n\n        if (this.none()) {\n            return 0;\n        }\n\n        const [sumOfSquaredDiffs, count] = this.sumOfSquares();\n        return sumOfSquaredDiffs / (count - 1);\n    }\n\n    /**\n     * Static version of the (sample) standard deviation function for use with {@link DataFrame.summarize} and {@link DataFrame.pivot} functions.\n     * \n     * @param series Input series for which to find the (sample) standard deviation.\n     * \n     * @returns Returns the (sample) standard deviation of the values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const summary = dataFrame.summarize({\n     *      InputColumn: Series.sampleStd,\n     * });\n     * </pre>\n     */\n    static sampleStd<IndexT = any> (series: ISeries<IndexT, number>): number {\n        return series.sampleStd();\n    }\n    \n    /**\n     * Get the (sample) standard deviation of number values in the series. \n     * \n     * @returns Returns the (sample) standard deviation of the values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const salesStdDev = salesFigures.sampleStd();\n     * </pre>\n     */\n    sampleStd (): number {\n\n        if (this.none()) {\n            return 0;\n        }\n\n        return Math.sqrt(this.sampleVariance());\n    }\n\n    /**\n     * Standardize a series of numbers by converting each \"standard deviations from the mean\".\n     * This converts the input series to Z scores using the sample standard deviation.\n     * \n     * @returns A new series containing Z scores computed from the input series.\n     * \n     * @example\n     * <pre>\n     * \n     * const standardizedSeries = series.sampleStandardize();\n     * </pre>\n     */\n    sampleStandardize (): ISeries<IndexT, number> {\n        \n        if (this.none()) {\n            // There are no values in the input series.\n            return new Series<IndexT, number>();\n        }\n\n        const mean = this.mean();\n        const std = this.sampleStd();\n        if (std === 0) {\n            throw new Error(`Can't standardize a series that has no variation.`);\n        }\n\n        const numberSeries = this.asNumberSeries();\n        return numberSeries.map(value => {\n            const zScore = (value - mean) / std;\n            return zScore;\n        });\n    }\n\n    /**\n     * Static version of the min function for use with {@link DataFrame.summarize} and {@link DataFrame.pivot} functions.\n     * \n     * @param series Input series to find the minimum of.\n     * \n     * @returns Returns the minimum of number values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const summary = dataFrame.summarize({\n     *      Column: Series.min,\n     * });\n     * </pre>\n     */\n    static min<IndexT = any> (series: ISeries<IndexT, number>): number {\n        return series.min();\n    }\n\n    /**\n     * Get the min value in the series.\n     * \n     * @returns Returns the minimum of the number values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const minSales = salesFigures.min();\n     * </pre>\n     */\n    min (): number {\n\n        let min: number | undefined;\n\n        for (const value of this.asNumberSeries()) {\n            if (min === undefined) {\n                min = value;\n            }\n            else {\n                min = Math.min(min, value);\n            }\n        }\n\n        if (min === undefined) {\n            return 0;\n        }\n\n        return min;\n    }\n\n    /**\n     * Static version of the max function for use with {@link DataFrame.summarize} and {@link DataFrame.pivot} functions.\n     * \n     * @param series Input series to find the maximum of.\n     * \n     * @returns Returns the maximum of number values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const summary = dataFrame.summarize({\n     *      Column: Series.max,\n     * });\n     * </pre>\n     */\n    static max<IndexT = any> (series: ISeries<IndexT, number>): number {\n        return series.max();\n    }\n    \n    /**\n     * Get the max value in the series.\n     * \n     * @returns Returns the maximum of the number values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const maxSales = salesFigures.max();\n     * </pre>\n     */\n    max (): number {\n\n        let max: number | undefined;\n\n        for (const value of this.asNumberSeries()) {\n            if (max === undefined) {\n                max = value;\n            }\n            else {\n                max = Math.max(max, value);\n            }\n        }\n\n        if (max === undefined) {\n            return 0;\n        }\n\n        return max;\n    }\n\n    /**\n     * Static version of the range function for use with {@link DataFrame.summarize} and {@link DataFrame.pivot} functions.\n     * \n     * @param series Input series for which to find the range of values.\n     * \n     * @returns Returns the range of number values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const summary = dataFrame.summarize({\n     *      Column: Series.range,\n     * });\n     * </pre>\n     */\n    static range<IndexT = any> (series: ISeries<IndexT, number>): number {\n        return series.range();\n    }\n    \n    /**\n     * Get the range of values in the series.\n     * \n     * @returns Returns the range of the number values in the series.\n     * \n     * @example\n     * <pre>\n     * \n     * const range = salesFigures.range();\n     * </pre>\n     */\n    range (): number {\n        return this.max() - this.min();\n    }\n    \n    /**\n     * Invert the sign of every number value in the series.\n     * This assumes that the input series contains numbers.\n     * \n     * @returns Returns a new series with all number values inverted.\n     * \n     * @example\n     * <pre>\n     * \n     * const inverted = series.invert();\n     * </pre>\n     */\n    invert (): ISeries<IndexT, number> {\n        return this\n            .asNumberSeries()\n            .select(value => {\n                return -value;\n            }); \n    }\n\n    /**\n     * Counts the number of sequential values where the predicate evaluates to truthy.\n     * Outputs 0 for values when the predicate evaluates to falsy.\n     * \n     * @param predicate User-defined function. Should evaluate to truthy to activate the counter or falsy to deactivate it.\n     * \n     * @returns Returns a new series that counts up the number of sequential values where the predicate evaluates to truthy. 0 values appear when the prediate evaluates to falsy.\n     * \n     * @example\n     * <pre>\n     * \n     * const series = new Series([ 1, 10, 3, 15, 8, 5 ]);\n     * const counted = series.counter(value => value >= 3);\n     * console.log(counted.toString());\n     * </pre>\n     */\n    counter (predicate: PredicateFn<ValueT>): ISeries<IndexT, number> {\n        return this.groupSequentialBy(predicate)\n            .selectMany((group, i) => {\n                if (predicate(group.first())) {\n                    // This group matches the predicate.\n                    return range(1, group.count())\n                        .withIndex(group.getIndex())\n                        .toPairs(); //TODO: selectMany wipes the index. It needs to respect it!\n                }\n                else {\n                    // This group doesn't match the predicate.\n                    return replicate(0, group.count())\n                        .withIndex(group.getIndex())\n                        .toPairs(); //TODO: selectMany wipes the index. It needs to respect it!\n                }\n            }) \n            .withIndex(pair => pair[0])\n            .select(pair => pair[1]) as any as ISeries<IndexT, number>;\n    }\n    \n    /** \n     * Gets a new series in reverse order.\n     * \n     * @return Returns a new series that is the reverse of the original.\n     * \n     * @example\n     * <pre>\n     * \n     * const reversed = series.reverse();\n     * </pre>\n     */\n    reverse (): ISeries<IndexT, ValueT> {\n\n        return new Series<IndexT, ValueT>(() => ({\n            values: new ReverseIterable(this.getContent().values),\n            index: new ReverseIterable(this.getContent().index),\n            pairs: new ReverseIterable(this.getContent().pairs)\n        }));\n    }\n\n    /**\n     * Returns only the set of values in the series that are distinct.\n     * Provide a user-defined selector to specify criteria for determining the distinctness.\n     * This can be used to remove duplicate values from the series.\n     *\n     * @param selector Optional user-defined selector function that specifies the criteria used to make comparisons for duplicate values.\n     * \n     * @return Returns a series containing only unique values in the series. \n     * \n     * @example\n     * <pre>\n     * \n     * const uniqueValues = series.distinct(); // Get only non-duplicated value in the series.\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const bucketedValues = series.distinct(value => Math.floor(value / 10)); // Lump values into buckets of 10.\n     * </pre>\n     */\n    distinct<ToT> (selector?: SelectorFn<ValueT, ToT>): ISeries<IndexT, ValueT> {\n\n        return new Series<IndexT, ValueT>(() => ({\n            values: new DistinctIterable<ValueT, ToT>(this.getContent().values, selector),\n            pairs: new DistinctIterable<[IndexT, ValueT],ToT>(this.getContent().pairs, (pair: [IndexT, ValueT]): ToT => selector && selector(pair[1]) || <ToT> <any> pair[1])\n        }));\n    }\n\n    /**\n     * Collects values in the series into a new series of groups according to a user-defined selector function.\n     *\n     * @param selector User-defined selector function that specifies the criteriay to group by.\n     *\n     * @return Returns a new series of groups. Each group is a series with values that have been grouped by the 'selector' function.\n     * \n     * @example\n     * <pre>\n     * \n     * const sales = ... product sales ...\n     * const salesByProduct = sales.groupBy(sale => sale.ProductId);\n     * for (const productSalesGroup of salesByProduct) {\n     *      // ... do something with each product group ...\n     *      const productId = productSalesGroup.first().ProductId;\n     *      const totalSalesForProduct = productSalesGroup.deflate(sale => sale.Amount).sum();\n     *      console.log(totalSalesForProduct);\n     * }\n     * </pre>\n     */\n    groupBy<GroupT> (selector: SelectorWithIndexFn<ValueT, GroupT>): ISeries<number, ISeries<IndexT, ValueT>> {\n\n        if (!isFunction(selector)) throw new Error(\"Expected 'selector' parameter to 'Series.groupBy' to be a selector function that determines the value to group the series by.\");\n\n        return new Series<number, ISeries<IndexT, ValueT>>(() => {\n            const groups: any[] = []; // Each group, in order of discovery.\n            const groupMap: any = {}; // Group map, records groups by key.\n            \n            let valueIndex = 0;\n    \n            for (const pair of this.getContent().pairs) {\n                const groupKey = selector(pair[1], valueIndex);\n                ++valueIndex;\n                const existingGroup = groupMap[groupKey];\n                if (existingGroup) {\n                    existingGroup.push(pair);\n                }\n                else {\n                    const newGroup: any[] = [];\n                    newGroup.push(pair);\n                    groups.push(newGroup);\n                    groupMap[groupKey] = newGroup;\n                }\n            }\n\n            return {\n                values: groups.map(group => new Series<IndexT, ValueT>({ pairs: group }))\n            };            \n        });\n    }\n    \n    /**\n     * Collects values in the series into a new series of groups based on if the values are the same or according to a user-defined selector function.\n     *\n     * @param selector Optional selector that specifies the criteria for grouping.\n     *\n     * @return Returns a new series of groups. Each group is a series with values that are the same or have been grouped by the 'selector' function.\n     * \n     * @example\n     * <pre>\n     * \n     * // Some ultra simple stock trading strategy backtesting...\n     * const dailyStockPrice = ... daily stock price for a company ...\n     * const priceGroups  = dailyStockPrice.groupBy(day => day.close > day.movingAverage);\n     * for (const priceGroup of priceGroups) {\n     *      // ... do something with each stock price group ...\n     * \n     *      const firstDay = priceGroup.first();\n     *      if (firstDay.close > movingAverage) {\n     *          // This group of days has the stock price above its moving average.\n     *          // ... maybe enter a long trade here ...\n     *      }\n     *      else {\n     *          // This group of days has the stock price below its moving average.\n     *          // ... maybe enter a short trade here ...\n     *      }\n     * }\n     * </pre>\n     */    \n    groupSequentialBy<GroupT> (selector?: SelectorFn<ValueT, GroupT>): ISeries<number, ISeries<IndexT, ValueT>> {\n\n        if (selector) {\n            if (!isFunction(selector)) throw new Error(\"Expected 'selector' parameter to 'Series.groupSequentialBy' to be a selector function that determines the value to group the series by.\")\n        }\n        else {\n            selector = value => <GroupT> <any> value;\n        }\n        \n        return this.variableWindow((a: ValueT, b: ValueT): boolean => selector!(a) === selector!(b));\n    }\n\n    /**\n     * Concatenate multiple series into a single series.\n     *\n     * @param series - Array of series to concatenate.\n     * \n     * @returns Returns a single series concatenated from multiple input series. \n     */\n    static concat<IndexT = any, ValueT = any> (series: ISeries<IndexT, ValueT>[]): ISeries<IndexT, ValueT> {\n        if (!isArray(series)) throw new Error(\"Expected 'series' parameter to 'Series.concat' to be an array of series.\");\n\n        return new Series(() => {\n            const upcast = <Series<IndexT, ValueT>[]> series; // Upcast so that we can access private index, values and pairs.\n            const contents = upcast.map(series => series.getContent());\n            return {\n                values: new ConcatIterable(contents.map(content => content.values)),\n                pairs: new ConcatIterable(contents.map(content => content.pairs)),\n            };\n        });\n    }\n    \n    /**\n     * Concatenate multiple other series onto this series.\n     * \n     * @param series Multiple arguments. Each can be either a series or an array of series.\n     * \n     * @return Returns a single series concatenated from multiple input series. \n     * \n     * @example\n     * <pre>\n     * \n     * const concatenated = a.concat(b);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const concatenated = a.concat(b, c);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const concatenated = a.concat([b, c]);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const concatenated = a.concat(b, [c, d]);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const otherSeries = [... array of series...];\n     * const concatenated = a.concat(otherSeries);\n     * </pre>\n     */    \n    concat (...series: (ISeries<IndexT, ValueT>[]|ISeries<IndexT, ValueT>)[]): ISeries<IndexT, ValueT> {\n        const concatInput: ISeries<IndexT, ValueT>[] = [this];\n\n        for (const input of series) {\n            if (isArray(input)) {\n                for (const subInput of input) {\n                    concatInput.push(subInput);\n                }\n            }\n            else {\n                concatInput.push(input);\n            }\n        }\n\n        return Series.concat<IndexT, ValueT>(concatInput);\n    }\n   \n    /**\n    * Zip together multiple series to create a new series.\n    * Preserves the index of the first series.\n    *\n    * @param series - An iterable of series to be zipped.\n    * @param zipper - Selector function that produces a new series based on the input series.\n    * \n    * @returns Returns a single series zipped from multiple input series. \n    */\n    static zip<IndexT = any, ValueT = any, ResultT = any> (series: Iterable<ISeries<IndexT, ValueT>>, zipper: ZipNFn<ValueT, ResultT>): ISeries<IndexT, ResultT> {\n\n        const input = Array.from(series);\n\n        if (input.length === 0) {\n            return new Series<IndexT, ResultT>();\n        }\n\n        const firstSeries = input[0];\n        if (firstSeries.none()) {\n            return new Series<IndexT, ResultT>();\n        }\n\n        return new Series<IndexT, ResultT>(() => {\n            const firstSeriesUpCast = <Series<IndexT, ValueT>> firstSeries;\n            const upcast = <Series<IndexT, ValueT>[]> input; // Upcast so that we can access private index, values and pairs.\n            \n            return {\n                index: <Iterable<IndexT>> firstSeriesUpCast.getContent().index,\n                values: new ZipIterable<ValueT, ResultT>(upcast.map(s => s.getContent().values), zipper),\n            };\n        });\n    }\n    \n    /**\n    * Merge together multiple series to create a new series.\n    * Preserves the index of the first series.\n    * \n    * @param s2, s3, s4, s4 Multiple series to zip.\n    * @param zipper User-defined zipper function that merges rows. It produces values for the new series based-on values from the input series.\n    * \n    * @return Returns a single series merged from multiple input series. \n    * \n    * @example\n    * <pre>\n    * \n    * const a = new Series([1, 2, 3]);\n    * const b = new Series([10, 20, 30]);\n    * const zipped = a.zip(b (valueA, valueB) => valueA + valueB);\n    * </pre>\n    */    \n    zip<Index2T, Value2T, ResultT>  (s2: ISeries<Index2T, Value2T>, zipper: Zip2Fn<ValueT, Value2T, ResultT> ): ISeries<IndexT, ResultT>;\n    zip<Index2T, Value2T, Index3T, Value3T, ResultT>  (s2: ISeries<Index2T, Value2T>, s3: ISeries<Index3T, Value3T>, zipper: Zip3Fn<ValueT, Value2T, Value3T, ResultT> ): ISeries<IndexT, ResultT>;\n    zip<Index2T, Value2T, Index3T, Value3T, Index4T, Value4T, ResultT>  (s2: ISeries<Index2T, Value2T>, s3: ISeries<Index3T, Value3T>, s4: ISeries<Index4T, Value4T>, zipper: Zip3Fn<ValueT, Value2T, Value3T, ResultT> ): ISeries<IndexT, ResultT>;\n    zip<ResultT>  (...args: any[]): ISeries<IndexT, ResultT> {\n\n        const selector: Function = args[args.length-1];\n        const input: ISeries<IndexT, any>[] = [this].concat(args.slice(0, args.length-1));\n        return Series.zip<IndexT, any, ResultT>(input, values => selector(...values));\n    }    \n\n    /**\n     * Sorts the series in ascending order by a value defined by the user-defined selector function. \n     * \n     * @param selector User-defined selector function that selects the value to sort by.\n     * \n     * @return Returns a new series that has been ordered accorrding to the value chosen by the selector function. \n     * \n     * @example\n     * <pre>\n     * \n     * const orderedSeries = series.orderBy(value => value); \n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const orderedSeries = series.orderBy(value => value.NestedValue); \n     * </pre>\n     */\n    orderBy<SortT> (selector: SelectorWithIndexFn<ValueT, SortT>): IOrderedSeries<IndexT, ValueT, SortT> {\n        const content = this.getContent();\n        return new OrderedSeries<IndexT, ValueT, SortT>({\n            values: content.values, \n            pairs: content.pairs, \n            selector: selector, \n            direction: Direction.Ascending, \n            parent: null,\n        });\n    }\n\n    /**\n     * Sorts the series in descending order by a value defined by the user-defined selector function. \n     * \n     * @param selector User-defined selector function that selects the value to sort by.\n     * \n     * @return Returns a new series that has been ordered accorrding to the value chosen by the selector function. \n     * \n     * @example\n     * <pre>\n     * \n     * const orderedSeries = series.orderByDescending(value => value); \n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const orderedSeries = series.orderByDescending(value => value.NestedValue); \n     * </pre>\n     */\n    orderByDescending<SortT> (selector: SelectorWithIndexFn<ValueT, SortT>): IOrderedSeries<IndexT, ValueT, SortT> {\n        const content = this.getContent();\n        return new OrderedSeries<IndexT, ValueT, SortT>({\n            values: content.values, \n            pairs: content.pairs, \n            selector: selector, \n            direction: Direction.Descending, \n            parent: null,\n        });\n    }\n        \n    /**\n     * Creates a new series by merging two input dataframes.\n     * The resulting series contains the union of value from the two input series.\n     * These are the unique combination of values in both series.\n     * This is basically a concatenation and then elimination of duplicates.\n     *\n     * @param other The other series to merge.\n     * @param selector Optional user-defined selector function that selects the value to compare to determine distinctness.\n     * \n     * @return Returns the union of the two series.\n     * \n     * @example\n     * <pre>\n     *\n     * const seriesA = ...\n     * const seriesB = ...\n     * const merged = seriesA.union(seriesB);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     *\n     * // Merge two sets of customer records that may contain the same\n     * // customer record in each set. This is basically a concatenation\n     * // of the series and then an elimination of any duplicate records\n     * // that result.\n     * const customerRecordsA = ...\n     * const customerRecordsB = ...\n     * const mergedCustomerRecords = customerRecordsA.union(\n     *      customerRecordsB, \n     *      customerRecord => customerRecord.CustomerId\n     * );\n     * </pre>\n     * \n     * \n     * @example\n     * <pre>\n     *\n     * // Note that you can achieve the exact same result as the previous\n     * // example by doing a {@link Series.concat) and {@link Series.distinct}\n     * // of the input series and then an elimination of any duplicate records\n     * // that result.\n     * const customerRecordsA = ...\n     * const customerRecordsB = ...\n     * const mergedCustomerRecords = customerRecordsA\n     *      .concat(customerRecordsB)\n     *      .distinct(customerRecord => customerRecord.CustomerId);\n     * </pre>\n     * \n     */\n    union<KeyT = ValueT> (\n        other: ISeries<IndexT, ValueT>, \n        selector?: SelectorFn<ValueT, KeyT>): \n            ISeries<IndexT, ValueT> {\n\n        if (selector) {\n            if (!isFunction(selector)) throw new Error(\"Expected optional 'selector' parameter to 'Series.union' to be a selector function.\");\n        }\n\n        return this.concat(other).distinct(selector);\n    }\n\n    /**\n     * Creates a new series by merging two input series.\n     * The resulting series contains the intersection of values from the two input series.\n     * These are only the values that appear in both series.\n     *\n     * @param inner The inner series to merge (the series you call the function on is the 'outer' series).\n     * @param outerSelector Optional user-defined selector function that selects the key from the outer series that is used to match the two series.\n     * @param innerSelector Optional user-defined selector function that selects the key from the inner series that is used to match the two series.\n     * \n     * @return Returns a new series that contains the intersection of values from the two input series.\n     * \n     * @example\n     * <pre>\n     * \n     * const seriesA = ...\n     * const seriesB = ...\n     * const mergedDf = seriesA.intersection(seriesB);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     *\n     * // Merge two sets of customer records to find only the\n     * // customers that appears in both.\n     * const customerRecordsA = ...\n     * const customerRecordsB = ...\n     * const intersectionOfCustomerRecords = customerRecordsA.intersection(\n     *      customerRecordsB, \n     *      customerRecord => customerRecord.CustomerId\n     * );\n     * </pre>     \n     */    \n    intersection<InnerIndexT = IndexT, InnerValueT = ValueT, KeyT = ValueT> (\n        inner: ISeries<InnerIndexT, InnerValueT>, \n        outerSelector?: SelectorFn<ValueT, KeyT>,\n        innerSelector?: SelectorFn<InnerValueT, KeyT>): \n            ISeries<IndexT, ValueT> {\n\n        if (outerSelector) {\n            if (!isFunction(outerSelector)) throw new Error(\"Expected optional 'outerSelector' parameter to 'Series.intersection' to be a function.\");\n        }\n        else {\n            outerSelector = value => <KeyT> <any> value;\n        }\n        \n        if (innerSelector) {\n            if (!isFunction(innerSelector)) throw new Error(\"Expected optional 'innerSelector' parameter to 'Series.intersection' to be a function.\");\n        }\n        else {\n            innerSelector = value => <KeyT> <any> value;\n        }\n\n        const outer = this;\n        return outer.filter(outerValue => {\n                const outerKey = outerSelector!(outerValue);\n                return inner\n                    .filter(innerValue => outerKey === innerSelector!(innerValue))\n                    .any();\n            });\n    }\n\n    /**\n     * Creates a new series by merging two input series.\n     * The resulting series contains only the values from the 1st series that don't appear in the 2nd series.\n     * This is essentially subtracting the values from the 2nd series from the 1st and creating a new series with the remaining values.\n     *\n     * @param inner The inner series to merge (the series you call the function on is the 'outer' series).\n     * @param outerSelector Optional user-defined selector function that selects the key from the outer series that is used to match the two series.\n     * @param innerSelector Optional user-defined selector function that selects the key from the inner series that is used to match the two series.\n     * \n     * @return Returns a new series that contains only the values from the 1st series that don't appear in the 2nd series.\n     * \n     * @example\n     * <pre>\n     * \n     * const seriesA = ...\n     * const seriesB = ...\n     * const remainingDf = seriesA.except(seriesB);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     *\n     * // Find the list of customers haven't bought anything recently.\n     * const allCustomers = ... list of all customers ...\n     * const recentCustomers = ... list of customers who have purchased recently ...\n     * const remainingCustomers = allCustomers.except(\n     *      recentCustomers, \n     *      customerRecord => customerRecord.CustomerId\n     * );\n     * </pre>\n     */    \n    except<InnerIndexT = IndexT, InnerValueT = ValueT, KeyT = ValueT> (\n        inner: ISeries<InnerIndexT, InnerValueT>, \n        outerSelector?: SelectorFn<ValueT, KeyT>,\n        innerSelector?: SelectorFn<InnerValueT, KeyT>): \n            ISeries<IndexT, ValueT> {\n\n        if (outerSelector) {\n            if (!isFunction(outerSelector)) throw new Error(\"Expected optional 'outerSelector' parameter to 'Series.except' to be a function.\");\n        }\n        else {\n            outerSelector = value => <KeyT> <any> value;\n        }\n\n        if (innerSelector) {\n            if (!isFunction(innerSelector)) throw new Error(\"Expected optional 'innerSelector' parameter to 'Series.except' to be a function.\");\n        }\n        else {\n            innerSelector = value => <KeyT> <any> value;\n        }\n\n        const outer = this;\n        return outer.filter(outerValue => {\n                const outerKey = outerSelector!(outerValue);\n                return inner\n                    .filter(innerValue => outerKey === innerSelector!(innerValue))\n                    .none();\n            });\n    }\n\n   /**\n     * Creates a new series by merging two input series.\n     * The resulting dataframe contains only those value that have matching keys in both input series.\n     *\n     * @param inner The 'inner' series to join (the series you are callling the function on is the 'outer' series).\n     * @param outerKeySelector User-defined selector function that chooses the join key from the outer series.\n     * @param innerKeySelector User-defined selector function that chooses the join key from the inner series.\n     * @param resultSelector User-defined function that merges outer and inner values.\n     * \n     * @return Returns the new merged series.\n     * \n     * @example\n     * <pre>\n     * \n     * // Join together two sets of customers to find those\n     * // that have bought both product A and product B.\n     * const customerWhoBoughtProductA = ...\n     * const customerWhoBoughtProductB = ...\n     * const customersWhoBoughtBothProductsDf = customerWhoBoughtProductA.join(\n     *          customerWhoBoughtProductB,\n     *          customerA => customerA.CustomerId, // Join key.\n     *          customerB => customerB.CustomerId, // Join key.\n     *          (customerA, customerB) => {\n     *              return {\n     *                  // ... merge the results ...\n     *              };\n     *          }\n     *      );\n     * </pre>\n     */\n    join<KeyT, InnerIndexT, InnerValueT, ResultValueT> (\n        inner: ISeries<InnerIndexT, InnerValueT>, \n        outerKeySelector: SelectorFn<ValueT, KeyT>, \n        innerKeySelector: SelectorFn<InnerValueT, KeyT>, \n        resultSelector: JoinFn<ValueT, InnerValueT, ResultValueT>):\n            ISeries<number, ResultValueT> {\n\n        if (!isFunction(outerKeySelector)) throw new Error(\"Expected 'outerKeySelector' parameter of 'Series.join' to be a selector function.\");\n        if (!isFunction(innerKeySelector)) throw new Error(\"Expected 'innerKeySelector' parameter of 'Series.join' to be a selector function.\");\n        if (!isFunction(resultSelector)) throw new Error(\"Expected 'resultSelector' parameter of 'Series.join' to be a selector function.\");\n\n        const outer = this;\n\n        return new Series<number, ResultValueT>(() => {\n            const innerMap = inner\n                .groupBy(innerKeySelector)\n                .toObject(\n                    group => innerKeySelector(group.first()), \n                    group => group\n                );\n\n            const outerContent = outer.getContent();\n\n            const output: ResultValueT[] = [];\n            \n            for (const outerValue of outer) { //TODO: There should be an enumerator that does this.\n                const outerKey = outerKeySelector(outerValue);\n                const innerGroup = innerMap[outerKey];\n                if (innerGroup) {\n                    for (const innerValue of innerGroup) {\n                        output.push(resultSelector(outerValue, innerValue));\n                    }    \n                }\n            }\n\n            return {\n                values: output\n            };\n        });\n    }\n\n    /**\n     * Creates a new series by merging two input series.\n     * The resulting series contains only those values that are only present in one or the other of the series, not both.\n     *\n     * @param inner The 'inner' series to join (the series you are callling the function on is the 'outer' series).\n     * @param outerKeySelector User-defined selector function that chooses the join key from the outer series.\n     * @param innerKeySelector User-defined selector function that chooses the join key from the inner series.\n     * @param resultSelector User-defined function that merges outer and inner values.\n     * \n     * Implementation from here:\n     * \n     * \thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n     * \n     * @return Returns the new merged series.\n     * \n     * @example\n     * <pre>\n     * \n     * // Join together two sets of customers to find those\n     * // that have bought either product A or product B, not not both.\n     * const customerWhoBoughtProductA = ...\n     * const customerWhoBoughtProductB = ...\n     * const customersWhoBoughtEitherProductButNotBothDf = customerWhoBoughtProductA.joinOuter(\n     *          customerWhoBoughtProductB,\n     *          customerA => customerA.CustomerId, // Join key.\n     *          customerB => customerB.CustomerId, // Join key.\n     *          (customerA, customerB) => {\n     *              return {\n     *                  // ... merge the results ...\n     *              };\n     *          }\n     *      );\n     * </pre>\n     */    \n    joinOuter<KeyT, InnerIndexT, InnerValueT, ResultValueT> (\n        inner: ISeries<InnerIndexT, InnerValueT>, \n        outerKeySelector: SelectorFn<ValueT, KeyT>, \n        innerKeySelector: SelectorFn<InnerValueT, KeyT>, \n        resultSelector: JoinFn<ValueT | null, InnerValueT | null, ResultValueT>):\n            ISeries<number, ResultValueT> {\n\n        if (!isFunction(outerKeySelector)) throw new Error(\"Expected 'outerKeySelector' parameter of 'Series.joinOuter' to be a selector function.\");\n        if (!isFunction(innerKeySelector)) throw new Error(\"Expected 'innerKeySelector' parameter of 'Series.joinOuter' to be a selector function.\");\n        if (!isFunction(resultSelector)) throw new Error(\"Expected 'resultSelector' parameter of 'Series.joinOuter' to be a selector function.\");\n\n        // Get the results in the outer that are not in the inner.\n        const outer = this;\n        const outerResult = outer.except<InnerIndexT, InnerValueT, KeyT>(inner, outerKeySelector, innerKeySelector)\n            .select(outer => resultSelector(outer, null))\n            .resetIndex();\n\n        // Get the results in the inner that are not in the outer.\n        const innerResult = inner.except<IndexT, ValueT, KeyT>(outer, innerKeySelector, outerKeySelector)\n            .select(inner => resultSelector(null, inner))\n            .resetIndex();\n\n        // Get the intersection of results between inner and outer.\n        const intersectionResults = outer.join<KeyT, InnerIndexT, InnerValueT, ResultValueT>(inner, outerKeySelector, innerKeySelector, resultSelector);\n\n        return outerResult\n            .concat(intersectionResults)\n            .concat(innerResult)\n            .resetIndex();\n    }\n\n    /**\n     * Creates a new series by merging two input series.\n     * The resulting series contains only those values that are present either in both series or only in the outer (left) series.\n     * \n     * @param inner The 'inner' series to join (the series you are callling the function on is the 'outer' series).\n     * @param outerKeySelector User-defined selector function that chooses the join key from the outer series.\n     * @param innerKeySelector User-defined selector function that chooses the join key from the inner series.\n     * @param resultSelector User-defined function that merges outer and inner values.\n     * \n     * Implementation from here:\n     * \n     * \thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n     * \n     * @return Returns the new merged series.\n     * \n     * @example\n     * <pre>\n     * \n     * // Join together two sets of customers to find those\n     * // that have bought either just product A or both product A and product B.\n     * const customerWhoBoughtProductA = ...\n     * const customerWhoBoughtProductB = ...\n     * const boughtJustAorAandB = customerWhoBoughtProductA.joinOuterLeft(\n     *          customerWhoBoughtProductB,\n     *          customerA => customerA.CustomerId, // Join key.\n     *          customerB => customerB.CustomerId, // Join key.\n     *          (customerA, customerB) => {\n     *              return {\n     *                  // ... merge the results ...\n     *              };\n     *          }\n     *      );\n     * </pre>\n     */\n    joinOuterLeft<KeyT, InnerIndexT, InnerValueT, ResultValueT> (\n        inner: ISeries<InnerIndexT, InnerValueT>, \n        outerKeySelector: SelectorFn<ValueT, KeyT>, \n        innerKeySelector: SelectorFn<InnerValueT, KeyT>, \n        resultSelector: JoinFn<ValueT | null, InnerValueT | null, ResultValueT>):\n            ISeries<number, ResultValueT> {\n\n        if (!isFunction(outerKeySelector)) throw new Error(\"Expected 'outerKeySelector' parameter of 'Series.joinOuterLeft' to be a selector function.\");\n        if (!isFunction(innerKeySelector)) throw new Error(\"Expected 'innerKeySelector' parameter of 'Series.joinOuterLeft' to be a selector function.\");\n        if (!isFunction(resultSelector)) throw new Error(\"Expected 'resultSelector' parameter of 'Series.joinOuterLeft' to be a selector function.\");\n\n        // Get the results in the outer that are not in the inner.\n        const outer = this;\n        const outerResult = outer.except<InnerIndexT, InnerValueT, KeyT>(inner, outerKeySelector, innerKeySelector)\n            .select(outer => resultSelector(outer, null))\n            .resetIndex();\n\n        // Get the intersection of results between inner and outer.\n        const intersectionResults = outer.join<KeyT, InnerIndexT, InnerValueT, ResultValueT>(inner, outerKeySelector, innerKeySelector, resultSelector);\n\n        return outerResult\n            .concat(intersectionResults)\n            .resetIndex();\n    }\n\n    /**\n     * Creates a new series by merging two input series.\n     * The resulting series contains only those values that are present either in both series or only in the inner (right) series.\n     *\n     * @param inner The 'inner' series to join (the series you are callling the function on is the 'outer' series).\n     * @param outerKeySelector User-defined selector function that chooses the join key from the outer series.\n     * @param innerKeySelector User-defined selector function that chooses the join key from the inner series.\n     * @param resultSelector User-defined function that merges outer and inner values.\n     * \n     * Implementation from here:\n     * \n     * \thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n     * \n     * @return Returns the new merged series.\n     * \n     * @example\n     * <pre>\n     * \n     * // Join together two sets of customers to find those\n     * // that have bought either just product B or both product A and product B.\n     * const customerWhoBoughtProductA = ...\n     * const customerWhoBoughtProductB = ...\n     * const boughtJustAorAandB = customerWhoBoughtProductA.joinOuterRight(\n     *          customerWhoBoughtProductB,\n     *          customerA => customerA.CustomerId, // Join key.\n     *          customerB => customerB.CustomerId, // Join key.\n     *          (customerA, customerB) => {\n     *              return {\n     *                  // ... merge the results ...\n     *              };\n     *          }\n     *      );\n     * </pre>\n     */\n    joinOuterRight<KeyT, InnerIndexT, InnerValueT, ResultValueT> (\n        inner: ISeries<InnerIndexT, InnerValueT>, \n        outerKeySelector: SelectorFn<ValueT, KeyT>, \n        innerKeySelector: SelectorFn<InnerValueT, KeyT>, \n        resultSelector: JoinFn<ValueT | null, InnerValueT | null, ResultValueT>):\n            ISeries<number, ResultValueT> {\n\n        if (!isFunction(outerKeySelector)) throw new Error(\"Expected 'outerKeySelector' parameter of 'Series.joinOuterRight' to be a selector function.\");\n        if (!isFunction(innerKeySelector)) throw new Error(\"Expected 'innerKeySelector' parameter of 'Series.joinOuterRight' to be a selector function.\");\n        if (!isFunction(resultSelector)) throw new Error(\"Expected 'resultSelector' parameter of 'Series.joinOuterRight' to be a selector function.\");\n\n        // Get the results in the inner that are not in the outer.\n        const outer = this;\n        const innerResult = inner.except<IndexT, ValueT, KeyT>(outer, innerKeySelector, outerKeySelector)\n            .select(inner => resultSelector(null, inner))\n            .resetIndex();\n\n        // Get the intersection of results between inner and outer.\n        const intersectionResults = outer.join<KeyT, InnerIndexT, InnerValueT, ResultValueT>(inner, outerKeySelector, innerKeySelector, resultSelector);\n\n        return intersectionResults\n            .concat(innerResult)\n            .resetIndex();\n    }    \n\n    /**\n     * Produces a new series with all string values truncated to the requested maximum length.\n     *\n     * @param maxLength - The maximum length of the string values after truncation.\n     * \n     * @returns Returns a new series with strings that are truncated to the specified maximum length. \n     * \n     * @example\n     * <pre>\n     * \n     * const truncated = series.truncateStrings(10); // Truncate all string values to max length of 10 characters.\n     * </pre>\n     */\n    truncateStrings (maxLength: number): ISeries<IndexT, ValueT> {\n\n        if (!isNumber(maxLength)) {\n            throw new Error(\"Expected 'maxLength' parameter to 'Series.truncateStrings' to be a number.\");\n        }\n\n        return this.select((value: any) => {\n            if (isString(value)) {\n                if (value.length > maxLength) {\n                    return value.substring(0, maxLength);\n                }\n            }\n\n            return value;\n        });\n    }\n\n    /**\n     * Produces a new series with all number values rounded to the specified number of places.\n     *\n     * @param numDecimalPlaces The number of decimal places, defaults to 2.\n     * \n     * @returns Returns a new series with all number values rounded to the specified number of places.\n     * \n     * @example\n     * <pre>\n     * \n     * const series = ... your data series ...\n     * const rounded = series.round(); // Round numbers to two decimal places.\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const series = ... your data series ...\n     * const rounded = series.round(3); // Round numbers to three decimal places.\n     * </pre>\n     */\n    round (numDecimalPlaces?: number): ISeries<IndexT, ValueT> {\n\n        if (numDecimalPlaces !== undefined) {\n            if (!isNumber(numDecimalPlaces)) {\n                throw new Error(\"Expected 'numDecimalPlaces' parameter to 'Series.round' to be a number.\");\n            }\n        }\n        else {\n            numDecimalPlaces = 2; // Default to two decimal places.\n        }\n        \n        return this.select((value: any) => {\n            if (isNumber(value)) {\n                return parseFloat(value.toFixed(numDecimalPlaces));\n            }\n\n            return value;\n        });\n    }\n\n    /**\n     * Insert a pair at the start of the series.\n     * Doesn't modify the original series! The returned series is entirely new and contains values from the original series plus the inserted pair.\n     *\n     * @param pair The index/value pair to insert.\n     * \n     * @return Returns a new series with the specified pair inserted.\n     * \n     * @example\n     * <pre>\n     * \n     * const newIndex = ... index of the new row ...\n     * const newRow = ... the new data row to insert ...\n     * const insertedSeries = series.insertPair([newIndex, newRows]);\n     * </pre>\n     */\n    insertPair (pair: [IndexT, ValueT]): ISeries<IndexT, ValueT> {\n        if (!isArray(pair)) throw new Error(\"Expected 'pair' parameter to 'Series.insertPair' to be an array.\");\n        if (pair.length !== 2) throw new Error(\"Expected 'pair' parameter to 'Series.insertPair' to be an array with two elements. The first element is the index, the second is the value.\");\n\n        return (new Series<IndexT, ValueT>({ pairs: [pair] })).concat(this);\n    }\n\n    /**\n     * Append a pair to the end of a series.\n     * Doesn't modify the original series! The returned series is entirely new and contains values from the original series plus the appended pair.\n     *\n     * @param pair The index/value pair to append.\n     *  \n     * @return Returns a new series with the specified pair appended.\n     * \n     * @example\n     * <pre>\n     * \n     * const newIndex = ... index of the new row ...\n     * const newRow = ... the new data row to append ...\n     * const appendedSeries = series.appendPair([newIndex, newRows]);\n     * </pre>\n     */\n    appendPair (pair: [IndexT, ValueT]): ISeries<IndexT, ValueT> {\n        if (!isArray(pair)) throw new Error(\"Expected 'pair' parameter to 'Series.appendPair' to be an array.\");\n        if (pair.length !== 2) throw new Error(\"Expected 'pair' parameter to 'Series.appendPair' to be an array with two elements. The first element is the index, the second is the value.\");\n\n        return this.concat(new Series<IndexT, ValueT>({ pairs: [pair] }));\n    }\n\n    /**\n     * Removes values from the series by index.\n     */\n     remove(index: IndexT): ISeries<IndexT, ValueT> {\n\n        return new Series<IndexT, ValueT>(() => {\n            const content = this.getContent();\n            return {\n                pairs: new WhereIterable(content.pairs, pair => pair[0] !== index),\n            };\n        });\n    }\n\n    /**\n     * Fill gaps in a series.\n     *\n     * @param comparer User-defined comparer function that is passed pairA and pairB, two consecutive values, return truthy if there is a gap between the value, or falsey if there is no gap.\n     * @param generator User-defined generator function that is passed pairA and pairB, two consecutive values, returns an array of pairs that fills the gap between the values.\n     *\n     * @return Returns a new series with gaps filled in.\n     * \n     * @example\n     * <pre>\n     * \n     *   var sequenceWithGaps = ...\n     *\n     *  // Predicate that determines if there is a gap.\n     *  var gapExists = (pairA, pairB) => {\n     *      // Returns true if there is a gap.\n     *      return true;\n     *  };\n     *\n     *  // Generator function that produces new rows to fill the game.\n     *  var gapFiller = (pairA, pairB) => {\n     *      // Create an array of index, value pairs that fill the gaps between pairA and pairB.\n     *      return [\n     *          newPair1,\n     *          newPair2,\n     *          newPair3,\n     *      ];\n     *  };\n     *\n     *  var sequenceWithoutGaps = sequenceWithGaps.fillGaps(gapExists, gapFiller);\n     * </pre>\n     */\n    fillGaps (comparer: ComparerFn<[IndexT, ValueT], [IndexT, ValueT]>, generator: GapFillFn<[IndexT, ValueT], [IndexT, ValueT]>): ISeries<IndexT, ValueT> {\n        if (!isFunction(comparer)) throw new Error(\"Expected 'comparer' parameter to 'Series.fillGaps' to be a comparer function that compares two values and returns a boolean.\")\n        if (!isFunction(generator)) throw new Error(\"Expected 'generator' parameter to 'Series.fillGaps' to be a generator function that takes two values and returns an array of generated pairs to span the gap.\")\n\n        return this.rollingWindow(2)\n            .selectMany((window): [IndexT, ValueT][] => {\n                const pairs = window.toPairs();\n                const pairA = pairs[0];\n                const pairB = pairs[1];\n                if (!comparer(pairA, pairB)) {\n                    return [pairA];\n                }\n\n                const generatedRows = generator(pairA, pairB);\n                if (!isArray(generatedRows)) throw new Error(\"Expected return from 'generator' parameter to 'Series.fillGaps' to be an array of pairs, instead got a \" + typeof(generatedRows));\n\n                return [pairA].concat(generatedRows);\n            })\n            .withIndex(pair => pair[0])\n            .select(pair => pair[1])\n            .concat(this.tail(1));\n    }\n\n    /**\n     * Returns the specified default series if the input series is empty. \n     *\n     * @param defaultSequence Default series to return if the input series is empty.\n     * \n     * @return Returns 'defaultSequence' if the input series is empty. \n     * \n     * @example\n     * <pre>\n     * \n     * const emptySeries = new Series();\n     * const defaultSeries = new Series([ 1, 2, 3 ]);\n     * expect(emptyDataFrame.defaultIfEmpty(defaultSeries)).to.eql(defaultSeries);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const nonEmptySeries = new Series([ 100 ]);\n     * const defaultSeries = new Series([ 1, 2, 3 ]);\n     * expect(nonEmptySeries.defaultIfEmpty(defaultSeries)).to.eql(nonEmptySeries);\n     * </pre>\n     */\n    defaultIfEmpty (defaultSequence: ValueT[] | ISeries<IndexT, ValueT>): ISeries<IndexT, ValueT> {\n\n        if (this.none()) {\n            if (defaultSequence instanceof Series) {\n                return <ISeries<IndexT, ValueT>> defaultSequence;\n            }\n            else if (isArray(defaultSequence)) {\n                return new Series<IndexT, ValueT>(defaultSequence);\n            }\n            else {\n                throw new Error(\"Expected 'defaultSequence' parameter to 'Series.defaultIfEmpty' to be an array or a series.\");\n            }\n        } \n        else {\n            return this;\n        }\n    }\n\n    /**\n     * Detect the the frequency of the types of the values in the series.\n     * This is a good way to understand the shape of your data.\n     *\n     * @return Returns a {@link DataFrame} with rows that confirm to {@link ITypeFrequency} that describes the data types contained in the original series.\n     * \n     * @example\n     * <pre>\n     * \n     * const dataTypes = series.detectTypes();\n     * console.log(dataTypes.toString());\n     * </pre>\n     */\n    detectTypes (): IDataFrame<number, ITypeFrequency> {\n\n        return new DataFrame<number, ITypeFrequency>(() => {\n            const totalValues = this.count();\n\n            const typeFrequencies = this.select(value => {\n                    let valueType: string = typeof(value);\n                    if (valueType === \"object\") {\n                        if (isDate(value)) {\n                            valueType = \"date\";\n                        }\n                    }\n                    return valueType;\n                })\n                .aggregate({}, (accumulated: any, valueType: string) => {\n                    var typeInfo = accumulated[valueType];\n                    if (!typeInfo) {\n                        typeInfo = {\n                            count: 0\n                        };\n                        accumulated[valueType] = typeInfo;\n                    }\n                    ++typeInfo.count;\n                    return accumulated;\n                });\n\n            return {\n                columnNames: [\"Type\", \"Frequency\"],\n                rows: Object.keys(typeFrequencies)\n                    .map(valueType => {\n                        return [\n                            valueType,\n                            (typeFrequencies[valueType].count / totalValues) * 100\n                        ];\n                    })\n            };\n        });\n    }\n\n    /**\n     * Detect the frequency of the values in the series.\n     * This is a good way to understand the shape of your data.\n     *\n     * @return Returns a {@link DataFrame} with rows that conform to {@link IValueFrequency} that describes the values contained in the original series.\n     * \n     * @example\n     * <pre>\n     * \n     * const dataValues = series.detectValues();\n     * console.log(dataValues.toString());\n     * </pre>\n     */\n    detectValues (): IDataFrame<number, IValueFrequency> {\n\n        return new DataFrame<number, IValueFrequency>(() => {\n            const totalValues = this.count();\n            const valueFrequencies = this.aggregate(new Map<any, any>(), (accumulated: Map<any, any>, value: any) => {\n                let valueInfo = accumulated.get(value);\n                if (!valueInfo) {\n                    valueInfo = {\n                        count: 0,\n                        value: value,\n                    };\n                    accumulated.set(value, valueInfo);\n                }\n                ++valueInfo.count;\n                return accumulated;\n            });\n\n            return {\n                columnNames: [\"Value\", \"Frequency\"],\n                rows: Array.from(valueFrequencies.keys())\n                    .map(value => {\n                        const valueInfo = valueFrequencies.get(value);\n                        return [\n                            valueInfo.value,\n                            (valueInfo.count / totalValues) * 100\n                        ];\n                    }),\n            };\n        });\n    }\n\n    /**\n     * Organise all values in the series into the specified number of buckets.\n     * Assumes that the series is a series of numbers.\n     *\n     * WARNING: This function is deprecated and will be removed in the future.\n     *  \n     * @param numBuckets - The number of buckets to create.\n     * \n     * @returns Returns a dataframe containing bucketed values. The input values are divided up into these buckets.\n     * \n     * @example\n     * <pre>\n     * \n     * const buckets = series.bucket(20); // Distribute values into 20 evenly spaced buckets.\n     * console.log(buckets.toString());\n     * </pre>\n     */\n    bucket (numBuckets: number): IDataFrame<IndexT, IBucket> {\n\n        console.warn(`Series.bucket is deprecated and will be removed in the future.`);\n\n        if (!isNumber(numBuckets)) {\n            throw new Error(`Expected 'numBuckets' parameter to 'Series.bucket' to be a number.`);\n        }\n\n        if (this.none()) {\n            return new DataFrame();\n        }\n\n        const numberSeries = this as any as ISeries<IndexT, number>;\n        var min = numberSeries.min();\n        var max = numberSeries.max();\n        var range = max - min;\n        var width = range / (numBuckets-1);\n        return numberSeries.select(v => {\n                var bucket = Math.floor((v - min) / width);\n                var bucketMin = (bucket * width) + min;\n                return {\n                    Value: v,\n                    Bucket: bucket,\n                    Min: bucketMin,\n                    Mid: bucketMin + (width*0.5),\n                    Max: bucketMin + width,\n                };\n            })\n            .inflate();\n    }\n\n    /**\n     * Counts frequencies in the series to produce a frequency table.\n     * \n     * @param options - Options for computing the frequency table (e.g. `numGroups` which defaults to 10).\n     * \n     * @returns Returns a dataframe for the frequency table showing the frequency for the band of values in each group.\n     * \n     * @example\n     * <pre>\n     * \n     * const series = new Series([ 1, 2, 3, 4 ]);\n     * // Or \n     * const series = dataFrame.getSeries(\"SomeColumn\");\n     *  \n     * const frequencyTable = series.frequency();\n     * console.log(frequencyTable.toArray());\n     * </pre>\n     * @example\n     * <pre>\n     * \n     * const series = new Series([ 37, 63, 56, 54, 39, 49, 55, 114, 59, 55 ]);\n     * const frequencyTable = series.frequency({ \n     *      lower: 40,\n     *      upper: 90,\n     *      interval: 10,\n     * })\n     * console.log(frequencyTable.toArray());\n     * </pre>\n     */\n    frequency (options?: IFrequencyTableOptions): IDataFrame<number, IFrequencyTableEntry> {\n\n        if (this.none()) {\n            return new DataFrame();\n        }\n\n        return new DataFrame(() => {\n            const numberSeries = this as any as ISeries<IndexT, number>;\n\n            const captureValues = options && options.captureValues || false;\n\n            let min = Number.MAX_VALUE;\n            let max = Number.MIN_VALUE;\n            let numValues = 0;\n\n            //\n            // Compute min, max and total.\n            //\n            for (const value of numberSeries) {\n                min = Math.min(value, min);\n                max = Math.max(value, max);\n                numValues += 1;\n            }\n\n            let lower: number;\n            if (options && options.lower !== undefined) {\n                lower = options.lower;\n            }\n            else {\n                lower = min;\n            }\n\n            let upper: number;\n            if (options && options.upper !== undefined) {\n                upper = options.upper;\n            }\n            else {\n                upper = max;\n            }\n\n            let interval = options && options.interval;\n\n            const range = upper - lower;\n            let numGroups: number;\n            if (interval !== undefined) {\n                numGroups = Math.ceil(range / interval);\n            }\n            else {\n                numGroups = 10;\n            }\n            \n            if (numValues < numGroups) {\n                numGroups = numValues;\n            }\n\n            if (interval === undefined) {\n                interval = range / (numGroups-1); \n            }\n\n            const groups = new Array<IFrequencyTableEntry>(numGroups);\n\n            // \n            // Initialize groups.\n            //\n            for (let groupIndex = 0; groupIndex < numGroups; ++groupIndex) {\n                const minValue = lower + (groupIndex * interval);\n                groups[groupIndex] = {\n                    lower: minValue,\n                    upper: minValue + interval,\n                    count: 0,\n                    proportion: 0,  \n                    cumulative: 0,\n                };\n\n                if (captureValues) {\n                    groups[groupIndex].values = [];\n                }\n            }\n\n            const beforeGroup: IFrequencyTableEntry = {\n                upper: lower,\n                count: 0,\n                proportion: 0,  \n                cumulative: 0,\n            };\n            if (captureValues) {\n                beforeGroup.values = [];\n            }\n\n            const afterGroup: IFrequencyTableEntry = {\n                lower: upper,\n                count: 0,\n                proportion: 0,  \n                cumulative: 0,\n            };\n            if (captureValues) {\n                afterGroup.values = [];\n            }\n\n            //\n            // Count groups.\n            //\n            for (const value of numberSeries) {\n                let group: IFrequencyTableEntry;\n                if (value < lower) {\n                    group = beforeGroup; // Value is less than the body of the data set.\n                }\n                else if (value > upper) {\n                    group = afterGroup; // Value is more than the body of the data set.\n                }\n                else {\n                    const groupIndex = Math.floor((value - lower) / interval);\n                    group = groups[groupIndex]; // Value is within the body of the data set.\n                }\n                group.count += 1;\n                if (captureValues) {\n                    group.values!.push(value);\n                }\n            }\n\n            let cumulative = 0;\n\n            if (beforeGroup.count > 0) {\n                groups.unshift(beforeGroup);\n            }\n\n            if (afterGroup.count > 0) {\n                groups.push(afterGroup)\n            }\n\n            //\n            // Compute proportions.\n            //\n            for (const group of groups) {\n                group.proportion = group.count / numValues;\n                cumulative += group.proportion;\n                group.cumulative = cumulative; \n            }\n\n            return {\n                values: groups,\n            };\n        });\n    }\n\n    /***\n     * Allows the series to be queried to confirm that it is actually a series.\n     * Used from JavaScript to tell the difference between a Series and a DataFrame.\n     * \n     * @return Returns the string \"series\".\n     */\n    getTypeCode (): string {\n        return \"series\";\n    }    \n}\n\n/**\n * @hidden\n * The configuration for an ordered series.\n */\ninterface IOrderedSeriesConfig<IndexT, ValueT, SortT> {\n\n    //\n    // The source values for the ordered series.\n    //\n    values: Iterable<ValueT>;\n\n    //\n    // The source pairs (index,value) for the ordered series.\n    //\n    pairs: Iterable<[IndexT, ValueT]>;\n\n    //\n    // The selector used to get the sorting key for the orderby operation.\n    //\n    selector: SelectorWithIndexFn<ValueT, SortT>;\n\n    //\n    // The sort direction, ascending or descending.\n    //\n    direction: Direction;\n\n    //\n    // The parent series in the orderby operation or null if none.\n    //\n    parent: OrderedSeries<IndexT, ValueT, any> | null;\n}\n\n/**\n * @hidden\n * A series that has been ordered.\n */\nclass OrderedSeries<IndexT = number, ValueT = any, SortT = any> \n    extends Series<IndexT, ValueT>\n    implements IOrderedSeries<IndexT, ValueT, SortT> {\n\n    //\n    // Configuration for the ordered series.\n    //\n    config: IOrderedSeriesConfig<IndexT, ValueT, SortT>;\n\n    //\n    // Helper function to create a sort spec.\n    //\n    private static makeSortSpec (sortLevel: number, selector: SortSelectorFn, direction: Direction): ISortSpec {\n        return { sortLevel: sortLevel, selector: selector, direction: direction };\n    }\n\n    //\n    // Helper function to make a sort selector for pairs, this captures the parent correct when generating the closure.\n    //\n    private static makePairsSelector (selector: SortSelectorFn): SortSelectorFn {\n        return (pair: any, index: number) => selector(pair[1], index);\n    }\n\n    constructor(config: IOrderedSeriesConfig<IndexT, ValueT, SortT>) {\n\n        const valueSortSpecs: ISortSpec[] = [];\n        const pairSortSpecs: ISortSpec[] = [];\n        let sortLevel = 0;\n\n        let parent = config.parent;\n        const parents = [];\n        while (parent !== null) {\n            parents.push(parent);\n            parent = parent.config.parent;\n        }\n\n        parents.reverse();\n\n        for (const parent of parents) {\n            const parentConfig = parent.config;\n            valueSortSpecs.push(OrderedSeries.makeSortSpec(sortLevel, parentConfig.selector, parentConfig.direction));\n            pairSortSpecs.push(OrderedSeries.makeSortSpec(sortLevel, OrderedSeries.makePairsSelector(parentConfig.selector), parentConfig.direction));\n            ++sortLevel;\n        }\n\n        valueSortSpecs.push(OrderedSeries.makeSortSpec(sortLevel, config.selector, config.direction));\n        pairSortSpecs.push(OrderedSeries.makeSortSpec(sortLevel, OrderedSeries.makePairsSelector(config.selector), config.direction));\n\n        super({\n            values: new OrderedIterable(config.values, valueSortSpecs),\n            pairs: new OrderedIterable(config.pairs, pairSortSpecs)\n        });\n\n        this.config = config;\n    }\n\n    /** \n     * Applys additional sorting (ascending) to an already sorted series.\n     * \n     * @param selector User-defined selector that selects the additional value to sort by.\n     * \n     * @return Returns a new series has been additionally sorted by the value chosen by the selector function. \n     * \n     * @example\n     * <pre>\n     * \n     * // Order sales by salesperson and then by amount (from least to most).\n     * const ordered = sales.orderBy(sale => sale.SalesPerson).thenBy(sale => sale.Amount);\n     * </pre>\n     */\n    thenBy<SortT> (selector: SelectorWithIndexFn<ValueT, SortT>): IOrderedSeries<IndexT, ValueT, SortT> {\n        return new OrderedSeries<IndexT, ValueT, SortT>({\n            values: this.config.values, \n            pairs: this.config.pairs, \n            selector: selector, \n            direction: Direction.Ascending, \n            parent: this,\n        });\n    }\n\n    /** \n     * Applys additional sorting (descending) to an already sorted series.\n     * \n     * @param selector User-defined selector that selects the additional value to sort by.\n     * \n     * @return Returns a new series has been additionally sorted by the value chosen by the selector function. \n     * \n     * @example\n     * <pre>\n     * \n     * // Order sales by salesperson and then by amount (from most to least).\n     * const ordered = sales.orderBy(sale => sale.SalesPerson).thenByDescending(sale => sale.Amount);\n     * </pre>\n     */\n    thenByDescending<SortT> (selector: SelectorWithIndexFn<ValueT, SortT>): IOrderedSeries<IndexT, ValueT, SortT> {\n        return new OrderedSeries<IndexT, ValueT, SortT>({\n            values: this.config.values,\n            pairs: this.config.pairs, \n            selector: selector, \n            direction: Direction.Descending, \n            parent: this\n        });\n    }\n}","import { ArrayIterable }  from './iterables/array-iterable';\nimport { EmptyIterable }  from './iterables/empty-iterable';\nimport { CountIterable }  from './iterables/count-iterable';\nimport { MultiIterable }  from './iterables/multi-iterable';\nimport { SelectIterable }  from './iterables/select-iterable';\nimport { SelectManyIterable }  from './iterables/select-many-iterable';\nimport { TakeIterable }  from './iterables/take-iterable';\nimport { TakeWhileIterable }  from './iterables/take-while-iterable';\nimport { WhereIterable }  from './iterables/where-iterable';\nimport { ConcatIterable }  from './iterables/concat-iterable';\nimport { DataFrameWindowIterable }  from './iterables/dataframe-window-iterable';\nimport { ReverseIterable }  from './iterables/reverse-iterable';\nimport { ZipIterable }  from './iterables/zip-iterable';\nimport { CsvRowsIterable }  from './iterables/csv-rows-iterable';\nimport { DistinctIterable }  from './iterables/distinct-iterable';\nimport { DataFrameRollingWindowIterable }  from './iterables/dataframe-rolling-window-iterable';\nimport { DataFrameVariableWindowIterable }  from './iterables/dataframe-variable-window-iterable';\nimport { OrderedIterable, Direction, ISortSpec, SelectorFn as SortSelectorFn }  from './iterables/ordered-iterable';\nimport { IIndex, Index } from './index';\nimport { ExtractElementIterable } from './iterables/extract-element-iterable';\nimport { SkipIterable } from './iterables/skip-iterable';\nimport { SkipWhileIterable } from './iterables/skip-while-iterable';\nimport { RepeatIterable } from './iterables/repeat-iterable';\nimport { TileIterable } from './iterables/tile-iterable';\nimport { RavelIterable } from './iterables/ravel-iterable';\n// @ts-ignore\nimport Table from 'easy-table';\n// @ts-ignore\nimport moment from \"dayjs\";\nimport { ISeries, Series, SelectorWithIndexFn, PredicateFn, ComparerFn, SelectorFn, AggregateFn, Zip2Fn, Zip3Fn, Zip4Fn, Zip5Fn, ZipNFn, CallbackFn, JoinFn, GapFillFn, ISeriesConfig } from './series';\nimport { ColumnNamesIterable } from './iterables/column-names-iterable';\nimport { toMap, makeDistinct, mapIterable, determineType, toMap2, isArray, isString, isFunction, isObject, isUndefined, isNumber } from './utils';\nimport { ISerializedDataFrame } from \"@data-forge/serialization\";\nimport JSON5 from 'json5';\n\n// @ts-ignore\nimport PapaParse from 'papaparse';\nimport { CachedIteratorIterable } from './iterables/cached-iterator-iterable';\n\n/** \n * An object whose fields specify the data for named columns.\n */\nexport interface IColumnSpec {\n    [index: string]: Iterator<any> | Iterable<any> | ISeries<any, any>,\n}\n\n/**\n * Specifies the format per column when converting columns to strings.\n */\nexport interface IFormatSpec {\n    [index: string]: string;\n}\n\n/**\n * An function that aggregates a series.\n */\nexport type SeriesAggregatorFn<IndexT, ValueT, OutputT> = (values: ISeries<IndexT, ValueT>) => OutputT;\n\n/**\n * Specification that can produce multiple output columns from a single input column of a dataframe.\n */\nexport interface IColumnAggregatorSpec {\n    [outputColumnName: string]: SeriesAggregatorFn<any, any, any>,\n} \n\n/**\n * Specification that can aggregate multiple input columns in a dataframe to produce multiple output columns.\n */\nexport interface IMultiColumnAggregatorSpec {\n    [inputColumnName: string]: SeriesAggregatorFn<any, any, any> | IColumnAggregatorSpec;\n}\n\n/**\n * Defines the configuration for a new column.\n */\nexport interface IColumnConfig {\n    /**\n     * The name of the new column.\n     */\n    name: string;\n\n    /**\n     * The series of values for the column.\n     */\n    series: Iterable<any> | ISeries<any, any>;\n}\n\n/**\n * Options for CSV output.\n * \n * The options object is passed directly to [PapaParse.unparse](https://www.papaparse.com/docs#unparse), please see [PapaParse docs for additional options](https://www.papaparse.com/docs#unparse-config-default).\n */\nexport interface ICSVOutputOptions {\n    /**\n     * Enable or disable output of the CSV header line.\n     * Defaults to true.\n     */\n    header?: boolean;\n}\n\n/**\n * Used to configure a dataframe.\n */\nexport interface IDataFrameConfig<IndexT, ValueT> {\n    /**\n     * Values to put in the dataframe.\n     * This should be array or iterable of JavaScript objects.\n     * Each element in the array contains fields that match the columns of the dataframe.\n     */\n    values?: Iterator<ValueT> | Iterable<ValueT>;\n\n    /**\n     * CSV style rows to put in the dataframe.\n     * An array of arrays. Each element in the top level array is a row of data.\n     * Each row of data contains field values in column order.\n     */\n    rows?: Iterator<any[]> | Iterable<any[]>;\n\n    /***\n     * The index for the dataframe.\n     * If omitted the index will default to a 0-based index.\n     */\n    index?: Iterator<IndexT> | Iterable<IndexT>;\n\n    /**\n     * Array or iterable of index,value pairs to put in the dataframe.\n     * If index and values are not separately specified they can be extracted\n     * from the pairs.\n     */\n    pairs?: Iterator<[IndexT, ValueT]> | Iterable<[IndexT, ValueT]>;\n\n    /**\n     * Array or iterable of column names that are in the dataframe.\n     * The order matters. This arrays specifies the ordering of columns which\n     * is important when rendering tables or writing out CSV data files.\n     * If this is omitted column names will automatically be determined\n     * from the fields of the first row/value in the dataframe.\n     */\n    columnNames?: Iterator<string> | Iterable<string>;\n\n    /***\n     * Set to true when the dataframe has been baked into memory\n     * and does not need to be lazily evaluated.\n     */\n    baked?: boolean;\n\n    /**\n     * Set to true to consider all rows/values in the dataframe when\n     * determining the column names. Otherwise only the first row is considered.\n     * You should use this if you have irregular fields in the objects that\n     * make up the rows/values of the dataframe.\n     */\n    considerAllRows?: boolean;\n\n    /**\n     * Explicitly specify data for named columns to put in the dataframe.\n     */\n    columns?: Iterator<IColumnConfig> | Iterable<IColumnConfig> | IColumnSpec;\n\n    /**\n     * Explicitly set this value if you want columnNames to be caseSensitive.\n     * Default behaviour is to treat column names as case insensitive\n     */\n    caseSensitive?: boolean;\n}\n\n/** \n * Represents a named column in a dataframe.\n */\nexport interface IColumn {\n    \n    /**\n     * The name of the column.\n     */\n    name: string;\n\n    /**\n     * The data type of the column.\n     */\n    type: string;\n\n    /**\n     * The data series from the column.\n     */\n    series: ISeries<any, any>;\n}\n\n/** \n * An object whose fields specify data for named named columns or user-defined generator functions that generate the data for the columns.\n */\nexport interface IColumnGenSpec { //todo: this should allow iterable as well!\n    [index: string]: ISeries<any, any> | SeriesSelectorFn<any, any, any>,\n}\n\n/**\n * A string-to-string mapping that specifies how to rename columns.\n */\nexport interface IColumnRenameSpec {\n    [index: string]: string;\n}\n\n/**\n * Specifies columns to transform and the user-defined selector function that does the transformation.\n */\nexport interface IColumnTransformSpec {\n    [columnName: string]: SelectorWithIndexFn<any, any>;\n}\n\n/**\n * Specifies columns that should be aggregated and a user-defined aggregator function to do the aggregation.\n */\nexport interface IColumnAggregateSpec {\n    [index: string]: AggregateFn<any, any>;\n}\n\n/**\n * A selector function that can select a series from a dataframe.\n */\nexport type SeriesSelectorFn<IndexT, DataFrameValueT, SeriesValueT> = (dataFrame: IDataFrame<IndexT, DataFrameValueT>) => ISeries<IndexT, SeriesValueT>;\n\n/*\n * A function that generates a dataframe content object.\n * Used to make it easy to create lazy evaluated dataframes.\n */\nexport type DataFrameConfigFn<IndexT, ValueT> = () => IDataFrameConfig<IndexT, ValueT>;\n\n/**\n * Represents the frequency of a type in a series or dataframe.\n */\nexport interface ITypeFrequency {\n\n    /**\n     * Name of the column containing the value.\n     */\n    Column: string;\n\n    /**\n     * The name of the type.\n     */\n    Type: string; \n\n    /**\n     * The frequency of the type's appearance in the series or dataframe.\n     */\n    Frequency: number;\n}\n\n/**\n * Represents the frequency of a value in a series or dataframe.\n */\nexport interface IValueFrequency {\n\n    /**\n     * Name of the column containing the value.\n     */\n    Column: string;\n\n    /**\n     * The value.\n     */\n    Value: any; \n\n    /**\n     * The frequency of the value's appearance in the series or dataframe.\n     */\n    Frequency: number;\n}\n\n/**\n * Interface that represents a dataframe.\n * A dataframe contains an indexed sequence of data records.\n * Think of it as a spreadsheet or CSV file in memory.\n * \n * Each data record contains multiple named fields, the value of each field represents one row in a column of data.\n * Each column of data is a named {@link Series}.\n * You think of a dataframe a collection of named data series.\n * \n * @typeparam IndexT The type to use for the index.\n * @typeparam ValueT The type to use for each row/data record.\n */\nexport interface IDataFrame<IndexT = number, ValueT = any> extends Iterable<ValueT> {\n\n    /**\n     * Get an iterator to enumerate the rows of the dataframe.\n     * Enumerating the iterator forces lazy evaluation to complete.\n     * This function is automatically called by `for...of`.\n     * \n     * @return An iterator for the rows in the dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * for (const row of df) {\n     *     // ... do something with the row ...\n     * }\n     * </pre>\n     */\n    [Symbol.iterator] (): Iterator<ValueT>;\n\n    /**\n     * Get the names of the columns in the dataframe.\n     * \n     * @return Returns an array of the column names in the dataframe.  \n     * \n     * @example\n     * <pre>\n     * \n     * console.log(df.getColumnNames());\n     * </pre>\n     */\n    getColumnNames (): string[];\n\n    /** \n     * Retreive the collection of all columns in the dataframe.\n     * \n     * @return Returns a {@link Series} containing the names of the columns in the dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * for (const column in df.getColumns()) {\n     *      console.log(\"Column name: \");\n     *      console.log(column.name);\n     * \n     *      console.log(\"Data:\");\n     *      console.log(column.series.toArray());\n     * }\n     * </pre>\n     */\n    getColumns (): ISeries<number, IColumn>;\n\n    /**\n     * Returns true if the dataframe is case sensitive or false if case insensitive.\n     * \n     * @return true if the dataframe is case sensitive, otherwise false.\n     */\n    isCaseSensitive (): boolean;\n\n    /**\n     * Cast the value of the dataframe to a new type.\n     * This operation has no effect but to retype the r9ws that the dataframe contains.\n     * \n     * @return The same dataframe, but with the type changed.\n     * \n     * @example\n     * <pre>\n     * \n     * const castDf = df.cast<SomeOtherType>();\n     * </pre>\n     */\n    cast<NewValueT> (): IDataFrame<IndexT, NewValueT>;\n    \n    /**\n     * Get the index for the dataframe.\n     * \n     * @return The {@link Index} for the dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * const index = df.getIndex();\n     * </pre>\n     */\n    getIndex (): IIndex<IndexT>;\n\n    /**\n     * Set a named column as the {@link Index} of the dataframe.\n     *\n     * @param columnName Name of the column to use as the new {@link Index} of the returned dataframe.\n     *\n     * @return Returns a new dataframe with the values of the specified column as the new {@link Index}.\n     * \n     * @example\n     * <pre>\n     * \n     * const indexedDf = df.setIndex(\"SomeColumn\");\n     * </pre>\n     */\n    setIndex<NewIndexT = any> (columnName: string): IDataFrame<NewIndexT, ValueT>;\n    \n    /**\n     * Apply a new {@link Index} to the dataframe.\n     * \n     * @param newIndex The new array or iterable to be the new {@link Index} of the dataframe. Can also be a selector to choose the {@link Index} for each row in the dataframe.\n     * \n     * @return Returns a new dataframe with the specified {@link Index} attached.\n     * \n     * @example\n     * <pre>\n     * \n     * const indexedDf = df.withIndex([10, 20, 30]);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const indexedDf = df.withIndex(df.getSeries(\"SomeColumn\"));\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const indexedDf = df.withIndex(row => row.SomeColumn);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const indexedDf = df.withIndex(row => row.SomeColumn + 20);\n     * </pre>\n     */\n    withIndex<NewIndexT> (newIndex: Iterable<NewIndexT> | SelectorFn<ValueT, NewIndexT>): IDataFrame<NewIndexT, ValueT>;\n\n    /**\n     * Resets the {@link Index} of the dataframe back to the default zero-based sequential integer index.\n     * \n     * @return Returns a new dataframe with the {@link Index} reset to the default zero-based index. \n     * \n     * @example\n     * <pre>\n     * \n     * const dfWithResetIndex = df.resetIndex();\n     * </pre>\n     */\n    resetIndex (): IDataFrame<number, ValueT>;\n    \n    /**\n     * Extract a {@link Series} from a named column in the dataframe.\n     *\n     * @param columnName Specifies the name of the column that contains the {@link Series} to retreive.\n     * \n     * @return Returns the {@link Series} extracted from the named column in the dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * const series = df.getSeries(\"SomeColumn\");\n     * </pre>\n     */\n    getSeries<SeriesValueT = any> (columnName: string): ISeries<IndexT, SeriesValueT>;\n\n    /**\n     * Determine if the dataframe contains a {@link Series} the specified named column.\n     *\n     * @param columnName Name of the column to check for.\n     * \n     * @return Returns true if the dataframe contains the requested {@link Series}, otherwise returns false.\n     * \n     * @example\n     * <pre>\n     * \n     * if (df.hasSeries(\"SomeColumn\")) {\n     *      // ... the dataframe contains a series with the specified column name ...\n     * }\n     * </pre>\n     */\n    hasSeries (columnName: string): boolean;\n\n    /**\n     * Verify the existence of a name column and extracts the {@link Series} for it.\n     * Throws an exception if the requested column doesn't exist.\n     *\n     * @param columnName Name of the column to extract.\n     * \n     * @return Returns the {@link Series} for the column if it exists, otherwise it throws an exception.\n     * \n     * @example\n     * <pre>\n     * \n     * try {\n     *      const series = df.expectSeries(\"SomeColumn\");\n     *      // ... do something with the series ...\n     * }\n     * catch (err) {\n     *      // ... the dataframe doesn't contain the column \"SomeColumn\" ...\n     * }\n     * </pre>\n     */\n    expectSeries<SeriesValueT> (columnName: string): ISeries<IndexT, SeriesValueT>;\n\n    /**\n     * Create a new dataframe with a replaced or additional column specified by the passed-in series.\n     *\n     * @param columnNameOrSpec The name of the column to add or replace or a {@link IColumnGenSpec} that defines the columns to add.\n     * @param series When columnNameOrSpec is a string that identifies the column to add, this specifies the {@link Series} to add to the dataframe or a function that produces a series (given a dataframe).\n     *\n     * @return Returns a new dataframe replacing or adding a particular named column.\n     * \n     * @example\n     * <pre>\n     * \n     * const modifiedDf = df.withSeries(\"ANewColumn\", new Series([1, 2, 3]));\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const modifiedDf = df.withSeries(\"ANewColumn\", df => \n     *      df.getSeries(\"SourceData\").select(aTransformation)\n     * );\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const modifiedDf = df.withSeries({\n     *      ANewColumn: new Series([1, 2, 3]),\n     *      SomeOtherColumn: new Series([10, 20, 30])\n     * });\n     * <pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const modifiedDf = df.withSeries({\n     *      ANewColumn: df => df.getSeries(\"SourceData\").select(aTransformation))\n     * });\n     * <pre>\n     */\n    withSeries<OutputValueT = any, SeriesValueT = any> (columnNameOrSpec: string | IColumnGenSpec, series?: ISeries<IndexT, SeriesValueT> | SeriesSelectorFn<IndexT, ValueT, SeriesValueT>): IDataFrame<IndexT, OutputValueT>;\n\n    /**\n     * Merge one or more dataframes into this single dataframe.\n     * Rows are merged by indexed. \n     * Same named columns in subsequent dataframes override columns in earlier dataframes.\n     * \n     * @param otherDataFrames... One or more dataframes to merge into this dataframe.\n     * \n     * @returns The merged data frame.\n     * \n     * @example\n     * <pre>\n     * \n     * const mergedDF = df1.merge(df2);\n     * </pre>\n     * \n     * <pre>\n     * \n     * const mergedDF = df1.merge(df2, df3, etc);\n     * </pre>\n     */\n    merge<MergedValueT = any>(...otherDataFrames: IDataFrame<IndexT, any>[]): IDataFrame<IndexT, MergedValueT>;\n    \n    /**\n     * Add a series to the dataframe, but only if it doesn't already exist.\n     * \n     * @param columnNameOrSpec The name of the series to add or a {@link IColumnGenSpec} that specifies the columns to add.\n     * @param series If columnNameOrSpec is a string that specifies the name of the series to add, this specifies the actual {@link Series} to add or a selector that generates the series given the dataframe.\n     * \n     * @return Returns a new dataframe with the specified series added, if the series didn't already exist. Otherwise if the requested series already exists the same dataframe is returned.\n     * \n     * @example\n     * <pre>\n     * \n     * const updatedDf = df.ensureSeries(\"ANewColumn\", new Series([1, 2, 3]));\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const updatedDf = df.ensureSeries(\"ANewColumn\", df => \n     *      df.getSeries(\"AnExistingSeries\").select(aTransformation)\n     * );\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const modifiedDf = df.ensureSeries({\n     *      ANewColumn: new Series([1, 2, 3]),\n     *      SomeOtherColumn: new Series([10, 20, 30])\n     * });\n     * <pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const modifiedDf = df.ensureSeries({\n     *      ANewColumn: df => df.getSeries(\"SourceData\").select(aTransformation))\n     * });\n     * <pre>\n     */\n    ensureSeries<SeriesValueT> (columnNameOrSpec: string | IColumnGenSpec, series?: ISeries<IndexT, SeriesValueT> | SeriesSelectorFn<IndexT, ValueT, SeriesValueT>): IDataFrame<IndexT, ValueT>;\n\n    /**\n     * Create a new dataframe with just a subset of columns.\n     *\n     * @param columnNames Array of column names to include in the new dataframe.\n     * \n     * @return Returns a dataframe with a subset of columns from the original dataframe.\n     * \n     * @example\n     * <pre>\n     * const subsetDf = df.subset([\"ColumnA\", \"ColumnB\"]);\n     * </pre>\n     */\n    subset<NewValueT = ValueT> (columnNames: string[]): IDataFrame<IndexT, NewValueT>;\n\n    /**\n     * Create a new dataframe with the requested column or columns dropped.\n     *\n     * @param columnOrColumns Specifies the column name (a string) or columns (array of strings) to drop.\n     * \n     * @return Returns a new dataframe with a particular named column or columns removed.\n     * \n     * @example\n     * <pre>\n     * const modifiedDf = df.dropSeries(\"SomeColumn\");\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * const modifiedDf = df.dropSeries([\"ColumnA\", \"ColumnB\"]);\n     * </pre>\n     */\n    dropSeries<NewValueT = ValueT> (columnOrColumns: string | string[]): IDataFrame<IndexT, NewValueT>;\n\n    /**\n     * Create a new dataframe with columns reordered.\n     * New column names create new columns (with undefined values), omitting existing column names causes those columns to be dropped.\n     * \n     * @param columnNames Specifies the new order for columns.\n     * \n     * @return Returns a new dataframe with columns reordered according to the order of the array of column names that is passed in.\n     * \n     * @example\n     * <pre>\n     * const reorderedDf = df.reorderSeries([\"FirstColumn\", \"SecondColumn\", \"etc\"]);\n     * </pre>\n     */\n    reorderSeries<NewValueT = ValueT> (columnNames: string[]): IDataFrame<IndexT, NewValueT>;\n\n    /**\n     * Bring the column(s) with specified name(s) to the front of the column order, making it (or them) the first column(s) in the output dataframe.\n     *\n     * @param columnOrColumns Specifies the column or columns to bring to the front.\n     *\n     * @return Returns a new dataframe with 1 or more columns bought to the front of the column ordering.\n     * \n     * @example\n     * <pre>\n     * const modifiedDf = df.bringToFront(\"NewFirstColumn\");\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * const modifiedDf = df.bringToFront([\"NewFirstColumn\", \"NewSecondColumn\"]);\n     * </pre>\n     */\n    bringToFront (columnOrColumns: string | string[]): IDataFrame<IndexT, ValueT>;\n\n    /**\n     * Bring the column(s) with specified name(s) to the back of the column order, making it (or them) the last column(s) in the output dataframe.\n     *\n     * @param columnOrColumns Specifies the column or columns to bring to the back.\n     *\n     * @return Returns a new dataframe with 1 or more columns bought to the back of the column ordering.\n     * \n     * @example\n     * <pre>\n     * const modifiedDf = df.bringToBack(\"NewLastColumn\");\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * const modifiedDf = df.bringToBack([\"NewSecondLastColumn, \"\"NewLastColumn\"]);\n     * </pre>\n     */\n    bringToBack (columnOrColumns: string | string[]): IDataFrame<IndexT, ValueT>;\n\n    /**\n     * Create a new dataframe with 1 or more columns renamed.\n     *\n     * @param newColumnNames A column rename spec - a JavaScript hash that maps existing column names to new column names.\n     * \n     * @return Returns a new dataframe with specified columns renamed.\n     * \n     * @example\n     * <pre>\n     * \n     * const renamedDf = df.renameSeries({ OldColumnName, NewColumnName });\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const renamedDf = df.renameSeries({ \n     *      Column1: ColumnA,\n     *      Column2: ColumnB\n     * });\n     * </pre>\n     */\n    renameSeries<NewValueT = ValueT> (newColumnNames: IColumnRenameSpec): IDataFrame<IndexT, NewValueT>;\n\n    /**\n    * Extract rows from the dataframe as an array.\n    * Each element of the array is one row of the dataframe represented as\n    * a JavaScript object with the fields as the dataframe's columns.\n    * This forces lazy evaluation to complete.\n    * \n    * @return Returns an array of the rows contained within the dataframe. \n    * \n    * @example\n    * <pre>\n    * const values = df.toArray();\n    * </pre>\n    */\n   toArray (): ValueT[];\n\n    /**\n     * Retreive the index, row pairs from the dataframe as an array.\n     * Each pair is [index, row].\n     * This forces lazy evaluation to complete.\n     * \n     * @return Returns an array of pairs that contains the dataframe's rows. Each pair is a two element array that contains an index and a row.\n     * \n     * @example\n     * <pre>\n     * const pairs = df.toPairs();\n     * </pre>\n     */\n    toPairs (): ([IndexT, ValueT])[];\n\n    /**\n     * Convert the dataframe to a JavaScript object.\n     *\n     * @param keySelector User-defined selector function that selects keys for the resulting object.\n     * @param valueSelector User-defined selector function that selects values for the resulting object.\n     * \n     * @return Returns a JavaScript object generated from the dataframe by applying the key and value selector functions. \n     * \n     * @example\n     * <pre>\n     * \n     * const someObject = df.toObject(\n     *      row => row.SomeColumn, // Specify the column to use for field names in the output object.\n     *      row => row.SomeOtherColumn // Specify the column to use as the value for each field.\n     * );\n     * </pre>\n     */\n    toObject<KeyT = any, FieldT = any, OutT = any> (keySelector: (value: ValueT) => KeyT, valueSelector: (value: ValueT) => FieldT): OutT;\n\n    /**\n     * Bake the data frame to an array of rows were each rows is an array of values in column order.\n     * \n     * @return Returns an array of rows. Each row is an array of values in column order.\n     * \n     * @example\n     * <pre>\n     * const rows = df.toRows();\n     * </pre>\n     */\n    toRows (): any[][];\n \n    /**\n     * Transforms an input dataframe, generating a new dataframe.\n     * The transformer function is called for each element of the input and the collection of outputs creates the generated datafarme.\n     * \n     * `select` is an alias for {@link DataFrame.map}.\n     * \n     * This is the same concept as the JavaScript function `Array.map` but maps over a dataframe rather than an array.\n     *\n     * @param transformer A user-defined transformer function that transforms each element from the input to generate the output.\n     * \n     * @return Returns a new dataframe generated by calling the transformer function over each element of the input.\n     * \n     * @example\n     * <pre>\n     * \n     * function transformer (input) {\n     *      const output = {\n     *          // ... construct output from input ...\n     *      };\n     *\n     *      return output;\n     * }\n     *  \n     * const transformed = dataframe.select(transformer);\n     * console.log(transformed.toString());\n     * </pre>\n     */\n    select<ToT> (transformer: SelectorWithIndexFn<ValueT, ToT>): IDataFrame<IndexT, ToT>;\n\n    /**\n     * Transforms an input dataframe, generating a new dataframe.\n     * The transformer function is called for each element of the input and the collection of outputs creates the generated datafarme.\n     * \n     * This is the same concept as the JavaScript function `Array.map` but maps over a dataframe rather than an array.\n     *\n     * @param transformer A user-defined transformer function that transforms each element from the input to generate the output.\n     * \n     * @return Returns a new dataframe generated by calling the transformer function over each element of the input.\n     * \n     * @example\n     * <pre>\n     * \n     * function transformer (input) {\n     *      const output = {\n     *          // ... construct output from input ...\n     *      };\n     *\n     *      return output;\n     * }\n     *  \n     * const transformed = dataframe.map(transformer);\n     * console.log(transformed.toString());\n     * </pre>\n     */\n    map<ToT> (transformer: SelectorWithIndexFn<ValueT, ToT>): IDataFrame<IndexT, ToT>;\n\n    /**\n     * Transforms and flattens an input dataframe, generating a new dataframe.\n     * The transformer function is called for each value in the input dataframe and produces an array that is then flattened into the generated dataframe.\n     * \n     * `selectMany` is an alias for {@link DataFrame.flatMap}.\n     * \n     * This is the same concept as the JavaScript function `Array.flatMap` but maps over a dataframe rather than an array.\n     * \n     * @param transformer A user-defined function that transforms each value into an array that is then flattened into the generated dataframe.\n     * \n     * @return Returns a new dataframe generated by calling the transformer function over each element of the input.\n     * \n     * @example\n     * <pre>\n     * \n     * function transformer (input) {\n     *      const output = [];\n     *      while (someCondition) {\n     *          // ... generate zero or more outputs from a single input ...\n     *          output.push(... some generated value ...);\n     *      }\n     *      return output;\n     * }\n     * \n     * const transformed = dataframe.selectMany(transformer);\n     * console.log(transformed.toString());\n     * </pre>\n     */\n    selectMany<ToT> (transformer: SelectorWithIndexFn<ValueT, Iterable<ToT>>): IDataFrame<IndexT, ToT>;\n\n    /**\n     * Transforms and flattens an input dataframe, generating a new dataframe.\n     * The transformer function is called for each value in the input dataframe and produces an array that is then flattened into the generated dataframe.\n     * \n     * This is the same concept as the JavaScript function `Array.flatMap` but maps over a dataframe rather than an array.\n     * \n     * @param transformer A user-defined function that transforms each value into an array that is then flattened into the generated dataframe.\n     * \n     * @return Returns a new dataframe generated by calling the transformer function over each element of the input.\n     * \n     * @example\n     * <pre>\n     * \n     * function transformer (input) {\n     *      const output = [];\n     *      while (someCondition) {\n     *          // ... generate zero or more outputs from a single input ...\n     *          output.push(... some generated value ...);\n     *      }\n     *      return output;\n     * }\n     * \n     * const transformed = dataframe.flatMap(transformer);\n     * console.log(transformed.toString());\n     * </pre>\n     */\n    flatMap<ToT> (transformer: SelectorWithIndexFn<ValueT, Iterable<ToT>>): IDataFrame<IndexT, ToT>;\n\n    /**\n     * Transform one or more columns. \n     * \n     * This is equivalent to extracting a {@link Series} with {@link getSeries}, then transforming it with {@link Series.select},\n     * and finally plugging it back in as the same column using {@link withSeries}.\n     *\n     * @param columnSelectors Object with field names for each column to be transformed. Each field specifies a selector function that transforms that column.\n     * \n     * @return Returns a new dataframe with 1 or more columns transformed.\n     * \n     * @example\n     * <pre>\n     * \n     * const modifiedDf = df.transformSeries({ \n     *      AColumnToTransform: columnValue => transformRow(columnValue) \n     * });\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const modifiedDf = df.transformSeries({ \n     *      ColumnA: columnValue => transformColumnA(columnValue),\n     *      ColumnB: columnValue => transformColumnB(columnValue)\n     * });\n     * </pre>\n     */\n    transformSeries<NewValueT = ValueT> (columnSelectors: IColumnTransformSpec): IDataFrame<IndexT, NewValueT>;\n\n    /** \n     * Generate new columns based on existing rows.\n     * \n     * This is equivalent to calling {@link select} to transform the original dataframe to a new dataframe with different column,\n     * then using {@link withSeries} to merge each the of both the new and original dataframes.\n     *\n     * @param generator Generator function that transforms each row to produce 1 or more new columns.\n     * Or use a column spec that has fields for each column, the fields specify a generate function that produces the value for each new column.\n     * \n     * @return Returns a new dataframe with 1 or more new columns.\n     * \n     * @example\n     * <pre>\n     * \n     * function produceNewColumns (inputRow) {\n     *      const newColumns = {\n     *          // ... specify new columns and their values based on the input row ...\n     *      };\n     * \n     *      return newColumns;\n     * };\n     * \n     * const dfWithNewSeries = df.generateSeries(row => produceNewColumns(row));\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const dfWithNewSeries = df.generateSeries({ \n     *      NewColumnA: row => produceNewColumnA(row),\n     *      NewColumnB: row => produceNewColumnB(row),\n     * })\n     * </pre>\n     */\n    generateSeries<NewValueT = ValueT> (generator: SelectorWithIndexFn<any, any> | IColumnTransformSpec): IDataFrame<IndexT, NewValueT>;\n\n    /** \n     * Converts (deflates) a dataframe to a {@link Series}.\n     *\n     * @param selector Optional user-defined selector function that transforms each row to produce the series.\n     *\n     * @return Returns a series that was created from the original dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * const series = df.deflate(); // Deflate to a series of object.\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const series = df.deflate(row => row.SomeColumn); // Extract a particular column.\n     * </pre>\n     */\n    deflate<ToT = ValueT> (selector?: SelectorWithIndexFn<ValueT, ToT>): ISeries<IndexT, ToT>;\n\n    /** \n     * Inflate a named {@link Series} in the dataframe to 1 or more new series in the new dataframe.\n     * \n     * This is the equivalent of extracting the series using {@link getSeries}, transforming them with {@link Series.select}\n     * and then running {@link Series.inflate} to create a new dataframe, then merging each column of the new dataframe\n     *  into the original dataframe using {@link withSeries}.\n     *\n     * @param columnName Name of the series to inflate.\n     * @param selector Optional selector function that transforms each value in the column to new columns. If not specified it is expected that each value in the column is an object whose fields define the new column names.\n     * \n     * @return Returns a new dataframe with a column inflated to 1 or more new columns.\n     * \n     * @example\n     * <pre>\n     * \n     * function newColumnGenerator (row) {\n     *      const newColumns = {\n     *          // ... create 1 field per new column ...\n     *      };\n     * \n     *      return row;\n     * }\n     * \n     * const dfWithNewSeries = df.inflateSeries(\"SomeColumn\", newColumnGenerator);\n     * </pre>\n     */\n    inflateSeries<NewValueT = ValueT> (columnName: string, selector?: SelectorWithIndexFn<IndexT, any>): IDataFrame<IndexT, ValueT>;\n\n    /**\n     * Partition a dataframe into a {@link Series} of *data windows*. \n     * Each value in the new series is a chunk of data from the original dataframe.\n     *\n     * @param period The number of rows to include in each data window.\n     * \n     * @return Returns a new series, each value of which is a chunk (data window) of the original dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * const windows = df.window(2); // Get rows in pairs.\n     * const pctIncrease = windows.select(pair => (pair.last().SalesAmount - pair.first().SalesAmount) / pair.first().SalesAmount);\n     * console.log(pctIncrease.toString());\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const salesDf = ... // Daily sales data.\n     * const weeklySales = salesDf.window(7); // Partition up into weekly data sets.\n     * console.log(weeklySales.toString());\n     * </pre>\n     */\n    window (period: number): ISeries<number, IDataFrame<IndexT, ValueT>>;\n\n    /** \n     * Partition a dataframe into a {@link Series} of *rolling data windows*. \n     * Each value in the new series is a rolling chunk of data from the original dataframe.\n     *\n     * @param period The number of data rows to include in each data window.\n     * \n     * @return Returns a new series, each value of which is a rolling chunk of the original dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * const salesDf = ... // Daily sales data.\n     * const rollingWeeklySales = salesDf.rollingWindow(7); // Get rolling window over weekly sales data.\n     * console.log(rollingWeeklySales.toString());\n     * </pre>\n     */\n    rollingWindow (period: number): ISeries<number, IDataFrame<IndexT, ValueT>>;\n\n    /**\n     * Partition a dataframe into a {@link Series} of variable-length *data windows* \n     * where the divisions between the data chunks are\n     * defined by a user-provided *comparer* function.\n     * \n     * @param comparer Function that compares two adjacent data rows and returns true if they should be in the same window.\n     * \n     * @return Returns a new series, each value of which is a chunk of data from the original dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * function rowComparer (rowA, rowB) {\n     *      if (... rowA should be in the same data window as rowB ...) {\n     *          return true;\n     *      }\n     *      else {\n     *          return false;\n     *      }\n     * };\n     * \n     * const variableWindows = df.variableWindow(rowComparer);\n     */\n    variableWindow (comparer: ComparerFn<ValueT, ValueT>): ISeries<number, IDataFrame<IndexT, ValueT>>;\n\n    /**\n     * Eliminates adjacent duplicate rows.\n     * \n     * For each group of adjacent values that are equivalent only returns the last index/row for the group, \n     * thus adjacent equivalent rows are collapsed down to the last row.\n     *\n     * @param selector Optional selector function to determine the value used to compare for equivalence.\n     * \n     * @return Returns a new dataframe with groups of adjacent duplicate rows collapsed to a single row per group.\n     * \n     * @example\n     * <pre>\n     * \n     * const dfWithDuplicateRowsRemoved = df.sequentialDistinct(row => row.ColumnA);\n     * </pre>\n     */\n    sequentialDistinct<ToT = ValueT> (selector?: SelectorFn<ValueT, ToT>): IDataFrame<IndexT, ValueT>;\n\n    /**\n     * Aggregate the rows in the dataframe to a single result.\n     * \n     * `aggregate` is similar to {@link DataFrame.reduce}  but the parameters are reversed. \n     * Please use {@link DataFrame.reduce} in preference to `aggregate`.\n     *\n     * @param seed Optional seed value for producing the aggregation.\n     * @param selector Function that takes the seed and then each row in the dataframe and produces the aggregate value.\n     * \n     * @return Returns a new value that has been aggregated from the dataframe using the 'selector' function. \n     * \n     * @example\n     * <pre>\n     * \n     * const dailySalesDf = ... daily sales figures for the past month ...\n     * const totalSalesForthisMonth = dailySalesDf.aggregate(\n     *      0, // Seed - the starting value.\n     *      (accumulator, row) => accumulator + row.SalesAmount // Aggregation function.\n     * );\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const totalSalesAllTime = 500; // We'll seed the aggregation with this value.\n     * const dailySalesDf = ... daily sales figures for the past month ...\n     * const updatedTotalSalesAllTime = dailySalesDf.aggregate(\n     *      totalSalesAllTime, \n     *      (accumulator, row) => accumulator + row.SalesAmount\n     * );\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * var salesDataSummary = salesDataDf.aggregate({\n     *      TotalSales: df => df.count(),\n     *      AveragePrice: df => df.deflate(row => row.Price).average(),\n     *      TotalRevenue: df => df.deflate(row => row.Revenue).sum(), \n     * });\n     * </pre>\n    */\n    aggregate<ToT = ValueT> (seedOrSelector: AggregateFn<ValueT, ToT> | ToT | IColumnAggregateSpec, selector?: AggregateFn<ValueT, ToT>): ToT;\n\n    /**\n     * Reduces the values in the dataframe to a single result.\n     *\n     * This is the same concept as the JavaScript function `Array.reduce` but reduces a dataframe rather than an array.\n\n     * @param reducer Function that takes the seed and then each value in the dataframe and produces the reduced value.\n     * @param seed Optional initial value, if not specifed the first value in the dataframe is used as the initial value.\n     * \n     * @return Returns a value that has been reduced from the input dataframe by passing each element through the reducer function.\n     * \n     * @example\n     * <pre>\n     * \n     * const dailyRecords = ... daily records for the past month ...\n     * const totalSales = dailyRecords.reduce(\n     *      (accumulator, row) => accumulator + row.salesAmount, // Reducer function.\n     *      0  // Seed value, the starting value.\n     * );\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const previousSales = 500; // We'll seed the reduction with this value.\n     * const dailyRecords = ... daily records for the past month ...\n     * const updatedSales = dailyRecords.reduce(\n     *      (accumulator, row) => accumulator + row.salesAmount,\n     *      previousSales\n     * );\n     * </pre>\n     */\n    reduce<ToT = ValueT> (reducer: AggregateFn<ValueT, ToT>, seed?: ToT): ToT;\n   \n    /**\n     * Skip a number of rows in the dataframe.\n     *\n     * @param numValues Number of rows to skip.\n     * \n     * @return Returns a new dataframe with the specified number of rows skipped. \n     * \n     * @example\n     * <pre>\n     * \n     * const dfWithRowsSkipped = df.skip(10); // Skip 10 rows in the original dataframe.\n     * </pre>\n     */\n    skip (numValues: number): IDataFrame<IndexT, ValueT>;\n\n    /**\n     * Skips values in the dataframe while a condition evaluates to true or truthy.\n     *\n     * @param predicate Returns true/truthy to continue to skip rows in the original dataframe.\n     * \n     * @return Returns a new dataframe with all initial sequential rows removed while the predicate returned true/truthy.\n     * \n     * @example\n     * <pre>\n     * \n     * const dfWithRowsSkipped = df.skipWhile(row => row.CustomerName === \"Fred\"); // Skip initial customers named Fred.\n     * </pre>\n     */\n    skipWhile (predicate: PredicateFn<ValueT>): IDataFrame<IndexT, ValueT>;\n\n    /**\n     * Skips values in the dataframe untils a condition evaluates to true or truthy.\n     *\n     * @param predicate Return true/truthy to stop skipping rows in the original dataframe.\n     * \n     * @return Returns a new dataframe with all initial sequential rows removed until the predicate returned true/truthy.\n     * \n     * @example\n     * <pre>\n     * \n     * const dfWithRowsSkipped = df.skipUntil(row => row.CustomerName === \"Fred\"); // Skip initial customers until we find Fred.\n     * </pre>\n     */\n    skipUntil (predicate: PredicateFn<ValueT>): IDataFrame<IndexT, ValueT>;\n\n    /**\n     * Take a number of rows in the dataframe.\n     *\n     * @param numValues Number of rows to take.\n     * \n     * @return Returns a new dataframe with only the specified number of rows taken from the original dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * const dfWithRowsTaken = df.take(15); // Take only the first 15 rows from the original dataframe.\n     * </pre>\n     */\n    take (numRows: number): IDataFrame<IndexT, ValueT>;\n\n    /**\n     * Takes values from the dataframe while a condition evaluates to true or truthy.\n     *\n     * @param predicate Returns true/truthy to continue to take rows from the original dataframe.\n     * \n     * @return Returns a new dataframe with only the initial sequential rows that were taken while the predicate returned true/truthy.\n     * \n     * @example\n     * <pre>\n     * \n     * const dfWithRowsTaken = df.takeWhile(row => row.CustomerName === \"Fred\"); // Take only initial customers named Fred.\n     * </pre>\n     */\n    takeWhile (predicate: PredicateFn<ValueT>): IDataFrame<IndexT, ValueT>;\n\n    /**\n     * Takes values from the dataframe untils a condition evaluates to true or truthy.\n     *\n     * @param predicate Return true/truthy to stop taking rows in the original dataframe.\n     * \n     * @return Returns a new dataframe with only the initial sequential rows taken until the predicate returned true/truthy.\n     * \n     * @example\n     * <pre>\n     * \n     * const dfWithRowsTaken = df.takeUntil(row => row.CustomerName === \"Fred\"); // Take all initial customers until we find Fred.\n     * </pre>\n     */\n    takeUntil (predicate: PredicateFn<ValueT>): IDataFrame<IndexT, ValueT>;\n\n    /**\n     * Count the number of rows in the dataframe\n     *\n     * @return Returns the count of all rows.\n     * \n     * @example\n     * <pre>\n     * \n     * const numRows = df.count();\n     * </pre>\n     */\n    count (): number;\n\n    /**\n     * Get the first row of the dataframe.\n     *\n     * @return Returns the first row of the dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * const firstRow = df.first();\n     * </pre>\n     */\n    first (): ValueT;\n\n    /**\n     * Get the last row of the dataframe.\n     *\n     * @return Returns the last row of the dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * const lastRow = df.last();\n     * </pre>\n     */\n    last (): ValueT;\n    \n    /**\n     * Get the row, if there is one, with the specified index.\n     *\n     * @param index Index to for which to retreive the row.\n     *\n     * @return Returns the row from the specified index in the dataframe or undefined if there is no such index in the present in the dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * const row = df.at(5); // Get the row at index 5 (with a default 0-based index).\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const date = ... some date ...\n     * // Retreive the row with specified date from a time-series dataframe (assuming date indexed has been applied).\n     * const row = df.at(date); \n     * </pre>\n     */\n    at (index: IndexT): ValueT | undefined;\n    \n    /** \n     * Get X rows from the start of the dataframe.\n     * Pass in a negative value to get all rows at the head except for X rows at the tail.\n     *\n     * @param numValues Number of rows to take.\n     * \n     * @return Returns a new dataframe that has only the specified number of rows taken from the start of the original dataframe.  \n     * \n     * @examples\n     * <pre>\n     * \n     * const sample = df.head(10); // Take a sample of 10 rows from the start of the dataframe.\n     * </pre>\n     */\n    head (numValues: number): IDataFrame<IndexT, ValueT>;\n\n    /** \n     * Get X rows from the end of the dataframe.\n     * Pass in a negative value to get all rows at the tail except X rows at the head.\n     *\n     * @param numValues Number of rows to take.\n     * \n     * @return Returns a new dataframe that has only the specified number of rows taken from the end of the original dataframe.  \n     * \n     * @examples\n     * <pre>\n     * \n     * const sample = df.tail(12); // Take a sample of 12 rows from the end of the dataframe.\n     * </pre>\n     */\n    tail (numValues: number): IDataFrame<IndexT, ValueT>;\n\n    /**\n     * Filter the dataframe through a user-defined predicate function.\n     * \n     * `where` is an alias for {@link DataFrame.filter}.\n     *\n     * This is the same concept as the JavaScript function `Array.filter` but filters a dataframe rather than an array.\n     * \n     * @param predicate Predicate function to filter values from the dataframe. Returns true/truthy to keep elements, or false/falsy to omit elements.\n     * \n     * @return Returns a new dataframe containing only the values from the original dataframe that matched the predicate. \n     * \n     * @example\n     * <pre>\n     * \n     * // Filter so we only have sales figures greater than 100.\n     * const filtered = dataframe.where(row => row.salesFigure > 100); \n     * console.log(filtered.toArray());\n     * </pre>\n     */\n    where (predicate: PredicateFn<ValueT>): IDataFrame<IndexT, ValueT>;\n\n    /**\n     * Filter the dataframe through a user-defined predicate function.\n     * \n     * This is the same concept as the JavaScript function `Array.filter` but filters a dataframe rather than an array.\n     *\n     * @param predicate Predicate function to filter values from the dataframe. Returns true/truthy to keep elements, or false/falsy to omit elements.\n     * \n     * @return Returns a new dataframe containing only the values from the original dataframe that matched the predicate. \n     * \n     * @example\n     * <pre>\n     * \n     * // Filter so we only have sales figures greater than 100.\n     * const filtered = dataframe.filter(row => row.salesFigure > 100); \n     * console.log(filtered.toArray());\n     * </pre>\n     */\n    filter (predicate: PredicateFn<ValueT>): IDataFrame<IndexT, ValueT>;\n\n    /**\n     * Invoke a callback function for each row in the dataframe.\n     *\n     * @param callback The calback function to invoke for each row.\n     * \n     * @return Returns the original dataframe with no modifications.\n     * \n     * @example\n     * <pre>\n     * \n     * df.forEach(row => {\n     *      // ... do something with the row ...\n     * });\n     * </pre>\n     */\n    forEach (callback: CallbackFn<ValueT>): IDataFrame<IndexT, ValueT>;\n\n    /**\n     * Evaluates a predicate function for every row in the dataframe to determine \n     * if some condition is true/truthy for **all** rows in the dataframe.\n     * \n     * @param predicate Predicate function that receives each row. It should returns true/truthy for a match, otherwise false/falsy.\n     *\n     * @return Returns true if the predicate has returned true or truthy for every row in the dataframe, otherwise returns false. Returns false for an empty dataframe. \n     * \n     * @example\n     * <pre>\n     * \n     * const everyoneIsNamedFred = df.all(row => row.CustomerName === \"Fred\"); // Check if all customers are named Fred.\n     * </pre>\n     */\n    all (predicate: PredicateFn<ValueT>): boolean;\n\n    /**\n     * Evaluates a predicate function for every row in the dataframe to determine \n     * if some condition is true/truthy for **any** of rows in the dataframe.\n     * \n     * If no predicate is specified then it simply checks if the dataframe contains more than zero rows.\n     *\n     * @param predicate Optional predicate function that receives each row. It should return true/truthy for a match, otherwise false/falsy.\n     *\n     * @return Returns true if the predicate has returned truthy for any row in the sequence, otherwise returns false. \n     * If no predicate is passed it returns true if the dataframe contains any rows at all. \n     * Returns false for an empty dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * const anyFreds = df.any(row => row.CustomerName === \"Fred\"); // Do we have any customers named Fred?\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const anyCustomers = df.any(); // Do we have any customers at all?\n     * </pre>\n     */\n    any (predicate?: PredicateFn<ValueT>): boolean;\n\n    /**\n     * Evaluates a predicate function for every row in the dataframe to determine \n     * if some condition is true/truthy for **none** of rows in the dataframe.\n     * \n     * If no predicate is specified then it simply checks if the dataframe contains zero rows.\n     *\n     * @param predicate Optional predicate function that receives each row. It should return true/truthy for a match, otherwise false/falsy.\n     *\n     * @return Returns true if the predicate has returned truthy for zero rows in the dataframe, otherwise returns false. Returns false for an empty dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * const noFreds = df.none(row => row.CustomerName === \"Fred\"); // Do we have zero customers named Fred?\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const noCustomers = df.none(); // Do we have zero customers?\n     * </pre>\n     */\n    none (predicate?: PredicateFn<ValueT>): boolean;\n\n        /**\n     * Gets a new dataframe containing all rows starting at and after the specified index value.\n     * \n     * @param indexValue The index value at which to start the new dataframe.\n     * \n     * @return Returns a new dataframe containing all rows starting at and after the specified index value. \n     * \n     * @example\n     * <pre>\n     * \n     * const df = new DataFrame({ \n     *      index: [0, 1, 2, 3], // This is the default index.\n     *      values: [10, 20, 30, 40],\n     * });\n     * \n     * const lastHalf = df.startAt(2);\n     * expect(lastHalf.toArray()).to.eql([30, 40]);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const timeSeriesDf = ... a dataframe indexed by date/time ...\n     * \n     * // Get all rows starting at (or after) a particular date.\n     * const allRowsFromStartDate = df.startAt(new Date(2016, 5, 4)); \n     * </pre>\n     */\n    startAt (indexValue: IndexT): IDataFrame<IndexT, ValueT>;\n\n    /**\n     * Gets a new dataframe containing all rows up until and including the specified index value (inclusive).\n     * \n     * @param indexValue The index value at which to end the new dataframe.\n     * \n     * @return Returns a new dataframe containing all rows up until and including the specified index value.\n     * \n     * @example\n     * <pre>\n     * \n     * const df = new DataFrame({ \n     *      index: [0, 1, 2, 3], // This is the default index.\n     *      values: [10, 20, 30, 40],\n     * });\n     * \n     * const firstHalf = df.endAt(1);\n     * expect(firstHalf.toArray()).to.eql([10, 20]);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const timeSeriesDf = ... a dataframe indexed by date/time ...\n     * \n     * // Get all rows ending at a particular date.\n     * const allRowsUpToAndIncludingTheExactEndDate = df.endAt(new Date(2016, 5, 4)); \n     * </pre>\n     */\n    endAt (indexValue: IndexT): IDataFrame<IndexT, ValueT>;\n\n    /**\n     * Gets a new dataframe containing all rows up to the specified index value (exclusive).\n     * \n     * @param indexValue The index value at which to end the new dataframe.\n     * \n     * @return Returns a new dataframe containing all rows up to (but not including) the specified index value. \n     * \n     * @example\n     * <pre>\n     * \n     * const df = new DataFrame({ \n     *      index: [0, 1, 2, 3], // This is the default index.\n     *      values: [10, 20, 30, 40],\n     * });\n     * \n     * const firstHalf = df.before(2);\n     * expect(firstHalf.toArray()).to.eql([10, 20]);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const timeSeriesDf = ... a dataframe indexed by date/time ...\n     * \n     * // Get all rows before the specified date.\n     * const allRowsBeforeEndDate = df.before(new Date(2016, 5, 4)); \n     * </pre>\n     */\n    before (indexValue: IndexT): IDataFrame<IndexT, ValueT>;\n\n    /**\n     * Gets a new dataframe containing all rows after the specified index value (exclusive).\n     * \n     * @param indexValue The index value after which to start the new dataframe.\n     * \n     * @return Returns a new dataframe containing all rows after the specified index value.\n     * \n     * @example\n     * <pre>\n     * \n     * const df = new DataFrame({ \n     *      index: [0, 1, 2, 3], // This is the default index.\n     *      values: [10, 20, 30, 40],\n     * });\n     * \n     * const lastHalf = df.before(1);\n     * expect(lastHalf.toArray()).to.eql([30, 40]);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const timeSeriesDf = ... a dataframe indexed by date/time ...\n     * \n     * // Get all rows after the specified date.\n     * const allRowsAfterStartDate = df.after(new Date(2016, 5, 4)); \n     * </pre>\n     */\n    after (indexValue: IndexT): IDataFrame<IndexT, ValueT>;\n\n    /**\n     * Gets a new dataframe containing all rows between the specified index values (inclusive).\n     * \n     * @param startIndexValue The index at which to start the new dataframe.\n     * @param endIndexValue The index at which to end the new dataframe.\n     * \n     * @return Returns a new dataframe containing all values between the specified index values (inclusive).\n     * \n     * @example\n     * <pre>\n     * \n     * const df = new DataFrame({ \n     *      index: [0, 1, 2, 3, 4, 6], // This is the default index.\n     *      values: [10, 20, 30, 40, 50, 60],\n     * });\n     * \n     * const middleSection = df.between(1, 4);\n     * expect(middleSection.toArray()).to.eql([20, 30, 40, 50]);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const timeSeriesDf = ... a dataframe indexed by date/time ...\n     * \n     * // Get all rows between the start and end dates (inclusive).\n     * const allRowsBetweenDates = df.after(new Date(2016, 5, 4), new Date(2016, 5, 22)); \n     * </pre>\n     */\n    between (startIndexValue: IndexT, endIndexValue: IndexT): IDataFrame<IndexT, ValueT>;\n\n    /** \n     * Format the dataframe for display as a string.\n     * This forces lazy evaluation to complete.\n     * \n     * @return Generates and returns a string representation of the dataframe or dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * console.log(df.toString());\n     * </pre>\n     */\n    toString (): string;\n\n    /**\n     * Parse a column with string values and convert it to a column with int values.\n     *\n     * @param columnNameOrNames Specifies the column name or array of column names to parse.\n     * \n     * @return Returns a new dataframe with a particular named column parsed as ints.  \n     * \n     * @example\n     * <pre>\n     * \n     * const withParsedColumn = df.parseInts(\"MyIntColumn\");\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const withParsedColumns = df.parseInts([\"MyIntColumnA\", \"MyIntColumnA\"]);\n     * </pre>\n     */\n    parseInts (columnNameOrNames: string | string[]): IDataFrame<IndexT, ValueT>;\n\n    /**\n     * Parse a column with string values and convert it to a column with float values.\n     *\n     * @param columnNameOrNames Specifies the column name or array of column names to parse.\n     * \n     * @return  Returns a new dataframe with a particular named column parsed as floats.  \n     * \n     * @example\n     * <pre>\n     * \n     * const withParsedColumn = df.parseFloats(\"MyFloatColumn\");\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const withParsedColumns = df.parseFloats([\"MyFloatColumnA\", \"MyFloatColumnA\"]);\n     * </pre>\n     */\n    parseFloats (columnNameOrNames: string | string[]): IDataFrame<IndexT, ValueT>;\n\n    /**\n     * Parse a column with string values and convert it to a column with date values.\n     *\n     * @param columnNameOrNames -Specifies the column name or array of column names to parse.\n     * @param formatString Optional formatting string for dates.\n     * \n     * @return Returns a new dataframe with a particular named column parsed as dates.\n     * \n     * @example\n     * <pre>\n     * \n     * const withParsedColumn = df.parseDates(\"MyDateColumn\");\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const withParsedColumns = df.parseDates([\"MyDateColumnA\", \"MyDateColumnA\"]);\n     * </pre>\n     */\n    parseDates (columnNameOrNames: string | string[], formatString?: string): IDataFrame<IndexT, ValueT>;\n\n    /**\n     * Convert a column of values of different types to a column of string values.\n     *\n     * @param columnNames Specifies the column name or array of column names to convert to strings. Can also be a format spec that specifies which columns to convert and what their format should be. \n     * @param formatString Optional formatting string for dates.\n     * \n     * Numeral.js is used for number formatting.\n     * http://numeraljs.com/\n     * \n     * Moment is used for date formatting.\n     * https://momentjs.com/docs/#/parsing/string-format/\n     * \n     * @return Returns a new dataframe with a particular named column convert to strings.\n     * \n     * @example\n     * <pre>\n     * \n     * const withStringColumn = df.toStrings(\"MyDateColumn\", \"YYYY-MM-DD\");\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const withStringColumn = df.toStrings(\"MyFloatColumn\", \"0.00\");\n     * </pre>\n     */\n    toStrings (columnNames: string | string[] | IFormatSpec, formatString?: string): IDataFrame<IndexT, ValueT>;    \n\n    /**\n     * Produces a new dataframe with all string values truncated to the requested maximum length.\n     *\n     * @param maxLength The maximum length of the string values after truncation.\n     * \n     * @return Returns a new dataframe with all strings truncated to the specified maximum length.\n     * \n     * @example\n     * <pre>\n     * \n     * // Truncate all string columns to 100 characters maximum.\n     * const truncatedDf = df.truncateString(100);\n     * </pre>\n     */\n    truncateStrings (maxLength: number): IDataFrame<IndexT, ValueT>;\n\n    /**\n     * Produces a new dataframe with all number values rounded to the specified number of places.\n     *\n     * @param numDecimalPlaces The number of decimal places, defaults to 2.\n     * \n     * @returns Returns a new dataframe with all number values rounded to the specified number of places.\n     * \n     * @example\n     * <pre>\n     * \n     * const df = ... your data frame ...\n     * const rounded = df.round(); // Round numbers to two decimal places.\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const df = ... your data frame ...\n     * const rounded = df.round(3); // Round numbers to three decimal places.\n     * </pre>\n     */\n    round (numDecimalPlaces?: number): IDataFrame<IndexT, ValueT>;\n\n    /**\n     * Forces lazy evaluation to complete and 'bakes' the dataframe into memory.\n     * \n     * @return Returns a dataframe that has been 'baked', all lazy evaluation has completed.  \n     * \n     * @example\n     * <pre>\n     * \n     * const bakedDf = df.bake();\n     * </pre>\n     */\n    bake (): IDataFrame<IndexT, ValueT>;\n\n    /** \n     * Gets a new dataframe in reverse order.\n     * \n     * @return Returns a new dataframe that is the reverse of the original.\n     * \n     * @example\n     * <pre>\n     * \n     * const reversed = df.reverse();\n     * </pre>\n     */\n    reverse (): IDataFrame<IndexT, ValueT>;\n\n    /**\n     * Returns only the set of rows in the dataframe that are distinct according to some criteria.\n     * This can be used to remove duplicate rows from the dataframe.\n     *\n     * @param selector User-defined selector function that specifies the criteria used to make comparisons for duplicate rows.\n     * Note that the selector determines the object used for the comparison.  If the selector returns a new instance of an array or a\n     * javascript object, distinct will always include all rows since the object instances are different even if the members are the same.  \n     * \n     * @return Returns a dataframe containing only unique values as determined by the 'selector' function. \n     * \n     * @example\n     * <pre>\n     * \n     * // Remove duplicate rows by customer id. Will return only a single row per customer.\n     * const distinctCustomers = salesDf.distinct(sale => sale.CustomerId);\n     * </pre>\n     * \n     * @example\n     * \n     * <pre>\n     * // Remove duplicate rows across mutliple columns\n     * const safeJoinChar = '$';\n     * const distinctCustomers = salesDf.distinct(sale => [sale.CustomerId, sale.MonthOfYear].join(safeJoinChar));\n     * </pre>\n     */\n    distinct<ToT> (selector?: SelectorFn<ValueT, ToT>): IDataFrame<IndexT, ValueT>;\n\n    /**\n     * Collects rows in the dataframe into a {@link Series} of groups according to a user-defined selector function.\n     *\n     * @param selector User-defined selector function that specifies the criteria to group by.\n     *\n     * @return Returns a {@link Series} of groups. Each group is a dataframe with rows that have been grouped by the 'selector' function.\n     * \n     * @example\n     * <pre>\n     * \n     * const salesDf = ... product sales ...\n     * const salesByProduct = salesDf.groupBy(sale => sale.ProductId);\n     * for (const productSalesGroup of salesByProduct) {\n     *      // ... do something with each product group ...\n     *      const productId = productSalesGroup.first().ProductId;\n     *      const totalSalesForProduct = productSalesGroup.deflate(sale => sale.Amount).sum();\n     *      console.log(totalSalesForProduct);\n     * }\n     * </pre>\n     */\n    groupBy<GroupT> (selector: SelectorWithIndexFn<ValueT, GroupT>): ISeries<number, IDataFrame<IndexT, ValueT>>;\n    \n    /**\n     * Collects values in the series into a new series of groups based on if the values are the same or according to a user-defined selector function.\n     *\n     * @param selector Optional selector that specifies the criteria for grouping.\n     *\n     * @return Returns a {@link Series} of groups. Each group is a dataframe with rows that are the same or have been grouped by the 'selector' function.\n     * \n     * @example\n     * <pre>\n     * \n     * // Some ultra simple stock trading strategy backtesting...\n     * const dailyStockPriceDf = ... daily stock price for a company ...\n     * const priceGroups  = dailyStockPriceDf.groupBy(day => day.close > day.movingAverage);\n     * for (const priceGroup of priceGroups) {\n     *      // ... do something with each stock price group ...\n     * \n     *      const firstDay = priceGroup.first();\n     *      if (firstDay.close > movingAverage) {\n     *          // This group of days has the stock price above its moving average.\n     *          // ... maybe enter a long trade here ...\n     *      }\n     *      else {\n     *          // This group of days has the stock price below its moving average.\n     *          // ... maybe enter a short trade here ...\n     *      }\n     * }\n     * </pre>\n     */\n    groupSequentialBy<GroupT> (selector?: SelectorFn<ValueT, GroupT>): ISeries<number, IDataFrame<IndexT, ValueT>>;\n    \n    /**\n     * Concatenate multiple other dataframes onto this dataframe.\n     * \n     * @param dataframes Multiple arguments. Each can be either a dataframe or an array of dataframes.\n     * \n     * @return Returns a single dataframe concatenated from multiple input dataframes. \n     * \n     * @example\n     * <pre>\n     * \n     * const concatenated = a.concat(b);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const concatenated = a.concat(b, c);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const concatenated = a.concat([b, c]);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const concatenated = a.concat(b, [c, d]);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const otherDfs = [... array of dataframes...];\n     * const concatenated = a.concat(otherDfs);\n     * </pre>\n     */    \n    concat (...dataframes: (IDataFrame<IndexT, ValueT>[] | IDataFrame<IndexT, ValueT>)[]): IDataFrame<IndexT, ValueT>;\n    \n    /**\n    * Merge together multiple dataframes to create a new dataframe.\n    * Preserves the index of the first dataframe.\n    * \n    * @param s2, s3, s4, s4 Multiple dataframes to zip.\n    * @param zipper User-defined zipper function that merges rows. It produces rows for the new dataframe based-on rows from the input dataframes.\n    * \n    * @return Returns a single dataframe merged from multiple input dataframes. \n    * \n    * @example\n    * <pre>\n    * \n    * function produceNewRow (rowA, rowB) {\n    *       const outputRow = {\n    *           ValueA: rowA.Value,\n    *           ValueB: rowB.Value,\n    *       };\n    *       return outputRow;\n    * }\n    * \n    * const dfA = new DataFrame([ { Value: 10 }, { Value: 20 }, { Value: 30 }]);\n    * const dfB = new DataFrame([ { Value: 100 }, { Value: 200 }, { Value: 300 }]);\n    * const zippedDf = dfA.zip(dfB, produceNewRow);\n    * </pre>\n    */    \n    zip<Index2T, Value2T, ResultT>  (s2: IDataFrame<Index2T, Value2T>, zipper: Zip2Fn<ValueT, Value2T, ResultT> ): IDataFrame<IndexT, ResultT>;\n    zip<Index2T, Value2T, Index3T, Value3T, ResultT>  (s2: IDataFrame<Index2T, Value2T>, s3: IDataFrame<Index3T, Value3T>, zipper: Zip3Fn<ValueT, Value2T, Value3T, ResultT> ): IDataFrame<IndexT, ResultT>;\n    zip<Index2T, Value2T, Index3T, Value3T, Index4T, Value4T, ResultT>  (s2: IDataFrame<Index2T, Value2T>, s3: IDataFrame<Index3T, Value3T>, s4: IDataFrame<Index4T, Value4T>, zipper: Zip3Fn<ValueT, Value2T, Value3T, ResultT> ): IDataFrame<IndexT, ResultT>;\n    zip<ResultT>  (...args: any[]): IDataFrame<IndexT, ResultT>;\n\n    /**\n     * Sorts the dataframe in ascending order by a value defined by the user-defined selector function. \n     * \n     * @param selector User-defined selector function that selects the value to sort by.\n     * \n     * @return Returns a new dataframe that has been ordered accorrding to the value chosen by the selector function. \n     * \n     * @example\n     * <pre>\n     * \n     * // Order sales by amount from least to most.\n     * const orderedDf = salesDf.orderBy(sale => sale.Amount); \n     * </pre>\n     */\n    orderBy<SortT> (selector: SelectorWithIndexFn<ValueT, SortT>): IOrderedDataFrame<IndexT, ValueT, SortT>;\n\n    /**\n     * Sorts the dataframe in descending order by a value defined by the user-defined selector function. \n     * \n     * @param selector User-defined selector function that selects the value to sort by.\n     * \n     * @return Returns a new dataframe that has been ordered accorrding to the value chosen by the selector function. \n     * \n     * @example\n     * <pre>\n     * \n     * // Order sales by amount from most to least\n     * const orderedDf = salesDf.orderByDescending(sale => sale.Amount); \n     * </pre>\n     */\n    orderByDescending<SortT> (selector: SelectorWithIndexFn<ValueT, SortT>): IOrderedDataFrame<IndexT, ValueT, SortT>;\n        \n    /**\n     * Creates a new dataframe by merging two input dataframes.\n     * The resulting dataframe contains the union of rows from the two input dataframes.\n     * These are the unique combination of rows in both dataframe.\n     * This is basically a concatenation and then elimination of duplicates.\n     *\n     * @param other The other dataframes to merge.\n     * @param selector Optional user-defined selector function that selects the value to compare to determine distinctness.\n     * \n     * @return Returns the union of the two dataframes.\n     * \n     * @example\n     * <pre>\n     *\n     * const dfA = ...\n     * const dfB = ...\n     * const merged = dfA.union(dfB);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     *\n     * // Merge two sets of customer records that may contain the same\n     * // customer record in each set. This is basically a concatenation\n     * // of the dataframes and then an elimination of any duplicate records\n     * // that result.\n     * const customerRecordsA = ...\n     * const customerRecordsB = ...\n     * const mergedCustomerRecords = customerRecordsA.union(\n     *      customerRecordsB, \n     *      customerRecord => customerRecord.CustomerId\n     * );\n     * </pre>\n     * \n     * \n     * @example\n     * <pre>\n     *\n     * // Note that you can achieve the exact same result as the previous\n     * // example by doing a {@link DataFrame.concat) and {@link DataFrame.distinct}\n     * // of the dataframes and then an elimination of any duplicate records\n     * // that result.\n     * const customerRecordsA = ...\n     * const customerRecordsB = ...\n     * const mergedCustomerRecords = customerRecordsA\n     *      .concat(customerRecordsB)\n     *      .distinct(customerRecord => customerRecord.CustomerId);\n     * </pre>\n     * \n     */\n    union<KeyT = ValueT> (\n        other: IDataFrame<IndexT, ValueT>, \n        selector?: SelectorFn<ValueT, KeyT>): \n            IDataFrame<IndexT, ValueT>;\n\n    /**\n     * Creates a new dataframe by merging two input dataframes.\n     * The resulting dataframe contains the intersection of rows from the two input dataframes.\n     * These are only the rows that appear in both dataframes.\n     *\n     * @param inner The inner dataframe to merge (the dataframe you call the function on is the 'outer' dataframe).\n     * @param outerSelector Optional user-defined selector function that selects the key from the outer dataframe that is used to match the two dataframes.\n     * @param innerSelector Optional user-defined selector function that selects the key from the inner dataframe that is used to match the two dataframes.\n     * \n     * @return Returns a new dataframe that contains the intersection of rows from the two input dataframes.\n     * \n     * @example\n     * <pre>\n     * \n     * const dfA = ...\n     * const dfB = ...\n     * const mergedDf = dfA.intersection(dfB);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     *\n     * // Merge two sets of customer records to find only the\n     * // customers that appears in both.\n     * const customerRecordsA = ...\n     * const customerRecordsB = ...\n     * const intersectionOfCustomerRecords = customerRecordsA.intersection(\n     *      customerRecordsB, \n     *      customerRecord => customerRecord.CustomerId\n     * );\n     * </pre>     \n     * */\n    intersection<InnerIndexT = IndexT, InnerValueT = ValueT, KeyT = ValueT> (\n        inner: IDataFrame<InnerIndexT, InnerValueT>, \n        outerSelector?: SelectorFn<ValueT, KeyT>,\n        innerSelector?: SelectorFn<InnerValueT, KeyT>): \n            IDataFrame<IndexT, ValueT>;\n    \n    /**\n     * Creates a new dataframe by merging two input dataframes.\n     * The resulting dataframe contains only the rows from the 1st dataframe that don't appear in the 2nd dataframe.\n     * This is essentially subtracting the rows from the 2nd dataframe from the 1st and creating a new dataframe with the remaining rows.\n     *\n     * @param inner The inner dataframe to merge (the dataframe you call the function on is the 'outer' dataframe).\n     * @param outerSelector Optional user-defined selector function that selects the key from the outer dataframe that is used to match the two dataframes.\n     * @param innerSelector Optional user-defined selector function that selects the key from the inner dataframe that is used to match the two dataframes.\n     * \n     * @return Returns a new dataframe that contains only the rows from the 1st dataframe that don't appear in the 2nd dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * const dfA = ...\n     * const dfB = ...\n     * const remainingDf = dfA.except(dfB);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     *\n     * // Find the list of customers haven't bought anything recently.\n     * const allCustomers = ... list of all customers ...\n     * const recentCustomers = ... list of customers who have purchased recently ...\n     * const remainingCustomers = allCustomers.except(\n     *      recentCustomers, \n     *      customerRecord => customerRecord.CustomerId\n     * );\n     * </pre>\n     */\n    except<InnerIndexT = IndexT, InnerValueT = ValueT, KeyT = ValueT> (\n        inner: IDataFrame<InnerIndexT, InnerValueT>, \n        outerSelector?: SelectorFn<ValueT, KeyT>,\n        innerSelector?: SelectorFn<InnerValueT, KeyT>): \n            IDataFrame<IndexT, ValueT>;\n\n   /**\n     * Creates a new dataframe by merging two input dataframes.\n     * The resulting dataframe contains only those rows that have matching keys in both input dataframes.\n     *\n     * @param inner The 'inner' dataframe to join (the dataframe you are callling the function on is the 'outer' dataframe).\n     * @param outerKeySelector User-defined selector function that chooses the join key from the outer dataframe.\n     * @param innerKeySelector User-defined selector function that chooses the join key from the inner dataframe.\n     * @param resultSelector User-defined function that merges outer and inner values.\n     * \n     * @return Returns the new merged dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * // Join together two sets of customers to find those\n     * // that have bought both product A and product B.\n     * const customerWhoBoughtProductA = ...\n     * const customerWhoBoughtProductB = ...\n     * const customersWhoBoughtBothProductsDf = customerWhoBoughtProductA.join(\n     *          customerWhoBoughtProductB,\n     *          customerA => customerA.CustomerId, // Join key.\n     *          customerB => customerB.CustomerId, // Join key.\n     *          (customerA, customerB) => {\n     *              return {\n     *                  // ... merge the results ...\n     *              };\n     *          }\n     *      );\n     * </pre>\n     */\n    join<KeyT, InnerIndexT, InnerValueT, ResultValueT> (\n        inner: IDataFrame<InnerIndexT, InnerValueT>, \n        outerKeySelector: SelectorFn<ValueT, KeyT>, \n        innerKeySelector: SelectorFn<InnerValueT, KeyT>, \n        resultSelector: JoinFn<ValueT, InnerValueT, ResultValueT>):\n            IDataFrame<number, ResultValueT>;\n\n    /**\n     * Creates a new dataframe by merging two input dataframes.\n     * The resulting dataframe contains only those rows that are only present in one or the other of the dataframes, or both.\n     *\n     * @param inner The 'inner' dataframe to join (the dataframe you are callling the function on is the 'outer' dataframe).\n     * @param outerKeySelector User-defined selector function that chooses the join key from the outer dataframe.\n     * @param innerKeySelector User-defined selector function that chooses the join key from the inner dataframe.\n     * @param resultSelector User-defined function that merges outer and inner values.\n     * \n     * Implementation from here:\n     * \n     * \thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n     * \n     * @return Returns the new merged dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * // Join together two sets of customers to find those\n     * // that have bought either product A or product B, or both.\n     * const customerWhoBoughtProductA = ...\n     * const customerWhoBoughtProductB = ...\n     * const customersWhoBoughtEitherProductButNotBothDf = customerWhoBoughtProductA.joinOuter(\n     *          customerWhoBoughtProductB,\n     *          customerA => customerA.CustomerId, // Join key.\n     *          customerB => customerB.CustomerId, // Join key.\n     *          (customerA, customerB) => {\n     *              return {\n     *                  // ... merge the results ...\n     *              };\n     *          }\n     *      );\n     * </pre>\n     */\n    joinOuter<KeyT, InnerIndexT, InnerValueT, ResultValueT> (\n        inner: IDataFrame<InnerIndexT, InnerValueT>, \n        outerKeySelector: SelectorFn<ValueT, KeyT>, \n        innerKeySelector: SelectorFn<InnerValueT, KeyT>, \n        resultSelector: JoinFn<ValueT | null, InnerValueT | null, ResultValueT>):\n            IDataFrame<number, ResultValueT>;\n    \n    /**\n     * Creates a new dataframe by merging two input dataframes.\n     * The resulting dataframe contains only those rows that are present either in both dataframes or only in the outer (left) dataframe.\n     * \n     * @param inner The 'inner' dataframe to join (the dataframe you are callling the function on is the 'outer' dataframe).\n     * @param outerKeySelector User-defined selector function that chooses the join key from the outer dataframe.\n     * @param innerKeySelector User-defined selector function that chooses the join key from the inner dataframe.\n     * @param resultSelector User-defined function that merges outer and inner values.\n     * \n     * Implementation from here:\n     * \n     * \thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n     * \n     * @return Returns the new merged dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * // Join together two sets of customers to find those\n     * // that have bought either just product A or both product A and product B.\n     * const customerWhoBoughtProductA = ...\n     * const customerWhoBoughtProductB = ...\n     * const boughtJustAorAandB = customerWhoBoughtProductA.joinOuterLeft(\n     *          customerWhoBoughtProductB,\n     *          customerA => customerA.CustomerId, // Join key.\n     *          customerB => customerB.CustomerId, // Join key.\n     *          (customerA, customerB) => {\n     *              return {\n     *                  // ... merge the results ...\n     *              };\n     *          }\n     *      );\n     * </pre>\n     */\n    joinOuterLeft<KeyT, InnerIndexT, InnerValueT, ResultValueT> (\n        inner: IDataFrame<InnerIndexT, InnerValueT>, \n        outerKeySelector: SelectorFn<ValueT, KeyT>, \n        innerKeySelector: SelectorFn<InnerValueT, KeyT>, \n        resultSelector: JoinFn<ValueT | null, InnerValueT | null, ResultValueT>):\n            IDataFrame<number, ResultValueT>;\n\n    /**\n     * Creates a new dataframe by merging two input dataframes.\n     * The resulting dataframe contains only those rows that are present either in both dataframes or only in the inner (right) dataframe.\n     *\n     * @param inner The 'inner' dataframe to join (the dataframe you are callling the function on is the 'outer' dataframe).\n     * @param outerKeySelector User-defined selector function that chooses the join key from the outer dataframe.\n     * @param innerKeySelector User-defined selector function that chooses the join key from the inner dataframe.\n     * @param resultSelector User-defined function that merges outer and inner values.\n     * \n     * Implementation from here:\n     * \n     * \thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n     * \n     * @return Returns the new merged dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * // Join together two sets of customers to find those\n     * // that have bought either just product B or both product A and product B.\n     * const customerWhoBoughtProductA = ...\n     * const customerWhoBoughtProductB = ...\n     * const boughtJustAorAandB = customerWhoBoughtProductA.joinOuterRight(\n     *          customerWhoBoughtProductB,\n     *          customerA => customerA.CustomerId, // Join key.\n     *          customerB => customerB.CustomerId, // Join key.\n     *          (customerA, customerB) => {\n     *              return {\n     *                  // ... merge the results ...\n     *              };\n     *          }\n     *      );\n     * </pre>\n     */\n    joinOuterRight<KeyT, InnerIndexT, InnerValueT, ResultValueT> (\n        inner: IDataFrame<InnerIndexT, InnerValueT>, \n        outerKeySelector: SelectorFn<ValueT, KeyT>, \n        innerKeySelector: SelectorFn<InnerValueT, KeyT>, \n        resultSelector: JoinFn<ValueT | null, InnerValueT | null, ResultValueT>):\n            IDataFrame<number, ResultValueT>;\n\n    /**\n     * Produces a summary of dataframe.\n     * \n     * @param spec Optional parameter that specifies which columns to aggregate and how to aggregate them. Leave this out to produce a default summary of all columns.\n     * \n     * @returns A object with fields that summary the values in the dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * const summary = df.summarize();\n     * console.log(summary);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const summary = df.summarize({ // Summarize using pre-defined functions.\n     *      Column1: Series.sum,\n     *      Column2: Series.average,\n     *      Column3: Series.count,\n     * });\n     * console.log(summary);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const summary = df.summarize({ // Summarize using custom functions.\n     *      Column1: series => series.sum(),\n     *      Column2: series => series.std(),\n     *      ColumnN: whateverFunctionYouWant,\n     * });\n     * console.log(summary);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const summary = df.summarize({ // Multiple output fields per column.\n     *      Column1: {\n     *          OutputField1: Series.sum,\n     *          OutputField2: Series.average,\n     *      },\n     *      Column2: {\n     *          OutputField3: series => series.sum(),\n     *          OutputFieldN: whateverFunctionYouWant,\n     *      },\n     * });\n     * console.log(summary);\n     * </pre>\n     */\n    summarize<OutputValueT = any> (\n        spec?: IMultiColumnAggregatorSpec\n            ): OutputValueT;\n\n    /**\n     * Reshape (or pivot) a dataframe based on column values.\n     * This is a powerful function that combines grouping, aggregation and sorting.\n     *\n     * @param columnOrColumns Column name whose values make the new DataFrame's columns.\n     * @param valueColumnNameOrSpec Column name or column spec that defines the columns whose values should be aggregated.\n     * @param aggregator Optional function used to aggregate pivotted vales. \n     *\n     * @return Returns a new dataframe that has been pivoted based on a particular column's values. \n     * \n     * @example\n     * <pre>\n     * \n     * // Simplest example.\n     * // Group by the values in 'PivotColumn'.\n     * // The column 'ValueColumn' is aggregated for each group and this becomes the \n     * // values in the output column.\n     * const pivottedDf = df.pivot(\"PivotColumn\", \"ValueColumn\", values => values.average());\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * // Multiple input column example.\n     * // Similar to the previous example except now we are aggregating multiple input columns.\n     * // Each group has the average computed for 'ValueColumnA' and the sum for 'ValueColumnB'.\n     * const pivottedDf = df.pivot(\"PivotColumn\", { \n     *      ValueColumnA: aValues => aValues.average(),\n     *      ValueColumnB:  bValues => bValues.sum(),\n     * });\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * // Multiple output column example.\n     * // Similar to the previous example except now we are aggregating multiple outputs for each input column.\n     * // This example produces an output dataframe with columns OutputColumnA, B, C and D.\n     * // OutputColumnA/B are the sum and average of ValueColumnA across each group as defined by PivotColumn.\n     * // OutputColumnC/D are the sum and average of ValueColumnB across each group as defined by PivotColumn.\n     * const pivottedDf = df.pivot(\"PivotColumn\", { \n     *      ValueColumnA: {\n     *          OutputColumnA: aValues => aValues.sum(),\n     *          OutputColumnB: aValues => aValues.average(),\n     *      },\n     *      ValueColumnB: {\n     *          OutputColumnC: bValues => bValues.sum(),\n     *          OutputColumnD: bValues => bValues.average(),\n     *      },\n     * });\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * // Full multi-column example.\n     * // Similar to the previous example, but now we are pivotting on multiple columns.\n     * // We now group by 'PivotColumnA' and then by 'PivotColumnB', effectively creating a \n     * // multi-level nested group.\n     * const pivottedDf = df.pivot([\"PivotColumnA\", \"PivotColumnB\" ], { \n     *      ValueColumnA: aValues => aValues.average(),\n     *      ValueColumnB:  bValues => bValues.sum(),\n     * });\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * // To help understand the pivot function, let's expand it out and look at what it does internally.\n     * // Take the simplest example:\n     * const pivottedDf = df.pivot(\"PivotColumn\", \"ValueColumn\", values => values.average());\n     * \n     * // If we expand out the internals of the pivot function, it will look something like this:\n     * const pivottedDf = df.groupBy(row => row.PivotColumn)\n     *          .select(group => ({\n     *              PivotColumn: group.first().PivotColumn,\n     *              ValueColumn: group.deflate(row => row.ValueColumn).average()\n     *          }))\n     *          .orderBy(row  => row.PivotColumn);\n     * \n     * // You can see that pivoting a dataframe is the same as grouping, aggregating and sorting it.\n     * // Does pivoting seem simpler now?\n     * \n     * // It gets more complicated than that of course, because the pivot function supports multi-level nested \n     * // grouping and aggregation of multiple columns. So a full expansion of the pivot function is rather complex.\n     * </pre>\n     */\n    pivot<NewValueT = ValueT> (\n        columnOrColumns: string | Iterable<string>, \n        valueColumnNameOrSpec: string | IMultiColumnAggregatorSpec, \n        aggregator?: (values: ISeries<number, any>) => any\n            ): IDataFrame<number, NewValueT>;\n\n    /**\n     * Unpivot a DataFrame from wide to long format, optionally leaving identifiers set.\n     * This is a powerful function that combines grouping, aggregation and sorting.\n     *\n     * @param idColumnOrColumns Column(s) to use as identifier variables.\n     * @param valueColumnOrColumns Column(s) to unpivot.\n     *\n     * @return Returns a new dataframe that has been unpivoted based on a particular column's values. \n     * \n     * @example\n     * <pre>\n     * \n     * // Use column in 'idColumnOrColumns' as the identity column.\n     * // The column name passed in 'valueColumnOrColumns' forms the 'variable' column\n     * // and the values are used to populate the 'value' column of the new dataframe.\n     * const moltenDf = df.melt(\"A\", \"B\");\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * // Multiple value columns example.\n     * // Similar to the previous example except now the variable column will constitute\n     * // of multiple values.\n     * const moltenDf = df.melt(\"A\", [\"B\", \"C\"]);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * // Multiple identity and value columns example.\n     * const moltenDf = df.melt([\"A\", \"B\"], [\"C\", \"D\"]);\n     * </pre>\n     */\n    melt<NewValueT = ValueT> (\n        idColumnOrColumns: string | Iterable<string>,\n        valueColumnOrColumns: string | Iterable<string>\n            ): IDataFrame<IndexT, NewValueT>;\n\n    /**\n     * Insert a pair at the start of the dataframe.\n     * Doesn't modify the original dataframe! The returned dataframe is entirely new and contains rows from the original dataframe plus the inserted pair.\n     *\n     * @param pair The index/value pair to insert.\n     * \n     * @return Returns a new dataframe with the specified pair inserted.\n     * \n     * @example\n     * <pre>\n     * \n     * const newIndex = ... index of the new row ...\n     * const newRow = ... the new data row to insert ...\n     * const insertedDf = df.insertPair([newIndex, newRows]);\n     * </pre>\n     */\n    insertPair (pair: [IndexT, ValueT]): IDataFrame<IndexT, ValueT>;\n\n    /**\n     * Append a pair to the end of a dataframe.\n     * Doesn't modify the original dataframe! The returned dataframe is entirely new and contains rows from the original dataframe plus the appended pair.\n     *\n     * @param pair The index/value pair to append.\n     *  \n     * @return Returns a new dataframe with the specified pair appended.\n     * \n     * @example\n     * <pre>\n     * \n     * const newIndex = ... index of the new row ...\n     * const newRow = ... the new data row to append ...\n     * const appendedDf = df.appendPair([newIndex, newRows]);\n     * </pre>\n     */\n    appendPair (pair: [IndexT, ValueT]): IDataFrame<IndexT, ValueT>;\n\n    /**\n     * Removes rows from the dataframe by index.\n     */\n    remove(index: IndexT): IDataFrame<IndexT, ValueT>;\n\n    /**\n     * Fill gaps in a dataframe.\n     *\n     * @param comparer User-defined comparer function that is passed pairA and pairB, two consecutive rows, return truthy if there is a gap between the rows, or falsey if there is no gap.\n     * @param generator User-defined generator function that is passed pairA and pairB, two consecutive rows, returns an array of pairs that fills the gap between the rows.\n     *\n     * @return Returns a new dataframe with gaps filled in.\n     * \n     * @example\n     * <pre>\n     * \n     *   var sequenceWithGaps = ...\n     *\n     *  // Predicate that determines if there is a gap.\n     *  var gapExists = (pairA, pairB) => {\n     *      // Returns true if there is a gap.\n     *      return true;\n     *  };\n     *\n     *  // Generator function that produces new rows to fill the game.\n     *  var gapFiller = (pairA, pairB) => {\n     *      // Create an array of index, value pairs that fill the gaps between pairA and pairB.\n     *      return [\n     *          newPair1,\n     *          newPair2,\n     *          newPair3,\n     *      ];\n     *  };\n     *\n     *  var sequenceWithoutGaps = sequenceWithGaps.fillGaps(gapExists, gapFiller);\n     * </pre>\n     */\n    fillGaps (comparer: ComparerFn<[IndexT, ValueT], [IndexT, ValueT]>, generator: GapFillFn<[IndexT, ValueT], [IndexT, ValueT]>): IDataFrame<IndexT, ValueT>;\n\n    /**\n     * Returns the specified default dataframe if the input dataframe is empty. \n     *\n     * @param defaultSequence Default dataframe to return if the input dataframe is empty.\n     * \n     * @return Returns 'defaultSequence' if the input dataframe is empty. \n     * \n     * @example\n     * <pre>\n     * \n     * const emptyDataFrame = new DataFrame();\n     * const defaultDataFrame = new DataFrame([ { A: 1 }, { A: 2 }, { A: 3 } ]);\n     * expect(emptyDataFrame.defaultIfEmpty(defaultDataFrame)).to.eql(defaultDataFrame);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const nonEmptyDataFrame = new DataFrame([ { A: 100 }]);\n     * const defaultDataFrame = new DataFrame([ { A: 1 }, { A: 2 }, { A: 3 } ]);\n     * expect(nonEmptyDataFrame.defaultIfEmpty(defaultDataFrame)).to.eql(nonEmptyDataFrame);\n     * </pre>\n     */\n    defaultIfEmpty (defaultSequence: ValueT[] | IDataFrame<IndexT, ValueT>): IDataFrame<IndexT, ValueT>;\n\n    /**\n     * Detect the the frequency of the types of the values in the dataframe.\n     * This is a good way to understand the shape of your data.\n     *\n     * @return Returns a dataframe with rows that confirm to {@link ITypeFrequency} that describes the data types contained in the original dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * const df = dataForge.readFileSync(\"./my-data.json\").parseJSON();\n     * const dataTypes = df.detectTypes();\n     * console.log(dataTypes.toString());\n     * </pre>\n     */\n    detectTypes (): IDataFrame<number, ITypeFrequency>;\n\n    /**\n     * Detect the frequency of the values in the dataframe.\n     * This is a good way to understand the shape of your data.\n     *\n     * @return Returns a dataframe with rows that conform to {@link IValueFrequency} that describes the values contained in the original dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * const df = dataForge.readFileSync(\"./my-data.json\").parseJSON();\n     * const dataValues = df.detectValues();\n     * console.log(dataValues.toString());\n     * </pre>\n     */\n    detectValues (): IDataFrame<number, IValueFrequency>;\n\n    /**\n     * Serialize the dataframe to the JSON data format.\n     * \n     * @return Returns a string in the JSON data format that represents the dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * const jsonData = df.toJSON();\n     * console.log(jsonData);\n     * </pre>\n     */\n    toJSON (): string;\n\n    /**\n     * Serialize the dataframe to the JSON5 data format.\n     * \n     * @return Returns a string in the JSON5 data format that represents the dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * const jsonData = df.toJSON5();\n     * console.log(jsonData);\n     * </pre>\n     */\n    toJSON5 (): string;\n\n    /**\n     * Serialize the dataframe to the CSV data format.\n     * \n     * @param options Options for CSV output. The options object is passed directly to [PapaParse.unparse](https://www.papaparse.com/docs#unparse), please see [PapaParse docs for additional options](https://www.papaparse.com/docs#unparse-config-default).\n     * \n     * @return Returns a string in the CSV data format that represents the dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * const csvData = df.toCSV();\n     * console.log(csvData);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const csvData = df.toCSV({ header: false });\n     * console.log(csvData);\n     * </pre>\n     */\n    toCSV (options?: ICSVOutputOptions): string;\n\n    /**\n     * Serialize the dataframe to HTML.\n     * \n     * @return Returns a string in HTML format that represents the dataframe.\n     */\n    toHTML (): string;\n    \n    /**\n     * Serialize the dataframe to an ordinary JavaScript data structure.\n     * The resulting data structure is suitable for further serialization to JSON and can be used to \n     * transmit a DataFrame and its internal structure over the wire.\n     * Use the {@link deserialize} function to later reconstitute the serialized dataframe.\n     * \n     * @return Returns a JavaScript data structure conforming to {@link ISerializedDataFrame} that represents the dataframe and its internal structure.\n     * \n     * @example\n     * <pre>\n     * \n     * const jsDataStructure = df.serialize();\n     * const jsonData = JSON.stringify(jsDataStructure);\n     * console.log(jsonData);\n     * const deserializedJsDataStructure = JSON.parse(jsonData);\n     * const deserializedDf = DataFrame.deserialize(deserializedJsDataStructure); // Reconsituted.\n     * </pre>\n     */\n    serialize (): any;\n}\n\n/**\n * Interface to a dataframe that has been sorted.\n */\nexport interface IOrderedDataFrame<IndexT = number, ValueT = any, SortT = any> extends IDataFrame<IndexT, ValueT> {\n\n    /** \n     * Applys additional sorting (ascending) to an already sorted dataframe.\n     * \n     * @param selector User-defined selector that selects the additional value to sort by.\n     * \n     * @return Returns a new dataframe has been additionally sorted by the value chosen by the selector function. \n     * \n     * @example\n     * <pre>\n     * \n     * // Order sales by salesperson and then by amount (from least to most).\n     * const orderedDf = salesDf.orderBy(sale => sale.SalesPerson).thenBy(sale => sale.Amount);\n     * </pre>\n     */\n    thenBy<SortT> (selector: SelectorWithIndexFn<ValueT, SortT>): IOrderedDataFrame<IndexT, ValueT, SortT>;\n\n    /** \n     * Applys additional sorting (descending) to an already sorted dataframe.\n     * \n     * @param selector User-defined selector that selects the additional value to sort by.\n     * \n     * @return Returns a new dataframe has been additionally sorted by the value chosen by the selector function. \n     * \n     * @example\n     * <pre>\n     * \n     * // Order sales by salesperson and then by amount (from most to least).\n     * const orderedDf = salesDf.orderBy(sale => sale.SalesPerson).thenByDescending(sale => sale.Amount);\n     * </pre>\n     */\n    thenByDescending<SortT> (selector: SelectorWithIndexFn<ValueT, SortT>): IOrderedDataFrame<IndexT, ValueT, SortT>;\n}\n\n//\n// Represents the contents of a dataframe.\n//\ninterface IDataFrameContent<IndexT, ValueT> {\n\n    /***\n     * Iterates the index for the dataframe.\n     */\n    index: Iterable<IndexT>;\n\n    /**\n     * Iterates values for each row in the dataframe.\n     */\n    values: Iterable<ValueT>;\n\n    /**\n     * Iterates the index/value pairs in the dataframe.\n     */\n    pairs: Iterable<[IndexT, ValueT]>;\n\n    /**\n      * Array or iterable of column names that are in the dataframe.\n      * The order matters. This arrays specifies the ordering of columns which\n      * is important when rendering tables or writing out CSV data files.\n      */\n    columnNames: string[] | Iterable<string>,\n \n    /***\n      * Set to true when the dataframe has been baked into memory\n      * and does not need to be lazily evaluated.\n      */\n    isBaked: boolean,\n\n    /**\n     * Set to true to make column names be case sensitive.\n     * Default behaviour is to treat column names as case insensitive.\n     */\n    isCaseSensitive: boolean;\n}\n\n/**\n * Class that represents a dataframe.\n * A dataframe contains an indexed sequence of data records.\n * Think of it as a spreadsheet or CSV file in memory.\n * \n * Each data record contains multiple named fields, the value of each field represents one row in a column of data.\n * Each column of data is a named {@link Series}.\n * You think of a dataframe a collection of named data series.\n * \n * @typeparam IndexT The type to use for the index.\n * @typeparam ValueT The type to use for each row/data record.\n */\nexport class DataFrame<IndexT = number, ValueT = any> implements IDataFrame<IndexT, ValueT> {\n\n    //\n    // Function to lazy evaluate the configuration of the dataframe.\n    //\n    private configFn: DataFrameConfigFn<IndexT, ValueT> | null = null;\n    \n    //\n    // The content of the dataframe.\n    // When this is null it means the dataframe is yet to be lazy initialised.\n    //\n    private content: IDataFrameContent<IndexT, ValueT> | null = null;\n    \n    // \n    // Indexed content of the dataframe.\n    // \n    private indexedContent: Map<any, ValueT> | null = null;\n    \n    private static readonly defaultCountIterable = new CountIterable();\n    private static readonly defaultEmptyIterable = new EmptyIterable();\n    \n    //\n    // Initialise a series from an iterator (or generator object).\n    //\n    private static initFromIterator<IndexT, ValueT>(iterator: Iterator<ValueT>): IDataFrameContent<IndexT, ValueT> {\n        return DataFrame.initFromIterable<IndexT, ValueT>(new CachedIteratorIterable(iterator));\n    }\n\n    //\n    // Initialise dataframe content from an iterable of values.\n    //\n    private static initFromIterable<IndexT, ValueT>(arr: Iterable<ValueT>): IDataFrameContent<IndexT, ValueT> {\n        const firstResult = arr[Symbol.iterator]().next();\n        const columnNames = !firstResult.done ? Object.keys(firstResult.value as any) : [];\n        return {\n            index: DataFrame.defaultCountIterable,\n            values: arr,\n            pairs: new MultiIterable([DataFrame.defaultCountIterable, arr]),\n            isBaked: true,\n            columnNames: columnNames,\n            isCaseSensitive: false,\n        };\n    }\n\n    //\n    // Initialise an empty dataframe.\n    //\n    private static initEmpty<IndexT, ValueT>(): IDataFrameContent<IndexT, ValueT> {\n        return {\n            index: DataFrame.defaultEmptyIterable,\n            values: DataFrame.defaultEmptyIterable,\n            pairs: DataFrame.defaultEmptyIterable,\n            isBaked: true,\n            columnNames: [],\n            isCaseSensitive: false,\n        };\n    }\n\n    //\n    // Initialise dataframe column names.\n    //\n    private static initColumnNames(inputColumnNames: Iterable<string>, isCaseSensitive?: boolean): Iterable<string> {\n        const outputColumnNames: string[] = [];\n        const columnNamesMap: any = {};\n\n        // Convert column names to strings.\n        const columnNames = Array.from(inputColumnNames).map(columnName => columnName.toString());\n\n        // Search for duplicate column names.\n        for (const columnName of columnNames) {\n            const columnNameLwr = isCaseSensitive !== undefined  && isCaseSensitive ? columnName : columnName.toLowerCase();\n\n            if (columnNamesMap[columnNameLwr] === undefined) {\n                columnNamesMap[columnNameLwr] = 1;\n            }\n            else {\n                columnNamesMap[columnNameLwr] += 1;\n            }\n        }\n\n        const columnNoMap: any = {};\n\n        for (const columnName of columnNames) {\n            const columnNameLwr = isCaseSensitive !== undefined  && isCaseSensitive ? columnName : columnName.toLowerCase();\n            if (columnNamesMap[columnNameLwr] > 1) {\n                let curColumnNo = 1;\n\n                // There are duplicates of this column.\n                if (columnNoMap[columnNameLwr] !== undefined) {\n                    curColumnNo = columnNoMap[columnNameLwr];\n                }\n\n                outputColumnNames.push(columnName + \".\" + curColumnNo);\n                columnNoMap[columnNameLwr] = curColumnNo + 1;\n            }\n            else {\n                // No duplicates.\n                outputColumnNames.push(columnName);\n            }\n        }\n\n        return outputColumnNames;\n    }\n\n    //\n    // Returns true if the input is an iterator.\n    //\n    private static isIterator(input: any): boolean {\n        return isObject(input) && isFunction(input.next);\n    }\n\n    //\n    // Returns true if the input is an iterable.\n    //\n    private static isIterable(input: any): boolean {\n        return isArray(input) || \n               (isObject(input) && isFunction(input[Symbol.iterator]));\n    }\n\n    //\n    // Check that a value is an interable.\n    //\n    private static checkIterable<T>(input: any, fieldName: string): void {\n        if (DataFrame.isIterable(input)) {\n            // Assume it's an iterable.\n            // Ok\n        }\n        else {\n            // Not ok\n            throw new Error(\"Expected '\" + fieldName + \"' field of DataFrame config object to be an array of values or an iterable of values.\");\n        }\n    }\n\n    //\n    // Initialise dataframe content from a config object.\n    //\n    private static initFromConfig<IndexT, ValueT>(config: IDataFrameConfig<IndexT, ValueT>): IDataFrameContent<IndexT, ValueT> {\n\n        let index: Iterable<IndexT>;\n        let values: Iterable<ValueT>;\n        let pairs: Iterable<[IndexT, ValueT]> | undefined;\n        let isBaked = false;\n        let columnNames: Iterable<string>;\n\n        if (config.pairs) {\n            if (DataFrame.isIterator(config.pairs)) {\n                pairs = new CachedIteratorIterable(config.pairs as Iterator<[IndexT, ValueT]>);\n            }\n            else {\n                DataFrame.checkIterable<[IndexT, ValueT]>(config.pairs, \"pairs\");\n                pairs = config.pairs as Iterable<[IndexT, ValueT]>;\n            }\n        }\n        \n        if (config.columns) {\n            let columnsConfig: any = config.columns;\n\n            if (DataFrame.isIterator(columnsConfig)) {\n                columnsConfig = new CachedIteratorIterable(columnsConfig as Iterator<IColumnConfig>);\n            }\n\n            if (DataFrame.isIterable(columnsConfig)) {\n                const iterableColumnsConfig = columnsConfig as Iterable<IColumnConfig>;\n                columnNames = Array.from(iterableColumnsConfig).map(column => column.name);\n                columnsConfig = toMap(iterableColumnsConfig, column => column.name, column => column.series);\n            }\n            else {\n                if (!isObject(columnsConfig)) throw new Error(\"Expected 'columns' member of 'config' parameter to DataFrame constructor to be an object with fields that define columns.\");\n\n                columnNames = Object.keys(columnsConfig);\n            }\n\n            const columnIterables: any[] = [];\n            for (const columnName of columnNames) {\n                let columnConfig = columnsConfig[columnName];\n                if (DataFrame.isIterator(columnConfig)) {\n                    columnConfig = new CachedIteratorIterable(columnConfig as Iterator<any>);\n                }\n                else {\n                    DataFrame.checkIterable(columnConfig, columnName);\n                }\n                columnIterables.push(columnConfig);\n            }\n\n            values = new CsvRowsIterable(columnNames, new MultiIterable(columnIterables));\n        }\n        else {\n            if (config.columnNames) {\n                if (DataFrame.isIterator(config.columnNames)) {\n                    columnNames = new CachedIteratorIterable(config.columnNames as Iterator<string>);\n                }\n                else {\n                    columnNames = config.columnNames as Iterable<string>;\n                }\n\n                columnNames = this.initColumnNames(columnNames, config.caseSensitive);\n            }\n\n            if (config.rows) {\n                if (!config.columnNames) {\n                    columnNames = new SelectIterable(new CountIterable(), c => \"Column.\" + c.toString());\n                }\n\n                let rows: Iterable<any>\n                if (DataFrame.isIterator(config.rows)) {\n                    rows = new CachedIteratorIterable(config.rows as Iterator<any>);\n                }\n                else {\n                    DataFrame.checkIterable<any[][]>(config.rows, 'rows')\n                    rows = config.rows as Iterable<any>;\n                }\n                    \n                values = new CsvRowsIterable(columnNames!, rows); // Convert data from rows to columns.\n            }\n            else if (config.values) {\n                if (DataFrame.isIterator(config.values)) {\n                    values = new CachedIteratorIterable(config.values as Iterator<ValueT>);\n                }\n                else {\n                    DataFrame.checkIterable<ValueT>(config.values, \"values\");\n                    values = config.values as Iterable<ValueT>;\n                }\n\n                if (!config.columnNames) {\n                    columnNames = new ColumnNamesIterable(values, config.considerAllRows || false);\n                }\n            }\n            else if (pairs) {\n                values = new ExtractElementIterable(pairs, 1);\n                if (!config.columnNames) {\n                    columnNames = new ColumnNamesIterable(values, config.considerAllRows || false);\n                }\n            }\n            else {\n                values = DataFrame.defaultEmptyIterable;\n                if (!config.columnNames) {\n                    columnNames = DataFrame.defaultEmptyIterable;\n                }\n            }\n        }\n\n        if (config.index) {\n            if (DataFrame.isIterator(config.index)) {\n                index = new CachedIteratorIterable(config.index as Iterator<IndexT>);\n            }\n            else {\n                DataFrame.checkIterable<IndexT>(config.index, 'index');\n                index = config.index as Iterable<IndexT>;\n            }\n        }\n        else if (pairs) {\n            index = new ExtractElementIterable(pairs, 0);\n        }\n        else {\n            index = DataFrame.defaultCountIterable;\n        }\n\n        if (!pairs) {\n            pairs = new MultiIterable([index, values]);\n        }\n\n        if (config.baked !== undefined) {\n            isBaked = config.baked;\n        }\n\n        return {\n            index: index,\n            values: values,\n            pairs: pairs,\n            isBaked: isBaked,\n            columnNames: columnNames!,\n            isCaseSensitive: config.caseSensitive || false,\n        };\n    }\n\n    /**\n     * Create a dataframe.\n     * \n     * @param config This can be an array, a configuration object or a function that lazily produces a configuration object. \n     * \n     * It can be an array that specifies the data records that the dataframe contains.\n     * \n     * It can be a {@link IDataFrameConfig} that defines the data and configuration of the dataframe.\n     * \n     * Or it can be a function that lazily produces a {@link IDataFrameConfig}.\n     * \n     * @example\n     * <pre>\n     * \n     * const df = new DataFrame();\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const df = new DataFrame([ { A: 10 }, { A: 20 }, { A: 30 }, { A: 40 }]);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const df = new DataFrame({ index: [1, 2, 3, 4], values: [ { A: 10 }, { A: 20 }, { A: 30 }, { A: 40 }] });\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const lazyInit = () => ({ index: [1, 2, 3, 4], values: [ { A: 10 }, { A: 20 }, { A: 30 }, { A: 40 }] });\n     * const df = new DataFrame(lazyInit);\n     * </pre>\n     */\n    constructor(config?: Iterator<ValueT> | Iterable<ValueT> | IDataFrameConfig<IndexT, ValueT> | DataFrameConfigFn<IndexT, ValueT> | IDataFrame | ISeries) {\n        if (config) {\n            const configAsAny = config as any;\n            if (configAsAny.getTypeCode !== undefined) {\n                const typeCode = configAsAny.getTypeCode();\n                if (typeCode === \"dataframe\" || typeCode === \"series\") {\n                    if (configAsAny.content !== undefined) {\n                        this.content = configAsAny.content;\n                    }\n                    else {\n                        this.configFn = configAsAny.configFn;\n                    }\n                    return;\n                }\n            }\n            \n            if (isFunction(config)) {\n                this.configFn = config;\n            }\n            else if (DataFrame.isIterator(config)) {\n                this.content = DataFrame.initFromIterator(config as Iterator<ValueT>);\n            }\n            else if (DataFrame.isIterable(config)) {\n                this.content = DataFrame.initFromIterable(config as Iterable<ValueT>);\n            }\n            else {\n                this.content = DataFrame.initFromConfig(config as IDataFrameConfig<IndexT, ValueT>);\n            }\n        }\n        else {\n            this.content = DataFrame.initEmpty();\n        }\n    }\n\n    //\n    // Ensure the dataframe content has been initialised.\n    //\n    private lazyInit() {\n        if (this.content === null && this.configFn !== null) {\n            this.content = DataFrame.initFromConfig(this.configFn());\n        }\n    }\n\n    //\n    // Ensure the dataframe content is lazy initialised and return it.\n    //\n    private getContent(): IDataFrameContent<IndexT, ValueT> { \n        this.lazyInit();\n        return this.content!;\n    }\n    \n    // \n    // Lazy builds content index, does basic hash lookup.\n    //\n    private getRowByIndex(index: IndexT): ValueT | undefined {\n        if (!this.indexedContent) {\n            this.indexedContent = new Map<any, ValueT>();\n            for (const pair of this.getContent().pairs) {\n                this.indexedContent.set(pair[0], pair[1]);\n            }\n        }\n       \n        return this.indexedContent.get(index);\n    }\n    \n    /**\n     * Get an iterator to enumerate the rows of the dataframe.\n     * Enumerating the iterator forces lazy evaluation to complete.\n     * This function is automatically called by `for...of`.\n     * \n     * @return An iterator for the dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * for (const row of df) {\n     *     // ... do something with the row ...\n     * }\n     * </pre>\n     */\n    [Symbol.iterator](): Iterator<any> {\n        return this.getContent().values[Symbol.iterator]();\n    }\n\n    /**\n     * Get the names of the columns in the dataframe.\n     * \n     * @return Returns an array of the column names in the dataframe.  \n     * \n     * @example\n     * <pre>\n     * \n     * console.log(df.getColumnNames());\n     * </pre>\n     */\n    getColumnNames (): string[] {\n        return Array.from(this.getContent().columnNames);\n    }\n\n    /** \n     * Retreive the collection of all columns in the dataframe.\n     * \n     * @return Returns a {@link Series} containing the names of the columns in the dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * for (const column in df.getColumns()) {\n     *      console.log(\"Column name: \");\n     *      console.log(column.name);\n     * \n     *      console.log(\"Data:\");\n     *      console.log(column.series.toArray());\n     * }\n     * </pre>\n     */\n    getColumns (): ISeries<number, IColumn> {\n        return new Series<number, IColumn>(() => {\n            const columnNames = this.getColumnNames();\n            return {\n                values: columnNames.map(columnName => {\n                    const series = this.getSeries(columnName).skipWhile(value => value === undefined || value === null);\n                    const firstValue = series.any() ? series.first() : undefined;\n                    return {\n                        name: columnName,\n                        type: determineType(firstValue), //TODO: Should cache the type.\n                        series: series,\n                    };\n                }),\n            };\n        });\n    }    \n\n    /**\n     * Returns true if the dataframe is case sensitive or false if case insensitive.\n     * \n     * @return true if the dataframe is case sensitive, otherwise false.\n     */\n    isCaseSensitive (): boolean {\n        return this.getContent().isCaseSensitive;\n    }\n\n    /**\n     * Cast the value of the dataframe to a new type.\n     * This operation has no effect but to retype the value that the dataframe contains.\n     * \n     * @return The same dataframe, but with the type changed.\n     * \n     * @example\n     * <pre>\n     * \n     * const castDf = df.cast<SomeOtherType>();\n     * </pre>\n     */\n    cast<NewValueT> (): IDataFrame<IndexT, NewValueT> {\n        return this as any as IDataFrame<IndexT, NewValueT>;\n    }\n    \n    /**\n     * Get the index for the dataframe.\n     * \n     * @return The {@link Index} for the dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * const index = df.getIndex();\n     * </pre>\n     */\n    getIndex (): IIndex<IndexT> {\n        return new Index<IndexT>(() => ({ values: this.getContent().index }));\n    }\n\n    /**\n     * Set a named column as the {@link Index} of the dataframe.\n     *\n     * @param columnName Name of the column to use as the new {@link Index} of the returned dataframe.\n     *\n     * @return Returns a new dataframe with the values of the specified column as the new {@link Index}.\n     * \n     * @example\n     * <pre>\n     * \n     * const indexedDf = df.setIndex(\"SomeColumn\");\n     * </pre>\n     */\n    setIndex<NewIndexT = any> (columnName: string): IDataFrame<NewIndexT, ValueT> {\n        if (!isString(columnName)) throw new Error(\"Expected 'columnName' parameter to 'DataFrame.setIndex' to be a string that specifies the name of the column to set as the index for the dataframe.\");\n\n        return this.withIndex<NewIndexT>(this.getSeries(columnName));\n    }\n    \n    /**\n     * Apply a new {@link Index} to the dataframe.\n     * \n     * @param newIndex The new array or iterable to be the new {@link Index} of the dataframe. Can also be a selector to choose the {@link Index} for each row in the dataframe.\n     * \n     * @return Returns a new dataframe or dataframe with the specified {@link Index} attached.\n     * \n     * @example\n     * <pre>\n     * \n     * const indexedDf = df.withIndex([10, 20, 30]);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const indexedDf = df.withIndex(df.getSeries(\"SomeColumn\"));\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const indexedDf = df.withIndex(row => row.SomeColumn);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const indexedDf = df.withIndex(row => row.SomeColumn + 20);\n     * </pre>\n     */\n    withIndex<NewIndexT> (newIndex: Iterable<NewIndexT> | SelectorFn<ValueT, NewIndexT>): IDataFrame<NewIndexT, ValueT> {\n\n        if (isFunction(newIndex)) {\n            return new DataFrame<NewIndexT, ValueT>(() => {\n                const content = this.getContent();\n                return {\n                    columnNames: content.columnNames,\n                    values: content.values,\n                    index: this.deflate(newIndex),\n                };\n            });\n        }\n        else {\n            DataFrame.checkIterable(newIndex as Iterable<NewIndexT>, 'newIndex');\n\n            return new DataFrame<NewIndexT, ValueT>(() => {\n                const content = this.getContent();\n                return {\n                    columnNames: content.columnNames,\n                    values: content.values,\n                    index: newIndex as Iterable<NewIndexT>,\n                };\n            });\n        }\n    }\n\n    /**\n     * Resets the {@link Index} of the dataframe back to the default zero-based sequential integer index.\n     * \n     * @return Returns a new dataframe with the {@link Index} reset to the default zero-based index. \n     * \n     * @example\n     * <pre>\n     * \n     * const dfWithResetIndex = df.resetIndex();\n     * </pre>\n     */\n    resetIndex (): IDataFrame<number, ValueT> {\n        return new DataFrame<number, ValueT>(() => {\n            const content = this.getContent();\n            return {\n                columnNames: content.columnNames,\n                values: content.values,\n                // Strip the index.\n            };\n        });\n    }\n    \n    /**\n     * Extract a {@link Series} from a named column in the dataframe.\n     *\n     * @param columnName Specifies the name of the column that contains the {@link Series} to retreive.\n     * \n     * @return Returns the {@link Series} extracted from the named column in the dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * const series = df.getSeries(\"SomeColumn\");\n     * </pre>\n     */\n    getSeries<SeriesValueT = any> (columnName: string): ISeries<IndexT, SeriesValueT> {\n\n        if (!isString(columnName)) throw new Error(\"Expected 'columnName' parameter to 'DataFrame.getSeries' function to be a string that specifies the name of the column to retreive.\");\n\n        return new Series<IndexT, SeriesValueT>(() => ({\n            values: new SelectIterable<ValueT, SeriesValueT>(\n                this.getContent().values, \n                (row: any) => row[columnName],\n            ),\n            index: this.getContent().index,\n        }));\n    }\n\n    /**\n     * Determine if the dataframe contains a {@link Series} the specified named column.\n     *\n     * @param columnName Name of the column to check for.\n     * \n     * @return Returns true if the dataframe contains the requested {@link Series}, otherwise returns false.\n     * \n     * @example\n     * <pre>\n     * \n     * if (df.hasSeries(\"SomeColumn\")) {\n     *      // ... the dataframe contains a series with the specified column name ...\n     * }\n     * </pre>\n     */\n    hasSeries (columnName: string): boolean {\n        const columnNameLwr = columnName.toLowerCase();\n        for (const existingColumnName of this.getColumnNames()) {\n            if (existingColumnName.toLowerCase() === columnNameLwr) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n    \n    /**\n     * Verify the existence of a name column and extracts the {@link Series} for it.\n     * Throws an exception if the requested column doesn't exist.\n     *\n     * @param columnName Name of the column to extract.\n     * \n     * @return Returns the {@link Series} for the column if it exists, otherwise it throws an exception.\n     * \n     * @example\n     * <pre>\n     * \n     * try {\n     *      const series = df.expectSeries(\"SomeColumn\");\n     *      // ... do something with the series ...\n     * }\n     * catch (err) {\n     *      // ... the dataframe doesn't contain the column \"SomeColumn\" ...\n     * }\n     * </pre>\n     */\n    expectSeries<SeriesValueT> (columnName: string): ISeries<IndexT, SeriesValueT> {\n        if (!this.hasSeries(columnName)) {\n            throw new Error(\"Expected dataframe to contain series with column name: '\" + columnName + \"'.\");\n        }\n\n        return this.getSeries(columnName);\n    }\n\n    /**\n     * Create a new dataframe with a replaced or additional column specified by the passed-in series.\n     *\n     * @param columnNameOrSpec The name of the column to add or replace or a {@link IColumnGenSpec} that defines the columns to add.\n     * @param series When columnNameOrSpec is a string that identifies the column to add, this specifies the {@link Series} to add to the dataframe or a function that produces a series (given a dataframe).\n     *\n     * @return Returns a new dataframe replacing or adding a particular named column.\n     * \n     * @example\n     * <pre>\n     * \n     * const modifiedDf = df.withSeries(\"ANewColumn\", new Series([1, 2, 3]));\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const modifiedDf = df.withSeries(\"ANewColumn\", df => \n     *      df.getSeries(\"SourceData\").select(aTransformation)\n     * );\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const modifiedDf = df.withSeries({\n     *      ANewColumn: new Series([1, 2, 3]),\n     *      SomeOtherColumn: new Series([10, 20, 30])\n     * });\n     * <pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const modifiedDf = df.withSeries({\n     *      ANewColumn: df => df.getSeries(\"SourceData\").select(aTransformation))\n     * });\n     * <pre>\n     */\n    withSeries<OutputValueT = any, SeriesValueT = any> (columnNameOrSpec: string | IColumnGenSpec, series?: ISeries<IndexT, SeriesValueT> | SeriesSelectorFn<IndexT, ValueT, SeriesValueT>): IDataFrame<IndexT, OutputValueT> {\n\n        if (!isObject(columnNameOrSpec)) {\n            if (!isString(columnNameOrSpec)) throw new Error(\"Expected 'columnNameOrSpec' parameter to 'DataFrame.withSeries' function to be a string that specifies the column to set or replace.\");\n            if (!isFunction(series as Object)) {\n                if (!isObject(series)) throw new Error(\"Expected 'series' parameter to 'DataFrame.withSeries' to be a Series object or a function that takes a dataframe and produces a Series.\");\n            }\n        }\n        else {\n            if (!isUndefined(series)) throw new Error(\"Expected 'series' parameter to 'DataFrame.withSeries' to not be set when 'columnNameOrSpec is an object.\");\n        }\n\n        if (isObject(columnNameOrSpec)) {\n            const columnSpec: IColumnGenSpec = <IColumnGenSpec> columnNameOrSpec;\n            const columnNames = Object.keys(columnSpec);\n            let workingDataFrame: IDataFrame<IndexT, ValueT> = this;\n            for (const columnName of columnNames) {\n                workingDataFrame = workingDataFrame.withSeries(columnName, columnSpec[columnName]);\n            }\n\n            return workingDataFrame.cast<OutputValueT>();\n        }\n\n        const columnName: string = <string> columnNameOrSpec;\n\n        if (this.none()) { // We have an empty data frame.\n            let importSeries: ISeries<IndexT, SeriesValueT>;\n    \n            if (isFunction(series as Object)) {\n                importSeries = (series! as SeriesSelectorFn<IndexT, ValueT, SeriesValueT>)(this);\n            }\n            else { \n                importSeries = series! as ISeries<IndexT, SeriesValueT>;\n            }\n                \n            \n            return importSeries.inflate<ValueT>(value => {\n                    var row: any = {};\n                    row[columnName] = value;\n                    return row;\n                })\n                .cast<OutputValueT>();\n        }\n\n        return new DataFrame<IndexT, OutputValueT>(() => {    \n            let importSeries: ISeries<IndexT, SeriesValueT>;\n    \n            if (isFunction(series as Object)) {\n                importSeries = (series! as SeriesSelectorFn<IndexT, ValueT, SeriesValueT>)(this);\n            }\n            else { \n                importSeries = series! as ISeries<IndexT, SeriesValueT>;\n            }\n\n            const seriesValueMap = toMap2(importSeries.toPairs(), pair => pair[0], pair => pair[1]);\n            const newColumnNames =  makeDistinct(this.getColumnNames().concat([columnName]));\n    \n            return {\n                columnNames: newColumnNames,\n                index: this.getContent().index,\n                pairs: new SelectIterable<[IndexT, ValueT], [IndexT, OutputValueT]>(this.getContent().pairs, pair => {\n                    const index = pair[0];\n                    const value = pair[1];\n                    const modified: any = Object.assign({}, value);\n                    modified[columnName] = seriesValueMap.get(index);\n                    return [\n                        index,\n                        modified\n                    ];\n                }),\n            };\n        });\n    }\n\n    /**\n     * Merge multiple dataframes into a single dataframe.\n     * Rows are merged by indexed. \n     * Same named columns in subsequent dataframes override columns earlier dataframes.\n     * \n     * @param dataFrames An array or series of dataframes to merge.\n     * \n     * @returns The merged data frame.\n     * \n     * @example\n     * <pre>\n     * \n     * const mergedDF = DataFrame.merge([df1, df2, etc]);\n     * </pre>\n     */\n    static merge<MergedValueT = any, IndexT = any, ValueT = any>(dataFrames: Iterable<IDataFrame<IndexT, ValueT>>): IDataFrame<IndexT, MergedValueT> {\n\n        let resultIsCaseSensitive = false;\n\n        const rowMap = new Map<string, { index: IndexT, value: any }>();\n        for (const dataFrame of dataFrames) {\n            if (dataFrame.isCaseSensitive()) {\n                resultIsCaseSensitive = true;\n            }\n\n            for (const pair of dataFrame.toPairs()) {\n                const index = (pair[0] as any).toString();\n                if (!rowMap.has(index)) {\n                    rowMap.set(index, { index: pair[0], value: pair[1] });\n                }\n                else {\n                    const row = rowMap.get(index);\n                    const clone = { \n                        index: pair[0], \n                        value: Object.assign(\n                            {}, \n                            row!.value, \n                            pair[1]\n                        ),\n                    };\n                    rowMap.set(index, clone);\n                }\n            }\n        }\n\n        const allColumnNames = Array.from(dataFrames)\n            .map(dataFrame => dataFrame.getColumnNames())\n            .reduce((prev, next) => prev.concat(next), []);\n        const newColumnNames =  makeDistinct(allColumnNames);\n        const mergedPairs = Array.from(rowMap.values())\n            .map(row => [row.index, row.value]);\n\n        mergedPairs.sort((a, b) => { // Sort by index, ascending.\n            if (a[0] === b[0]) {\n                return 0;\n            }\n            else if (a[0] > b[0]) {\n                return 1;\n            }\n            else {\n                return -1;\n            }\n        });\n\n        return new DataFrame<IndexT, MergedValueT>({\n            columnNames: newColumnNames,\n            pairs: mergedPairs as [IndexT, MergedValueT][],\n            caseSensitive: resultIsCaseSensitive,\n        });\n    }  \n\n    /**\n     * Merge one or more dataframes into this dataframe.\n     * Rows are merged by indexed. \n     * Same named columns in subsequent dataframes override columns in earlier dataframes.\n     * \n     * @param otherDataFrames... One or more dataframes to merge into this dataframe.\n     * \n     * @returns The merged data frame.\n     * \n     * @example\n     * <pre>\n     * \n     * const mergedDF = df1.merge(df2);\n     * </pre>\n     * \n     * <pre>\n     * \n     * const mergedDF = df1.merge(df2, df3, etc);\n     * </pre>\n     */\n    merge<MergedValueT = ValueT>(...otherDataFrames: IDataFrame<IndexT, any>[]): IDataFrame<IndexT, MergedValueT> {\n        return DataFrame.merge<MergedValueT, IndexT, any>([this as IDataFrame<IndexT, ValueT>].concat(otherDataFrames));\n    }\n    \n    /**\n     * Add a series to the dataframe, but only if it doesn't already exist.\n     * \n     * @param columnNameOrSpec The name of the series to add or a {@link IColumnGenSpec} that specifies the columns to add.\n     * @param series If columnNameOrSpec is a string that specifies the name of the series to add, this specifies the actual {@link Series} to add or a selector that generates the series given the dataframe.\n     * \n     * @return Returns a new dataframe with the specified series added, if the series didn't already exist. Otherwise if the requested series already exists the same dataframe is returned.\n     * \n     * @example\n     * <pre>\n     * \n     * const updatedDf = df.ensureSeries(\"ANewColumn\", new Series([1, 2, 3]));\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const updatedDf = df.ensureSeries(\"ANewColumn\", df => \n     *      df.getSeries(\"AnExistingSeries\").select(aTransformation)\n     * );\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const modifiedDf = df.ensureSeries({\n     *      ANewColumn: new Series([1, 2, 3]),\n     *      SomeOtherColumn: new Series([10, 20, 30])\n     * });\n     * <pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const modifiedDf = df.ensureSeries({\n     *      ANewColumn: df => df.getSeries(\"SourceData\").select(aTransformation))\n     * });\n     * <pre>\n     */\n    ensureSeries<SeriesValueT> (columnNameOrSpec: string | IColumnGenSpec, series?: ISeries<IndexT, SeriesValueT> | SeriesSelectorFn<IndexT, ValueT, SeriesValueT>): IDataFrame<IndexT, ValueT> {\n\n        if (!isObject(columnNameOrSpec)) {\n            if (!isString(columnNameOrSpec)) throw new Error(\"Expected 'columnNameOrSpec' parameter to 'DataFrame.ensureSeries' function to be a string that specifies the column to set or replace.\");\n            if (!isFunction(series as Object)) {\n                if (!isObject(series)) throw new Error(\"Expected 'series' parameter to 'DataFrame.ensureSeries' to be a Series object or a function that takes a dataframe and produces a Series.\");\n            }\n        }\n        else {\n            if (!isUndefined(series)) throw new Error(\"Expected 'series' parameter to 'DataFrame.ensureSeries' to not be set when 'columnNameOrSpec is an object.\");\n        }\n\n        if (isObject(columnNameOrSpec)) {\n            const columnSpec: IColumnGenSpec = <IColumnGenSpec> columnNameOrSpec;\n            const columnNames = Object.keys(columnNameOrSpec);\n            let workingDataFrame = <IDataFrame<IndexT,any>> this;\n            for (const columnName of columnNames) {\n                workingDataFrame = workingDataFrame.ensureSeries(columnName, columnSpec[columnName]);\n            }\n\n            return workingDataFrame;\n        }\n\n        const columnName: string = <string> columnNameOrSpec;\n        if (this.hasSeries(columnName)) {\n            return this; // Already have the series.\n        }\n        else {\n            return this.withSeries(columnName, series);\n        }\n    }    \n\n    /**\n     * Create a new dataframe with just a subset of columns.\n     *\n     * @param columnNames Array of column names to include in the new dataframe.\n     * \n     * @return Returns a dataframe with a subset of columns from the original dataframe.\n     * \n     * @example\n     * <pre>\n     * const subsetDf = df.subset([\"ColumnA\", \"ColumnB\"]);\n     * </pre>\n     */\n    subset<NewValueT = ValueT> (columnNames: string[]): IDataFrame<IndexT, NewValueT> {\n        if (!isArray(columnNames)) throw new Error(\"Expected 'columnNames' parameter to 'DataFrame.subset' to be an array of column names to keep.\");\t\n\n        return new DataFrame<IndexT, NewValueT>(() => {\n            const content = this.getContent();\n            return {\n                columnNames: columnNames,\n                index: content.index,\n                values: new SelectIterable<ValueT, NewValueT>(content.values, (value: any) => {\n                    const output: any = {};\n                    for (const columnName of columnNames) {\n                        output[columnName] = value[columnName];\n                    }\n                    return output;\n                }),\n                pairs: new SelectIterable<[IndexT, ValueT], [IndexT, NewValueT]>(content.pairs, (pair: any) => {\n                    const output: any = {};\n                    const value = pair[1];\n                    for (const columnName of columnNames) {\n                        output[columnName] = value[columnName];\n                    }\n                    return [pair[0], output];\n                }),\n            }\n        });\n    }\n    \n    /**\n     * Create a new dataframe with the requested column or columns dropped.\n     *\n     * @param columnOrColumns Specifies the column name (a string) or columns (array of strings) to drop.\n     * \n     * @return Returns a new dataframe with a particular named column or columns removed.\n     * \n     * @example\n     * <pre>\n     * const modifiedDf = df.dropSeries(\"SomeColumn\");\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * const modifiedDf = df.dropSeries([\"ColumnA\", \"ColumnB\"]);\n     * </pre>\n     */\n    dropSeries<NewValueT = ValueT> (columnOrColumns: string | string[]): IDataFrame<IndexT, NewValueT> {\n\n        if (!isArray(columnOrColumns)) {\n            if (!isString(columnOrColumns)) throw new Error(\"'DataFrame.dropSeries' expected either a string or an array or strings.\");\n\n            columnOrColumns = [columnOrColumns]; // Convert to array for coding convenience.\n        }\n\n        return new DataFrame<IndexT, NewValueT>(() => {\n            const content = this.getContent();\n            const newColumnNames = [];\n            for (const columnName of content.columnNames) {\n                if (columnOrColumns.indexOf(columnName) === -1) {\n                    newColumnNames.push(columnName); // This column is not being dropped.\n                }\n            }\n\n            return {\n                columnNames: newColumnNames,\n                index: content.index,\n                values: new SelectIterable<ValueT, NewValueT>(content.values, value => {\n                    const clone: any = Object.assign({}, value);\n                    for (const droppedColumnName of columnOrColumns) {\n                        delete clone[droppedColumnName];\n                    }\n                    return clone;\n                }),\n                pairs: new SelectIterable<[IndexT, ValueT], [IndexT, NewValueT]>(content.pairs, pair => {\n                    const clone: any = Object.assign({}, pair[1]);\n                    for (const droppedColumnName of columnOrColumns) {\n                        delete clone[droppedColumnName];\n                    }\n                    return [pair[0], clone];\n                }),\n            };\n        });\n    }\n        \n    /**\n     * Create a new dataframe with columns reordered.\n     * New column names create new columns (with undefined values), omitting existing column names causes those columns to be dropped.\n     * \n     * @param columnNames Specifies the new order for columns.\n     * \n     * @return Returns a new dataframe with columns reordered according to the order of the array of column names that is passed in.\n     * \n     * @example\n     * <pre>\n     * const reorderedDf = df.reorderSeries([\"FirstColumn\", \"SecondColumn\", \"etc\"]);\n     * </pre>\n     */\n    reorderSeries<NewValueT = ValueT> (columnNames: string[]): IDataFrame<IndexT, NewValueT> {\n\n        if (!isArray(columnNames)) throw new Error(\"Expected parameter 'columnNames' to 'DataFrame.reorderSeries' to be an array with column names.\");\n\n        for (const columnName of columnNames) {\n            if (!isString(columnName)) throw new Error(\"Expected parameter 'columnNames' to 'DataFrame.reorderSeries' to be an array with column names.\");\n        }\n\n        return new DataFrame<IndexT, NewValueT>(() => {\n            const content = this.getContent();\n            return {\n                columnNames: columnNames,\n                index: content.index,\n                values: new SelectIterable<ValueT, NewValueT>(content.values, (value: any) => {\n                    const output: any = {};\n                    for (const columnName of columnNames) {\n                        output[columnName] = value[columnName];\n                    }\n\n                    return <NewValueT> output;\n                }),\n                pairs:  new SelectIterable<[IndexT, ValueT], [IndexT, NewValueT]>(content.pairs, (pair: [IndexT, ValueT]) => {\n                    const value: any = <any> pair[1];\n                    const output: any = {};\n                    for (const columnName of columnNames) {\n                        output[columnName] = value[columnName];\n                    }\n\n                    return [pair[0], <NewValueT> output];\n                }),\n                caseSensitive: content.isCaseSensitive,\n            };\n        });\n    }   \n\n    /**\n     * Bring the column(s) with specified name(s) to the front of the column order, making it (or them) the first column(s) in the output dataframe.\n     *\n     * @param columnOrColumns Specifies the column or columns to bring to the front.\n     *\n     * @return Returns a new dataframe with 1 or more columns bought to the front of the column ordering.\n     * \n     * @example\n     * <pre>\n     * const modifiedDf = df.bringToFront(\"NewFirstColumn\");\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * const modifiedDf = df.bringToFront([\"NewFirstColumn\", \"NewSecondColumn\"]);\n     * </pre>\n     */\n    bringToFront (columnOrColumns: string | string[]): IDataFrame<IndexT, ValueT> {\n\n        if (isArray(columnOrColumns)) {\n            for (const columnName of columnOrColumns) {\n                if (!isString(columnName)) {\n                    throw new Error(\"Expect 'columnOrColumns' parameter to 'DataFrame.bringToFront' function to specify a column or columns via a string or an array of strings.\");\t\n                }\n            }\n        }\n        else {\n            if (!isString(columnOrColumns)) {\n                throw new Error(\"Expect 'columnOrColumns' parameter to 'DataFrame.bringToFront' function to specify a column or columns via a string or an array of strings.\");\n            }\n\n            columnOrColumns = [columnOrColumns]; // Convert to array for coding convenience.\n        }\n\n        return new DataFrame<IndexT, ValueT>(() => {\n            const content = this.getContent();\n            const existingColumns = Array.from(content.columnNames);\n            const columnsToMove: string[] = [];\n            for (const columnToMove of columnOrColumns) {\n                if (existingColumns.indexOf(columnToMove) !== -1) {\n                    // The request column actually exists, so we will move it.\n                    columnsToMove.push(columnToMove);\n                }\n            }\n\n            const untouchedColumnNames: string[] = [];\n            for (const existingColumnName of existingColumns) {\n                if (columnOrColumns.indexOf(existingColumnName) === -1) {\n                    untouchedColumnNames.push(existingColumnName);\n                }\n            }\n            \n            return {\n                columnNames: columnsToMove.concat(untouchedColumnNames),\n                index: content.index,\n                values: content.values,\n                pairs: content.pairs,\n            };\n        })\n    }\n\n    /**\n     * Bring the column(s) with specified name(s) to the back of the column order, making it (or them) the last column(s) in the output dataframe.\n     *\n     * @param columnOrColumns Specifies the column or columns to bring to the back.\n     *\n     * @return Returns a new dataframe with 1 or more columns bought to the back of the column ordering.\n     * \n     * @example\n     * <pre>\n     * const modifiedDf = df.bringToBack(\"NewLastColumn\");\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * const modifiedDf = df.bringToBack([\"NewSecondLastColumn, \"\"NewLastColumn\"]);\n     * </pre>\n     */\n    bringToBack (columnOrColumns: string | string[]): IDataFrame<IndexT, ValueT> {\n\n        if (isArray(columnOrColumns)) {\n            for (const columnName of columnOrColumns) {\n                if (!isString(columnName)) {\n                    throw new Error(\"Expect 'columnOrColumns' parameter to 'DataFrame.bringToBack' function to specify a column or columns via a string or an array of strings.\");\t\n                }\n            }\n        }\n        else {\n            if (!isString(columnOrColumns)) {\n                throw new Error(\"Expect 'columnOrColumns' parameter to 'DataFrame.bringToBack' function to specify a column or columns via a string or an array of strings.\");\n            }\n\n            columnOrColumns = [columnOrColumns]; // Convert to array for coding convenience.\n        }\n\n        return new DataFrame<IndexT, ValueT>(() => {\n            const content = this.getContent();\n            const existingColumns = Array.from(content.columnNames);\n            const columnsToMove: string[] = [];\n            for (const columnToMove of columnOrColumns) {\n                if (existingColumns.indexOf(columnToMove) !== -1) {\n                    // The request column actually exists, so we will move it.\n                    columnsToMove.push(columnToMove);\n                }\n            }\n\n            const untouchedColumnNames: string[] = [];\n            for (const existingColumnName of existingColumns) {\n                if (columnOrColumns.indexOf(existingColumnName) === -1) {\n                    untouchedColumnNames.push(existingColumnName);\n                }\n            }\n            \n            return {\n                columnNames: untouchedColumnNames.concat(columnsToMove),\n                index: content.index,\n                values: content.values,\n                pairs: content.pairs,\n            };\n        })\n    }\n    \n    /**\n     * Create a new dataframe with 1 or more columns renamed.\n     *\n     * @param newColumnNames A column rename spec - a JavaScript hash that maps existing column names to new column names.\n     * \n     * @return Returns a new dataframe with specified columns renamed.\n     * \n     * @example\n     * <pre>\n     * \n     * const renamedDf = df.renameSeries({ OldColumnName, NewColumnName });\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const renamedDf = df.renameSeries({ \n     *      Column1: ColumnA,\n     *      Column2: ColumnB\n     * });\n     * </pre>\n     */\n    renameSeries<NewValueT = ValueT> (newColumnNames: IColumnRenameSpec): IDataFrame<IndexT, NewValueT> {\n\n        if (!isObject(newColumnNames)) throw new Error(\"Expected parameter 'newColumnNames' to 'DataFrame.renameSeries' to be an array with column names.\");\n\n        const existingColumnsToRename = Object.keys(newColumnNames);\n        for (const existingColumnName of existingColumnsToRename) {\n            if (!isString(existingColumnName)) throw new Error(\"Expected existing column name '\" + existingColumnName + \"' of 'newColumnNames' parameter to 'DataFrame.renameSeries' to be a string.\");\n            if (!isString(newColumnNames[existingColumnName])) throw new Error(\"Expected new column name '\" + newColumnNames[existingColumnName] + \"' for existing column '\" + existingColumnName + \"' of 'newColumnNames' parameter to 'DataFrame.renameSeries' to be a string.\");\n        }\n\n        return new DataFrame<IndexT, NewValueT>(() => {\n            const content = this.getContent();\n            const renamedColumns: string[] = [];\n\n            for (const existingColumnName of content.columnNames) { // Convert the column rename spec to array of new column names.\n                const columnIndex = existingColumnsToRename.indexOf(existingColumnName);\n                if (columnIndex === -1) {\n                    renamedColumns.push(existingColumnName); // This column is not renamed.                    \n                }\n                else {\n                    renamedColumns.push(newColumnNames[existingColumnName]); // This column is renamed.\n                }\n            }\n    \n            //\n            // Remap each row of the data frame to the new column names.\n            //\n            function remapValue (value: any): any {\n                const clone = Object.assign({}, value);\n    \n                for (const existingColumName of existingColumnsToRename) {\n                    clone[newColumnNames[existingColumName]] = clone[existingColumName];\n                    delete clone[existingColumName];\n                }\n    \n                return clone;\n            }\n    \n            return {\n                columnNames: renamedColumns,\n                index: content.index,\n                values: new SelectIterable<ValueT, NewValueT>(content.values, remapValue),\n                pairs: new SelectIterable<[IndexT, ValueT], [IndexT, NewValueT]>(content.pairs, pair => {\n                    return [pair[0], remapValue(pair[1])];\n                }),\n            };\n        });\n    }\n    \n    /**\n    * Extract values from the dataframe as an array.\n    * This forces lazy evaluation to complete.\n    * \n    * @return Returns an array of the values contained within the dataframe. \n    * \n    * @example\n    * <pre>\n    * const values = df.toArray();\n    * </pre>\n    */\n    toArray (): ValueT[] {\n        const values = [];\n        for (const value of this.getContent().values) {\n            if (value !== undefined && value !== null) {\n                values.push(value);\n            }\n        }\n        return values;\n    }\n\n    /**\n     * Retreive the index and values pairs from the dataframe as an array.\n     * Each pair is [index, value].\n     * This forces lazy evaluation to complete.\n     * \n     * @return Returns an array of pairs that contains the dataframe content. Each pair is a two element array that contains an index and a value.  \n     * \n     * @example\n     * <pre>\n     * const pairs = df.toPairs();\n     * </pre>\n     */\n    toPairs (): ([IndexT, ValueT])[] {\n        const pairs = [];\n        for (const pair of this.getContent().pairs) {\n            if (pair[1] != undefined && pair[1] !== null) {\n                pairs.push(pair);\n            }\n        }\n        return pairs;\n    }\n\n    /**\n     * Convert the dataframe to a JavaScript object.\n     *\n     * @param keySelector Function that selects keys for the resulting object.\n     * @param valueSelector Function that selects values for the resulting object.\n     * \n     * @return Returns a JavaScript object generated from the dataframe by applying the key and value selector functions. \n     * \n     * @example\n     * <pre>\n     * \n     * const someObject = df.toObject(\n     *      row => row.SomeColumn, // Specify the column to use for fields in the object.\n     *      row => row.SomeOtherColumn // Specify the column to use as the value for each field.\n     * );\n     * </pre>\n     */\n    toObject<KeyT = any, FieldT = any, OutT = any> (keySelector: (value: ValueT) => KeyT, valueSelector: (value: ValueT) => FieldT): OutT {\n\n        if (!isFunction(keySelector)) throw new Error(\"Expected 'keySelector' parameter to DataFrame.toObject to be a function.\");\n        if (!isFunction(valueSelector)) throw new Error(\"Expected 'valueSelector' parameter to DataFrame.toObject to be a function.\");\n\n        return toMap(this, keySelector, valueSelector);\n    }\n    \n    /**\n     * Bake the data frame to an array of rows were each rows is an array of values in column order.\n     * \n     * @return Returns an array of rows. Each row is an array of values in column order.\n     * \n     * @example\n     * <pre>\n     * const rows = df.toRows();\n     * </pre>\n     */\n    toRows (): any[][] {\n        const columnNames = this.getColumnNames();\n        const rows = [];\n        for (const value of this.getContent().values) {\n            const row = [];\n            for (let columnIndex = 0; columnIndex < columnNames.length; ++columnIndex) {\n                row.push((<any>value)[columnNames[columnIndex]]);\n            }\n\n            rows.push(row);\n        }\n        \n        return rows;\n    }\n\n    /**\n     * Transforms an input dataframe, generating a new dataframe.\n     * The transformer function is called for each element of the input and the collection of outputs creates the generated datafarme.\n     * \n     * `select` is an alias for {@link DataFrame.map}.\n     * \n     * This is the same concept as the JavaScript function `Array.map` but maps over a dataframe rather than an array.\n     *\n     * @param transformer A user-defined transformer function that transforms each element from the input to generate the output.\n     * \n     * @return Returns a new dataframe generated by calling the transformer function over each element of the input.\n     * \n     * @example\n     * <pre>\n     * \n     * function transformer (input) {\n     *      const output = {\n     *          // ... construct output from input ...\n     *      };\n     *\n     *      return output;\n     * }\n     *  \n     * const transformed = dataframe.select(transformer);\n     * console.log(transformed.toString());\n     * </pre>\n     */\n    select<ToT> (transformer: SelectorWithIndexFn<ValueT, ToT>): IDataFrame<IndexT, ToT> {\n        if (!isFunction(transformer)) throw new Error(\"Expected 'transformer' parameter to 'Series.select' to be a function.\");\n\n        return this.map<ToT>(transformer);\n    }\n\n    /**\n     * Transforms an input dataframe, generating a new dataframe.\n     * The transformer function is called for each element of the input and the collection of outputs creates the generated datafarme.\n     * \n     * This is the same concept as the JavaScript function `Array.map` but maps over a dataframe rather than an array.\n     *\n     * @param transformer A user-defined transformer function that transforms each element from the input to generate the output.\n     * \n     * @return Returns a new dataframe generated by calling the transformer function over each element of the input.\n     * \n     * @example\n     * <pre>\n     * \n     * function transformer (input) {\n     *      const output = {\n     *          // ... construct output from input ...\n     *      };\n     *\n     *      return output;\n     * }\n     *  \n     * const transformed = dataframe.map(transformer);\n     * console.log(transformed.toString());\n     * </pre>\n     */\n     map<ToT> (transformer: SelectorWithIndexFn<ValueT, ToT>): IDataFrame<IndexT, ToT> {\n        if (!isFunction(transformer)) throw new Error(\"Expected 'transformer' parameter to 'DataFrame.map' to be a function.\");\n\n        return new DataFrame(() => {\n            const content = this.getContent();\n            return {\n                values: new SelectIterable<ValueT, ToT>(content.values, transformer),\n                index: content.index,    \n            };\n        });\n    }\n\n    /**\n     * Transforms and flattens an input dataframe, generating a new dataframe.\n     * The transformer function is called for each value in the input dataframe and produces an array that is then flattened into the generated dataframe.\n     * \n     * `selectMany` is an alias for {@link DataFrame.flatMap}.\n     * \n     * This is the same concept as the JavaScript function `Array.flatMap` but maps over a dataframe rather than an array.\n     * \n     * @param transformer A user-defined function that transforms each value into an array that is then flattened into the generated dataframe.\n     * \n     * @return Returns a new dataframe generated by calling the transformer function over each element of the input.\n     * \n     * @example\n     * <pre>\n     * \n     * function transformer (input) {\n     *      const output = [];\n     *      while (someCondition) {\n     *          // ... generate zero or more outputs from a single input ...\n     *          output.push(... some generated value ...);\n     *      }\n     *      return output;\n     * }\n     * \n     * const transformed = dataframe.selectMany(transformer);\n     * console.log(transformed.toString());\n     * </pre>\n     */\n    selectMany<ToT> (transformer: SelectorWithIndexFn<ValueT, Iterable<ToT>>): IDataFrame<IndexT, ToT> {\n        if (!isFunction(transformer)) throw new Error(\"Expected 'transformer' parameter to 'DataFrame.selectMany' to be a function.\");\n\n        return this.flatMap<ToT>(transformer);\n    }\n\n    /**\n     * Transforms and flattens an input dataframe, generating a new dataframe.\n     * The transformer function is called for each value in the input dataframe and produces an array that is then flattened into the generated dataframe.\n     * \n     * This is the same concept as the JavaScript function `Array.flatMap` but maps over a dataframe rather than an array.\n     * \n     * @param transformer A user-defined function that transforms each value into an array that is then flattened into the generated dataframe.\n     * \n     * @return Returns a new dataframe generated by calling the transformer function over each element of the input.\n     * \n     * @example\n     * <pre>\n     * \n     * function transformer (input) {\n     *      const output = [];\n     *      while (someCondition) {\n     *          // ... generate zero or more outputs from a single input ...\n     *          output.push(... some generated value ...);\n     *      }\n     *      return output;\n     * }\n     * \n     * const transformed = dataframe.flatMap(transformer);\n     * console.log(transformed.toString());\n     * </pre>\n     */\n    flatMap<ToT> (transformer: SelectorWithIndexFn<ValueT, Iterable<ToT>>): IDataFrame<IndexT, ToT> {\n        if (!isFunction(transformer)) throw new Error(\"Expected 'transformer' parameter to 'DataFrame.flatMap' to be a function.\");\n\n        return new DataFrame(() => ({\n            pairs: new SelectManyIterable(\n                this.getContent().pairs, \n                (pair: [IndexT, ValueT], index: number): Iterable<[IndexT, ToT]> => {\n                    const outputPairs: [IndexT, ToT][] = [];\n                    for (const transformed of transformer(pair[1], index)) {\n                        outputPairs.push([\n                            pair[0],\n                            transformed\n                        ]);\n                    }\n                    return outputPairs;\n                }\n            )\n        }));\n    }\n\n    /**\n     * Transform one or more columns. \n     * \n     * This is equivalent to extracting a {@link Series} with {@link getSeries}, then transforming it with {@link Series.select},\n     * and finally plugging it back in as the same column using {@link withSeries}.\n     *\n     * @param columnSelectors Object with field names for each column to be transformed. Each field specifies a selector function that transforms that column.\n     * \n     * @return Returns a new dataframe with 1 or more columns transformed.\n     * \n     * @example\n     * <pre>\n     * \n     * const modifiedDf = df.transformSeries({ \n     *      AColumnToTransform: columnValue => transformRow(columnValue) \n     * });\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const modifiedDf = df.transformSeries({ \n     *      ColumnA: columnValue => transformColumnA(columnValue),\n     *      ColumnB: columnValue => transformColumnB(columnValue)\n     * });\n     * </pre>\n     */\n    transformSeries<NewValueT = ValueT> (columnSelectors: IColumnTransformSpec): IDataFrame<IndexT, NewValueT> {\n\n        if (!isObject(columnSelectors)) throw new Error(\"Expected 'columnSelectors' parameter of 'DataFrame.transformSeries' function to be an object. Field names should specify columns to transform. Field values should be selector functions that specify the transformation for each column.\");\n\n        let working: IDataFrame<IndexT, any> = this;\n\n        for (const columnName of Object.keys(columnSelectors)) {\n            if (working.hasSeries(columnName)) {\n                working = working.withSeries(\n                    columnName, \n                    working.getSeries(columnName)\n                        .select(columnSelectors[columnName])\n                );\n            }\n        }\n\n        return working;\n    }\n\n    /** \n     * Generate new columns based on existing rows.\n     * \n     * This is equivalent to calling {@link select} to transform the original dataframe to a new dataframe with different column,\n     * then using {@link withSeries} to merge each the of both the new and original dataframes.\n     *\n     * @param generator Generator function that transforms each row to produce 1 or more new columns.\n     * Or use a column spec that has fields for each column, the fields specify a generate function that produces the value for each new column.\n     * \n     * @return Returns a new dataframe with 1 or more new columns.\n     * \n     * @example\n     * <pre>\n     * \n     * function produceNewColumns (inputRow) {\n     *      const newColumns = {\n     *          // ... specify new columns and their values based on the input row ...\n     *      };\n     * \n     *      return newColumns;\n     * };\n     * \n     * const dfWithNewSeries = df.generateSeries(row => produceNewColumns(row));\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const dfWithNewSeries = df.generateSeries({ \n     *      NewColumnA: row => produceNewColumnA(row),\n     *      NewColumnB: row => produceNewColumnB(row),\n     * })\n     * </pre>\n     */\n    generateSeries<NewValueT = ValueT>(generator: SelectorWithIndexFn<any, any> | IColumnTransformSpec): IDataFrame<IndexT, NewValueT> {\n\n        if (!isObject(generator)) {\n            if (!isFunction(generator)) {\n                throw new Error(\"Expected 'generator' parameter to 'DataFrame.generateSeries' function to be a function or an object.\");\n            }\n\n            const selector = generator as SelectorWithIndexFn<any, any>;\n            const newColumns = this.select(selector) // Build a new dataframe.\n                .bake(); //TODO: Bake should be needed here, but it causes problems if not.\n            const newColumnNames = newColumns.getColumnNames();\n\n            let working: IDataFrame<IndexT, any> = this;\n\n            //TODO: There must be a cheaper implementation!\n            for (const newColumnName of newColumnNames) {\n                working = working.withSeries(newColumnName, newColumns.getSeries(newColumnName));\n            }\n\n            return working;\n        }\n        else {\n            const columnTransformSpec = generator as IColumnTransformSpec;\n            const newColumnNames = Object.keys(columnTransformSpec);\n            \n            let working: IDataFrame<IndexT, any> = this;\n\n            for (const newColumnName of newColumnNames) {\n                working = working.withSeries(newColumnName, working.select(columnTransformSpec[newColumnName]).deflate());\n            }\n\n            return working;\n        }\n    }    \n\n    /** \n     * Converts (deflates) a dataframe to a {@link Series}.\n     *\n     * @param selector Optional selector function that transforms each row to produce the series.\n     *\n     * @return Returns a series that was created from the deflated from  the original dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * const series = df.deflate(); // Deflate to a series of object.\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const series = df.deflate(row => row.SomeColumn); // Extract a particular column.\n     * </pre>\n     */\n    deflate<ToT = ValueT> (selector?: SelectorWithIndexFn<ValueT, ToT>): ISeries<IndexT, ToT> {\n\n        if (selector) {\n            if (!isFunction(selector)) throw new Error(\"Expected 'selector' parameter to 'DataFrame.deflate' function to be a selector function.\");\n        }\n\n        return new Series<IndexT, ToT>(() => {\n            const content = this.getContent();\n            if (selector) {\n                return {\n                    index: content.index,\n                    values: new SelectIterable<ValueT, ToT>(content.values, selector),\n                    pairs: new SelectIterable<[IndexT, ValueT], [IndexT, ToT]>(content.pairs, (pair, index) => {\n                        return [\n                            pair[0],\n                            selector(pair[1], index)\n                        ];\n                    }),\n                };\n            }\n            else {\n                return {\n                    index: content.index,\n                    values: content.values as any as Iterable<ToT>,\n                    pairs: content.pairs as any as Iterable<[IndexT, ToT]>,\n                };\n            }\n        });\n    }\n\n    /** \n     * Inflate a named {@link Series} in the dataframe to 1 or more new series in the new dataframe.\n     * \n     * This is the equivalent of extracting the series using {@link getSeries}, transforming them with {@link Series.select}\n     * and then running {@link Series.inflate} to create a new dataframe, then merging each column of the new dataframe\n     *  into the original dataframe using {@link withSeries}.\n     *\n     * @param columnName Name of the series to inflate.\n     * @param selector Optional selector function that transforms each value in the column to new columns. If not specified it is expected that each value in the column is an object whose fields define the new column names.\n     * \n     * @return Returns a new dataframe with a column inflated to 1 or more new columns.\n     * \n     * @example\n     * <pre>\n     * \n     * function newColumnGenerator (row) {\n     *      const newColumns = {\n     *          // ... create 1 field per new column ...\n     *      };\n     * \n     *      return row;\n     * }\n     * \n     * const dfWithNewSeries = df.inflateSeries(\"SomeColumn\", newColumnGenerator);\n     * </pre>\n     */\n    inflateSeries<NewValueT = ValueT>(columnName: string, selector?: SelectorWithIndexFn<IndexT, any>): IDataFrame<IndexT, ValueT> {\n\n        if (!isString(columnName)) throw new Error(\"Expected 'columnName' parameter to 'DataFrame.inflateSeries' to be a string that is the name of the column to inflate.\");\n\n        if (selector) {\n            if (!isFunction(selector)) throw new Error(\"Expected optional 'selector' parameter to 'DataFrame.inflateSeries' to be a selector function, if it is specified.\");\n        }\n\n        return this.zip(\n            this.getSeries(columnName).inflate(selector),\n            (row1, row2) => Object.assign({}, row1, row2) //todo: this be should zip's default operation.\n        );\n    }\n\n    /**\n     * Partition a dataframe into a {@link Series} of *data windows*. \n     * Each value in the new series is a rolling chunk of data from the original dataframe.\n     *\n     * @param period The number of data rows to include in each data window.\n     * \n     * @return Returns a new series, each value of which is a chunk of the original dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * const windows = df.window(2); // Get values in pairs.\n     * const pctIncrease = windows.select(pair => (pair.last() - pair.first()) / pair.first());\n     * console.log(pctIncrease.toString());\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const salesDf = ... // Daily sales data.\n     * const weeklySales = salesDf.window(7); // Partition up into weekly data sets.\n     * console.log(weeklySales.toString());\n     * </pre>\n     */\n    window (period: number): ISeries<number, IDataFrame<IndexT, ValueT>> {\n\n        if (!isNumber(period)) throw new Error(\"Expected 'period' parameter to 'DataFrame.window' to be a number.\");\n\n        return new Series<number, IDataFrame<IndexT, ValueT>>(() => {\n            const content = this.getContent();\n            return {\n                values: new DataFrameWindowIterable<IndexT, ValueT>(content.columnNames, content.pairs, period)\n            };            \n        });\n    }\n\n    /** \n     * Partition a dataframe into a {@link Series} of *rolling data windows*. \n     * Each value in the new series is a rolling chunk of data from the original dataframe.\n     *\n     * @param period The number of data rows to include in each data window.\n     * \n     * @return Returns a new series, each value of which is a rolling chunk of the original dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * const salesDf = ... // Daily sales data.\n     * const rollingWeeklySales = salesDf.rollingWindow(7); // Get rolling window over weekly sales data.\n     * console.log(rollingWeeklySales.toString());\n     * </pre>\n     */\n    rollingWindow (period: number): ISeries<number, IDataFrame<IndexT, ValueT>> {\n\n        if (!isNumber(period)) throw new Error(\"Expected 'period' parameter to 'DataFrame.rollingWindow' to be a number.\");\n\n        return new Series<number, IDataFrame<IndexT, ValueT>>(() => {\n            const content = this.getContent();\n            return {\n                values: new DataFrameRollingWindowIterable<IndexT, ValueT>(content.columnNames, content.pairs, period)\n            };            \n        });\n    }\n\n    /**\n     * Partition a dataframe into a {@link Series} of variable-length *data windows* \n     * where the divisions between the data chunks are\n     * defined by a user-provided *comparer* function.\n     * \n     * @param comparer Function that compares two adjacent data rows and returns true if they should be in the same window.\n     * \n     * @return Returns a new series, each value of which is a chunk of data from the original dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * function rowComparer (rowA, rowB) {\n     *      if (... rowA should be in the same data window as rowB ...) {\n     *          return true;\n     *      }\n     *      else {\n     *          return false;\n     *      }\n     * };\n     * \n     * const variableWindows = df.variableWindow(rowComparer);\n     */\n    variableWindow (comparer: ComparerFn<ValueT, ValueT>): ISeries<number, IDataFrame<IndexT, ValueT>> {\n        \n        if (!isFunction(comparer)) throw new Error(\"Expected 'comparer' parameter to 'DataFrame.variableWindow' to be a function.\")\n\n        return new Series<number, IDataFrame<IndexT, ValueT>>(() => {\n            const content = this.getContent();\n            return {\n                values: new DataFrameVariableWindowIterable<IndexT, ValueT>(content.columnNames, content.pairs, comparer)\n            };            \n        });\n    }\n\n    /**\n     * Eliminates adjacent duplicate rows.\n     * \n     * For each group of adjacent rows that are equivalent only returns the last index/row for the group, \n     * thus adjacent equivalent rows are collapsed down to the last row.\n     *\n     * @param selector Optional selector function to determine the value used to compare for equivalence.\n     * \n     * @return Returns a new dataframe with groups of adjacent duplicate rows collapsed to a single row per group.\n     * \n     * @example\n     * <pre>\n     * \n     * const dfWithDuplicateRowsRemoved = df.sequentialDistinct(row => row.ColumnA);\n     * </pre>\n     */\n    sequentialDistinct<ToT = ValueT> (selector?: SelectorFn<ValueT, ToT>): IDataFrame<IndexT, ValueT> {\n        \n        if (selector) {\n            if (!isFunction(selector)) throw new Error(\"Expected 'selector' parameter to 'DataFrame.sequentialDistinct' to be a selector function that determines the value to compare for duplicates.\")\n        }\n        else {\n            selector = (value: ValueT): ToT => <ToT> <any> value;\n        }\n\n        return this.variableWindow((a, b) => selector!(a) === selector!(b))\n            .select((window): [IndexT, ValueT] => {\n                return [window.getIndex().first(), window.first()];\n            })\n            .withIndex(pair => pair[0])\n            .inflate(pair => pair[1]); //TODO: Should this be select?\n    }\n\n    /**\n     * Aggregate the rows in the dataframe to a single result.\n     *\n     * `aggregate` is similar to {@link DataFrame.reduce}  but the parameters are reversed. \n     * Please use {@link DataFrame.reduce} in preference to `aggregate`.\n\n     * @param seed Optional seed value for producing the aggregation.\n     * @param selector Function that takes the seed and then each row in the dataframe and produces the aggregated value.\n     * \n     * @return Returns a new value that has been aggregated from the dataframe using the 'selector' function. \n     * \n     * @example\n     * <pre>\n     * \n     * const dailySalesDf = ... daily sales figures for the past month ...\n     * const totalSalesForthisMonth = dailySalesDf.aggregate(\n     *      0, // Seed - the starting value.\n     *      (accumulator, row) => accumulator + row.SalesAmount // Aggregation function.\n     * );\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const totalSalesAllTime = 500; // We'll seed the aggregation with this value.\n     * const dailySalesDf = ... daily sales figures for the past month ...\n     * const updatedTotalSalesAllTime = dailySalesDf.aggregate(\n     *      totalSalesAllTime, \n     *      (accumulator, row) => accumulator + row.SalesAmount\n     * );\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * var salesDataSummary = salesDataDf.aggregate({\n     *      TotalSales: df => df.count(),\n     *      AveragePrice: df => df.deflate(row => row.Price).average(),\n     *      TotalRevenue: df => df.deflate(row => row.Revenue).sum(), \n     * });\n     * </pre>\n    */\n    aggregate<ToT = ValueT> (seedOrSelector: AggregateFn<ValueT, ToT> | ToT | IColumnAggregateSpec, selector?: AggregateFn<ValueT, ToT>): ToT {\n\n        if (isFunction(seedOrSelector) && !selector) {\n            return this.skip(1).aggregate(<ToT> <any> this.first(), seedOrSelector);\n        }\n        else if (selector) {\n            if (!isFunction(selector)) throw new Error(\"Expected 'selector' parameter to aggregate to be a function.\");\n\n            let accum = <ToT> seedOrSelector;\n\n            for (const value of this) {\n                accum = selector!(accum, value);                \n            }\n\n            return accum;\n        }\n        else {\n            //\n            //TODO:\n            // This approach is fairly limited because I can't provide a seed.\n            // Consider removing this and replacing it with a 'summarize' function.\n            //\n            if (!isObject(seedOrSelector)) throw new Error(\"Expected 'seed' parameter to aggregate to be an object.\");\n\n            const columnAggregateSpec = seedOrSelector as IColumnAggregateSpec;\n            const columnNames = Object.keys(columnAggregateSpec);\n            const aggregatedColumns = columnNames.map(columnName => {\n                var columnSelector = columnAggregateSpec[columnName];\n                if (!isFunction(columnSelector)) throw new Error(\"Expected column/selector pairs in 'seed' parameter to aggregate.\");\n                return [columnName, this.getSeries(columnName).aggregate(columnSelector)];\n            });\n\n            return toMap(aggregatedColumns, pair => pair[0], pair => pair[1]);\n        }\n    }\n    \n    /**\n     * Reduces the values in the dataframe to a single result.\n     *\n     * This is the same concept as the JavaScript function `Array.reduce` but reduces a dataframe rather than an array.\n\n     * @param reducer Function that takes the seed and then each value in the dataframe and produces the reduced value.\n     * @param seed Optional initial value, if not specifed the first value in the dataframe is used as the initial value.\n     * \n     * @return Returns a value that has been reduced from the input dataframe by passing each element through the reducer function.\n     * \n     * @example\n     * <pre>\n     * \n     * const dailyRecords = ... daily records for the past month ...\n     * const totalSales = dailyRecords.reduce(\n     *      (accumulator, row) => accumulator + row.salesAmount, // Reducer function.\n     *      0  // Seed value, the starting value.\n     * );\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const previousSales = 500; // We'll seed the reduction with this value.\n     * const dailyRecords = ... daily records for the past month ...\n     * const updatedSales = dailyRecords.reduce(\n     *      (accumulator, row) => accumulator + row.salesAmount,\n     *      previousSales\n     * );\n     * </pre>\n     */\n    reduce<ToT = ValueT> (reducer: AggregateFn<ValueT, ToT>, seed?: ToT): ToT {\n        if (!isFunction(reducer)) throw new Error(\"Expected 'reducer' parameter to `DataFrame.reduce` to be a function.\");\n\n        let accum = <ToT> seed;\n        let dataframe: IDataFrame<any, ValueT> = this;\n        if (accum === undefined) {\n            if (dataframe.any()) {\n                accum = dataframe.first() as any as ToT;\n                dataframe = dataframe.skip(1);\n            }\n        }\n\n        for (const value of dataframe) {\n            accum = reducer(accum, value);\n        }\n\n        return accum;\n    }\n\n    /**\n     * Skip a number of rows in the dataframe.\n     *\n     * @param numValues Number of rows to skip.\n     * \n     * @return Returns a new dataframe with the specified number of rows skipped. \n     * \n     * @example\n     * <pre>\n     * \n     * const dfWithRowsSkipped = df.skip(10); // Skip 10 rows in the original dataframe.\n     * </pre>\n     */\n    skip (numValues: number): IDataFrame<IndexT, ValueT> {\n        if (!isNumber(numValues)) throw new Error(\"Expected 'numValues' parameter to 'DataFrame.skip' to be a number.\");\n\n        return new DataFrame<IndexT, ValueT>(() => {\n            const content = this.getContent();\n            return {\n                columnNames: content.columnNames,\n                values: new SkipIterable(content.values, numValues),\n                index: new SkipIterable(content.index, numValues),\n                pairs: new SkipIterable(content.pairs, numValues),\n            };\n        });\n    }\n\n    /**\n     * Skips rows in the dataframe while a condition evaluates to true or truthy.\n     *\n     * @param predicate Returns true/truthy to continue to skip rows in the original dataframe.\n     * \n     * @return Returns a new dataframe with all initial sequential rows removed while the predicate returned true/truthy.\n     * \n     * @example\n     * <pre>\n     * \n     * const dfWithRowsSkipped = df.skipWhile(row => row.CustomerName === \"Fred\"); // Skip initial customers named Fred.\n     * </pre>\n     */\n    skipWhile (predicate: PredicateFn<ValueT>): IDataFrame<IndexT, ValueT> {\n        if (!isFunction(predicate)) throw new Error(\"Expected 'predicate' parameter to 'DataFrame.skipWhile' function to be a predicate function that returns true/false.\");\n\n        return new DataFrame<IndexT, ValueT>(() => {\n            const content = this.getContent();\n            return {\n                columnNames: content.columnNames,\n                values: new SkipWhileIterable(content.values, predicate),\n                pairs: new SkipWhileIterable(content.pairs, pair => predicate(pair[1])),\n            };\n        });\n    }\n\n    /**\n     * Skips rows in the dataframe untils a condition evaluates to true or truthy.\n     *\n     * @param predicate Return true/truthy to stop skipping rows in the original dataframe.\n     * \n     * @return Returns a new dataframe with all initial sequential rows removed until the predicate returned true/truthy.\n     * \n     * @example\n     * <pre>\n     * \n     * const dfWithRowsSkipped = df.skipUntil(row => row.CustomerName === \"Fred\"); // Skip initial customers until we find Fred.\n     * </pre>\n     */\n    skipUntil (predicate: PredicateFn<ValueT>): IDataFrame<IndexT, ValueT> {\n        if (!isFunction(predicate)) throw new Error(\"Expected 'predicate' parameter to 'DataFrame.skipUntil' function to be a predicate function that returns true/false.\");\n\n        return this.skipWhile(value => !predicate(value)); \n    }\n\n    /**\n     * Take a number of rows from the dataframe.\n     *\n     * @param numValues Number of rows to take.\n     * \n     * @return Returns a new dataframe with only the specified number of rows taken from the original dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * const dfWithRowsTaken = df.take(15); // Take only the first 15 rows from the original dataframe.\n     * </pre>\n     */\n    take (numRows: number): IDataFrame<IndexT, ValueT> {\n        if (!isNumber(numRows)) throw new Error(\"Expected 'numRows' parameter to 'DataFrame.take' function to be a number.\");\n\n        return new DataFrame<IndexT, ValueT>(() => {\n            const content = this.getContent();\n            return {\n                columnNames: content.columnNames,\n                index: new TakeIterable(content.index, numRows),\n                values: new TakeIterable(content.values, numRows),\n                pairs: new TakeIterable(content.pairs, numRows)\n            };\n        });\n    }\n\n    /**\n     * Takes rows from the dataframe while a condition evaluates to true or truthy.\n     *\n     * @param predicate Returns true/truthy to continue to take rows from the original dataframe.\n     * \n     * @return Returns a new dataframe with only the initial sequential rows that were taken while the predicate returned true/truthy.\n     * \n     * @example\n     * <pre>\n     * \n     * const dfWithRowsTaken = df.takeWhile(row => row.CustomerName === \"Fred\"); // Take only initial customers named Fred.\n     * </pre>\n     */\n    takeWhile (predicate: PredicateFn<ValueT>): IDataFrame<IndexT, ValueT> {\n        if (!isFunction(predicate)) throw new Error(\"Expected 'predicate' parameter to 'DataFrame.takeWhile' function to be a predicate function that returns true/false.\");\n\n        return new DataFrame<IndexT, ValueT>(() => {\n            const content = this.getContent();\n            return {\n                columnNames: content.columnNames,\n                values: new TakeWhileIterable(content.values, predicate),\n                pairs: new TakeWhileIterable(content.pairs, pair => predicate(pair[1]))\n            };\n        });\n    }\n\n    /**\n     * Takes rows from the dataframe untils a condition evaluates to true or truthy.\n     *\n     * @param predicate Return true/truthy to stop taking rows in the original dataframe.\n     * \n     * @return Returns a new dataframe with only the initial sequential rows taken until the predicate returned true/truthy.\n     * \n     * @example\n     * <pre>\n     * \n     * const dfWithRowsTaken = df.takeUntil(row => row.CustomerName === \"Fred\"); // Take all initial customers until we find Fred.\n     * </pre>\n     */\n    takeUntil (predicate: PredicateFn<ValueT>): IDataFrame<IndexT, ValueT> {\n        if (!isFunction(predicate)) throw new Error(\"Expected 'predicate' parameter to 'DataFrame.takeUntil' function to be a predicate function that returns true/false.\");\n\n        return this.takeWhile(value => !predicate(value));\n    }\n\n    /**\n     * Count the number of rows in the dataframe\n     *\n     * @return Returns the count of all rows.\n     * \n     * @example\n     * <pre>\n     * \n     * const numRows = df.count();\n     * </pre>\n     */\n    count (): number {\n\n        let total = 0;\n        for (const value of this.getContent().values) {\n            ++total;\n        }\n        return total;\n    }\n\n    /**\n     * Get the first row of the dataframe.\n     *\n     * @return Returns the first row of the dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * const firstRow = df.first();\n     * </pre>\n     */\n    first (): ValueT {\n\n        for (const value of this) {\n            return value; // Only need the first value.\n        }\n\n        throw new Error(\"DataFrame.first: No values in DataFrame.\");\n    }\n\n    /**\n     * Get the last row of the dataframe.\n     *\n     * @return Returns the last row of the dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * const lastRow = df.last();\n     * </pre>\n     */\n    last (): ValueT {\n\n        let lastValue = null;\n\n        for (const value of this) {\n            lastValue = value; // Throw away all values until we get to the last one.\n        }\n\n        if (lastValue === null) {\n            throw new Error(\"DataFrame.last: No values in DataFrame.\");\n        }\n\n        return lastValue;\n    }    \n    \n    /**\n     * Get the row, if there is one, with the specified index.\n     *\n     * @param index Index to for which to retreive the row.\n     *\n     * @return Returns the row from the specified index in the dataframe or undefined if there is no such index in the present in the dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * const row = df.at(5); // Get the row at index 5 (with a default 0-based index).\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const date = ... some date ...\n     * // Retreive the row with specified date from a time-series dataframe (assuming date indexed has been applied).\n     * const row = df.at(date); \n     * </pre>\n     */\n    at (index: IndexT): ValueT | undefined {\n\n        if (this.none()) {\n            return undefined;\n        }\n\n        return this.getRowByIndex(index);\n    }\n    \n    /** \n     * Get X rows from the start of the dataframe.\n     * Pass in a negative value to get all rows at the head except for X rows at the tail.\n     *\n     * @param numValues Number of rows to take.\n     * \n     * @return Returns a new dataframe that has only the specified number of rows taken from the start of the original dataframe.  \n     * \n     * @examples\n     * <pre>\n     * \n     * const sample = df.head(10); // Take a sample of 10 rows from the start of the dataframe.\n     * </pre>\n     */\n    head (numValues: number): IDataFrame<IndexT, ValueT> {\n\n        if (!isNumber(numValues)) throw new Error(\"Expected 'numValues' parameter to 'DataFrame.head' function to be a number.\");\n\n        if (numValues === 0) {\n            return new DataFrame<IndexT, ValueT>(); // Empty dataframe.\n        }\n\n        const toTake = numValues < 0 ? this.count() - Math.abs(numValues) : numValues;\n        return this.take(toTake);\n    }\n\n    /** \n     * Get X rows from the end of the dataframe.\n     * Pass in a negative value to get all rows at the tail except X rows at the head.\n     *\n     * @param numValues Number of rows to take.\n     * \n     * @return Returns a new dataframe that has only the specified number of rows taken from the end of the original dataframe.  \n     * \n     * @examples\n     * <pre>\n     * \n     * const sample = df.tail(12); // Take a sample of 12 rows from the end of the dataframe.\n     * </pre>\n     */\n    tail (numValues: number): IDataFrame<IndexT, ValueT> {\n\n        if (!isNumber(numValues)) throw new Error(\"Expected 'numValues' parameter to 'DataFrame.tail' function to be a number.\");\n\n        if (numValues === 0) {\n            return new DataFrame<IndexT, ValueT>(); // Empty dataframe.\n        }\n\n        const toSkip = numValues > 0 ? this.count() - numValues : Math.abs(numValues);\n        return this.skip(toSkip);\n    }\n\n    /**\n     * Filter the dataframe through a user-defined predicate function.\n     * \n     * `where` is an alias for {@link DataFrame.filter}.\n     *\n     * This is the same concept as the JavaScript function `Array.filter` but filters a dataframe rather than an array.\n     * \n     * @param predicate Predicate function to filter values from the dataframe. Returns true/truthy to keep elements, or false/falsy to omit elements.\n     * \n     * @return Returns a new dataframe containing only the values from the original dataframe that matched the predicate. \n     * \n     * @example\n     * <pre>\n     * \n     * // Filter so we only have sales figures greater than 100.\n     * const filtered = dataframe.where(row => row.salesFigure > 100); \n     * console.log(filtered.toArray());\n     * </pre>\n     */\n     where (predicate: PredicateFn<ValueT>): IDataFrame<IndexT, ValueT> {\n        if (!isFunction(predicate)) throw new Error(\"Expected 'predicate' parameter to 'DataFrame.where' to be a function.\");\n\n        return this.filter(predicate);\n    }\n\n    /**\n     * Filter the dataframe through a user-defined predicate function.\n     * \n     * This is the same concept as the JavaScript function `Array.filter` but filters a dataframe rather than an array.\n     *\n     * @param predicate Predicate function to filter values from the dataframe. Returns true/truthy to keep elements, or false/falsy to omit elements.\n     * \n     * @return Returns a new dataframe containing only the values from the original dataframe that matched the predicate. \n     * \n     * @example\n     * <pre>\n     * \n     * // Filter so we only have sales figures greater than 100.\n     * const filtered = dataframe.filter(row => row.salesFigure > 100); \n     * console.log(filtered.toArray());\n     * </pre>\n     */\n    filter (predicate: PredicateFn<ValueT>): IDataFrame<IndexT, ValueT> {\n        if (!isFunction(predicate)) throw new Error(\"Expected 'predicate' parameter to 'DataFrame.filter' to be a function.\");\n\n        return new DataFrame<IndexT, ValueT>(() => {\n            const content = this.getContent();\n            return {\n                columnNames: content.columnNames,\n                values: new WhereIterable(content.values, predicate),\n                pairs: new WhereIterable(content.pairs, pair => predicate(pair[1]))\n            };\n        });\n    }\n\n    /**\n     * Invoke a callback function for each row in the dataframe.\n     *\n     * @param callback The calback function to invoke for each row.\n     * \n     * @return Returns the original dataframe with no modifications.\n     * \n     * @example\n     * <pre>\n     * \n     * df.forEach(row => {\n     *      // ... do something with the row ...\n     * });\n     * </pre>\n     */\n    forEach (callback: CallbackFn<ValueT>): IDataFrame<IndexT, ValueT> {\n        if (!isFunction(callback)) throw new Error(\"Expected 'callback' parameter to 'DataFrame.forEach' to be a function.\");\n\n        let index = 0;\n        for (const value of this) {\n            callback(value, index++);\n        }\n\n        return this;\n    }\n\n    /**\n     * Evaluates a predicate function for every row in the dataframe to determine \n     * if some condition is true/truthy for **all** rows in the dataframe.\n     * \n     * @param predicate Predicate function that receives each row. It should returns true/truthy for a match, otherwise false/falsy.\n     *\n     * @return Returns true if the predicate has returned true or truthy for every row in the dataframe, otherwise returns false. Returns false for an empty dataframe. \n     * \n     * @example\n     * <pre>\n     * \n     * const everyoneIsNamedFred = df.all(row => row.CustomerName === \"Fred\"); // Check if all customers are named Fred.\n     * </pre>\n     */\n    all (predicate: PredicateFn<ValueT>): boolean {\n        if (!isFunction(predicate)) throw new Error(\"Expected 'predicate' parameter to 'DataFrame.all' to be a function.\")\n\n        let count = 0;\n\n        for (const value of this) {\n            if (!predicate(value)) {\n                return false;\n            }\n\n            ++count;\n        }\n\n        return count > 0;\n    }\n\n    /**\n     * Evaluates a predicate function for every row in the dataframe to determine \n     * if some condition is true/truthy for **any** of rows in the dataframe.\n     * \n     * If no predicate is specified then it simply checks if the dataframe contains more than zero rows.\n     *\n     * @param predicate Optional predicate function that receives each row. It should return true/truthy for a match, otherwise false/falsy.\n     *\n     * @return Returns true if the predicate has returned truthy for any row in the dataframe, otherwise returns false. \n     * If no predicate is passed it returns true if the dataframe contains any rows at all. \n     * Returns false for an empty dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * const anyFreds = df.any(row => row.CustomerName === \"Fred\"); // Do we have any customers named Fred?\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const anyCustomers = df.any(); // Do we have any customers at all?\n     * </pre>\n     */\n    any (predicate?: PredicateFn<ValueT>): boolean {\n        if (predicate) {\n            if (!isFunction(predicate)) throw new Error(\"Expected optional 'predicate' parameter to 'DataFrame.any' to be a function.\")\n        }\n\n        if (predicate) {\n            // Use the predicate to check each value.\n            for (const value of this) {\n                if (predicate(value)) {\n                    return true;\n                }\n            }\n        }\n        else {\n            // Just check if there is at least one item.\n            const iterator = this[Symbol.iterator]()\n            return !iterator.next().done;\n        }\n\n        return false; // Nothing passed.\n    }\n\n    /**\n     * Evaluates a predicate function for every row in the dataframe to determine \n     * if some condition is true/truthy for **none** of rows in the dataframe.\n     * \n     * If no predicate is specified then it simply checks if the dataframe contains zero rows.\n     *\n     * @param predicate Optional predicate function that receives each row. It should return true/truthy for a match, otherwise false/falsy.\n     *\n     * @return Returns true if the predicate has returned truthy for zero rows in the dataframe, otherwise returns false. Returns false for an empty dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * const noFreds = df.none(row => row.CustomerName === \"Fred\"); // Do we have zero customers named Fred?\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const noCustomers = df.none(); // Do we have zero customers?\n     * </pre>\n     */\n    none (predicate?: PredicateFn<ValueT>): boolean {\n\n        if (predicate) {\n            if (!isFunction(predicate)) throw new Error(\"Expected 'predicate' parameter to 'DataFrame.none' to be a function.\")\n        }\n\n        if (predicate) {\n            // Use the predicate to check each value.\n            for (const value of this) {\n                if (predicate(value)) {\n                    return false;\n                }\n            }\n        }\n        else {\n            // Just check if empty.\n            const iterator = this[Symbol.iterator]()\n            return iterator.next().done || false;\n        }\n\n        return true; // Nothing failed the predicate.\n    }\n\n    //TODO: Improve this example (and subsequent examples, they look like series setup rather than dataframe)..\n    /**\n     * Gets a new dataframe containing all rows starting at or after the specified index value.\n     * \n     * @param indexValue The index value at which to start the new dataframe.\n     * \n     * @return Returns a new dataframe containing all rows starting at or after the specified index value. \n     * \n     * @example\n     * <pre>\n     * \n     * const df = new DataFrame({ \n     *      index: [0, 1, 2, 3], // This is the default index.\n     *      values: [10, 20, 30, 40],\n     * });\n     * \n     * const lastHalf = df.startAt(2);\n     * expect(lastHalf.toArray()).to.eql([30, 40]);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const timeSeriesDf = ... a dataframe indexed by date/time ...\n     * \n     * // Get all rows starting at (or after) a particular date.\n     * const result = timeSeriesDf.startAt(new Date(2016, 5, 4)); \n     * </pre>\n     */\n    startAt (indexValue: IndexT): IDataFrame<IndexT, ValueT> {\n\n        return new DataFrame<IndexT, ValueT>(() => {\n            const content = this.getContent();\n            const lessThan = this.getIndex().getLessThan();\n            return {                \n                columnNames: content.columnNames,\n                index: new SkipWhileIterable(content.index, index => lessThan(index, indexValue)),\n                pairs: new SkipWhileIterable(content.pairs, pair => lessThan(pair[0], indexValue)),\n            };\n        });\n    }\n\n    /**\n     * Gets a new dataframe containing all rows up until and including the specified index value (inclusive).\n     * \n     * @param indexValue The index value at which to end the new dataframe.\n     * \n     * @return Returns a new dataframe containing all rows up until and including the specified index value.\n     * \n     * @example\n     * <pre>\n     * \n     * const df = new DataFrame({ \n     *      index: [0, 1, 2, 3], // This is the default index.\n     *      values: [10, 20, 30, 40],\n     * });\n     * \n     * const firstHalf = df.endAt(1);\n     * expect(firstHalf.toArray()).to.eql([10, 20]);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const timeSeriesDf = ... a dataframe indexed by date/time ...\n     * \n     * // Get all rows ending at a particular date.\n     * const result = timeSeriesDf.endAt(new Date(2016, 5, 4)); \n     * </pre>\n     */\n    endAt (indexValue: IndexT): IDataFrame<IndexT, ValueT> {\n\n        return new DataFrame<IndexT, ValueT>(() => {\n            const content = this.getContent();\n            const lessThanOrEqualTo = this.getIndex().getLessThanOrEqualTo();\n            return {\n                columnNames: content.columnNames,\n                index: new TakeWhileIterable(content.index, index => lessThanOrEqualTo(index, indexValue)),\n                pairs: new TakeWhileIterable(content.pairs, pair => lessThanOrEqualTo(pair[0], indexValue)),\n            };\n        });\n    }\n\n    /**\n     * Gets a new dataframe containing all rows up to the specified index value (exclusive).\n     * \n     * @param indexValue The index value at which to end the new dataframe.\n     * \n     * @return Returns a new dataframe containing all rows up to (but not including) the specified index value. \n     * \n     * @example\n     * <pre>\n     * \n     * const df = new DataFrame({ \n     *      index: [0, 1, 2, 3], // This is the default index.\n     *      values: [10, 20, 30, 40],\n     * });\n     * \n     * const firstHalf = df.before(2);\n     * expect(firstHalf.toArray()).to.eql([10, 20]);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const timeSeriesDf = ... a dataframe indexed by date/time ...\n     * \n     * // Get all rows before the specified date.\n     * const result = timeSeriesDf.before(new Date(2016, 5, 4)); \n     * </pre>\n     */\n    before (indexValue: IndexT): IDataFrame<IndexT, ValueT> {\n\n        return new DataFrame<IndexT, ValueT>(() => {\n            const content = this.getContent();\n            const lessThan = this.getIndex().getLessThan();\n            return {\n                columnNames: content.columnNames,\n                index: new TakeWhileIterable(content.index, index => lessThan(index, indexValue)),\n                pairs: new TakeWhileIterable(content.pairs, pair => lessThan(pair[0], indexValue)),\n            };\n        });\n    }\n\n    /**\n     * Gets a new dataframe containing all rows after the specified index value (exclusive).\n     * \n     * @param indexValue The index value after which to start the new dataframe.\n     * \n     * @return Returns a new dataframe containing all rows after the specified index value.\n     * \n     * @example\n     * <pre>\n     * \n     * const df = new DataFrame({ \n     *      index: [0, 1, 2, 3], // This is the default index.\n     *      values: [10, 20, 30, 40],\n     * });\n     * \n     * const lastHalf = df.before(1);\n     * expect(lastHalf.toArray()).to.eql([30, 40]);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const timeSeriesDf = ... a dataframe indexed by date/time ...\n     * \n     * // Get all rows after the specified date.\n     * const result = timeSeriesDf.after(new Date(2016, 5, 4)); \n     * </pre>\n     */\n    after (indexValue: IndexT): IDataFrame<IndexT, ValueT> {\n        return new DataFrame<IndexT, ValueT>(() => {\n            const content = this.getContent();\n            const lessThanOrEqualTo = this.getIndex().getLessThanOrEqualTo();\n            return {\n                columnNames: content.columnNames,\n                index: new SkipWhileIterable(content.index, index => lessThanOrEqualTo(index, indexValue)),\n                pairs: new SkipWhileIterable(content.pairs, pair => lessThanOrEqualTo(pair[0], indexValue)),\n            };\n        });\n    }\n\n    /**\n     * Gets a new dataframe containing all rows between the specified index values (inclusive).\n     * \n     * @param startIndexValue The index at which to start the new dataframe.\n     * @param endIndexValue The index at which to end the new dataframe.\n     * \n     * @return Returns a new dataframe containing all values between the specified index values (inclusive).\n     * \n     * @example\n     * <pre>\n     * \n     * const df = new DataFrame({ \n     *      index: [0, 1, 2, 3, 4, 6], // This is the default index.\n     *      values: [10, 20, 30, 40, 50, 60],\n     * });\n     * \n     * const middleSection = df.between(1, 4);\n     * expect(middleSection.toArray()).to.eql([20, 30, 40, 50]);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const timeSeriesDf = ... a dataframe indexed by date/time ...\n     * \n     * // Get all rows between the start and end dates (inclusive).\n     * const result = timeSeriesDf.after(new Date(2016, 5, 4), new Date(2016, 5, 22)); \n     * </pre>\n     */\n    between (startIndexValue: IndexT, endIndexValue: IndexT): IDataFrame<IndexT, ValueT> {\n        return this.startAt(startIndexValue).endAt(endIndexValue); \n    }\n\n    /** \n     * Format the dataframe for display as a string.\n     * This forces lazy evaluation to complete.\n     * \n     * @return Generates and returns a string representation of the dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * console.log(df.toString());\n     * </pre>\n     */\n    toString (): string {\n\n        const columnNames = this.getColumnNames();\n        const header = [\"__index__\"].concat(columnNames);\n\n        const table = new Table();\n        //TODO: for (const pair of this.asPairs()) {\n        for (const pair of this.toPairs()) {\n            const index = pair[0];\n            const value = pair[1] as any;\n            table.cell(header[0], index);\n            for (let columnIndex = 0; columnIndex < columnNames.length; ++columnIndex) {\n                const columnName = columnNames[columnIndex];\n                table.cell(header[columnIndex+1], value[columnName]);\n            }\n            table.newRow();\n        }\n\n        return table.toString();\n    }\n\n    /**\n     * Parse a column with string values and convert it to a column with int values.\n     *\n     * @param columnNameOrNames Specifies the column name or array of column names to parse.\n     * \n     * @return Returns a new dataframe with values of particular named column(s) parsed from strings to ints.\n     * \n     * @example\n     * <pre>\n     * \n     * const parsed = df.parseInts(\"MyIntColumn\");\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const parsed = df.parseInts([\"MyIntColumnA\", \"MyIntColumnA\"]);\n     * </pre>\n     */\n    parseInts (columnNameOrNames: string | string[]): IDataFrame<IndexT, ValueT> {\n\n        if (isArray(columnNameOrNames)) {\n            let working: IDataFrame<IndexT, ValueT> = this;\n            for (const columnName of columnNameOrNames) {\n                working = working.parseInts(columnName);\n            }\n            \n            return working;\n        }\n        else {\n            return this.withSeries(columnNameOrNames, this.getSeries(columnNameOrNames).parseInts());\n        }\n    }\n\n    /**\n     * Parse a column with string values and convert it to a column with float values.\n     *\n     * @param columnNameOrNames Specifies the column name or array of column names to parse.\n     * \n     * @return Returns a new dataframe with values of particular named column(s) parsed from strings to floats.\n     * \n     * @example\n     * <pre>\n     * \n     * const parsed = df.parseFloats(\"MyFloatColumn\");\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const parsed = df.parseFloats([\"MyFloatColumnA\", \"MyFloatColumnA\"]);\n     * </pre>\n     */\n    parseFloats (columnNameOrNames: string | string[]): IDataFrame<IndexT, ValueT> {\n\n        if (isArray(columnNameOrNames)) {\n            let working: IDataFrame<IndexT, ValueT> = this;\n            for (const columnName of columnNameOrNames) {\n                working = working.parseFloats(columnName);\n            }\n            \n            return working;\n        }\n        else {\n            return this.withSeries(columnNameOrNames, this.getSeries(columnNameOrNames).parseFloats());\n        }\n    }\n\n    /**\n     * Parse a column with string values and convert it to a column with date values.\n     *\n     * @param columnNameOrNames Specifies the column name or array of column names to parse.\n     * @param formatString Optional formatting string for dates.\n     * \n     * Moment is used for date parsing.\n     * https://momentjs.com\n     * \n     * @return Returns a new dataframe with values of particular named column(s) parsed from strings to dates.\n     * \n     * @example\n     * <pre>\n     * \n     * const parsed = df.parseDates(\"MyDateColumn\");\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const parsed = df.parseDates([\"MyDateColumnA\", \"MyDateColumnA\"]);\n     * </pre>\n     */\n    parseDates (columnNameOrNames: string | string[], formatString?: string): IDataFrame<IndexT, ValueT> {\n\n        if (formatString) {\n            if (!isString(formatString)) throw new Error(\"Expected optional 'formatString' parameter to 'DataFrame.parseDates' to be a string (if specified).\");\n        }\n\n        if (isArray(columnNameOrNames)) {\n            let working: IDataFrame<IndexT, ValueT> = this;\n            for (const columnName of columnNameOrNames) {\n                working = working.parseDates(columnName, formatString);\n            }\n            \n            return working;\n        }\n        else {\n            return this.withSeries(columnNameOrNames, this.getSeries(columnNameOrNames).parseDates(formatString));\n        }\n    }\n\n    /**\n     * Convert a column of values of different types to a column of string values.\n     *\n     * @param columnNames Specifies the column name or array of column names to convert to strings. Can also be a format spec that specifies which columns to convert and what their format should be. \n     * @param formatString Optional formatting string for dates.\n     * \n     * Numeral.js is used for number formatting.\n     * http://numeraljs.com/\n     * \n     * Moment is used for date formatting.\n     * https://momentjs.com/docs/#/parsing/string-format/\n     * \n     * @return Returns a new dataframe with a particular named column converted from values to strings.\n     * \n     * @example\n     * <pre>\n     * \n     * const result = df.toStrings(\"MyDateColumn\", \"YYYY-MM-DD\");\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const result = df.toStrings(\"MyFloatColumn\", \"0.00\");\n     * </pre>\n     */\n    toStrings (columnNames: string | string[] | IFormatSpec, formatString?: string): IDataFrame<IndexT, ValueT> {\n\n        if (isObject(columnNames)) {\n            for (const columnName of Object.keys(columnNames)) {\n                if (!isString((columnNames as any)[columnName])) throw new Error(\"Expected values of 'columnNames' parameter to be strings when a format spec is passed in.\");\n            }\n\n            if (!isUndefined(formatString)) throw new Error(\"Optional 'formatString' parameter to 'DataFrame.toStrings' should not be set when passing in a format spec.\");\n        }\n        else {\n            if (!isArray(columnNames)) {\n                if (!isString(columnNames)) throw new Error(\"Expected 'columnNames' parameter to 'DataFrame.toStrings' to be a string, array of strings or format spec that specifes which columns should be converted to strings.\");\n            }\n\n            if (formatString) {\n                if (!isString(formatString)) throw new Error(\"Expected optional 'formatString' parameter to 'DataFrame.toStrings' to be a string (if specified).\");\n            }    \n        }\n\n        if (isObject(columnNames)) {\n            let working: IDataFrame<IndexT, ValueT> = this;\n            for (const columnName of Object.keys(columnNames)) {\n                const columnFormatString = (columnNames as any)[columnName];\n                working = working.toStrings(columnName, columnFormatString)\n            }\n            \n            return working;\n        }\n        else if (isArray(columnNames)) {\n            let working: IDataFrame<IndexT, ValueT> = this;\n            for (const columnName of columnNames) {\n                working = working.toStrings(columnName, formatString);\n            }\n            \n            return working;\n        }\n        else {\n            const singleColumnName = columnNames as string;\n            return this.withSeries(singleColumnName, this.getSeries(singleColumnName).toStrings(formatString));\n        }\n    }\n\n    /**\n     * Produces a new dataframe with all string values truncated to the requested maximum length.\n     *\n     * @param maxLength The maximum length of the string values after truncation.\n     * \n     * @return Returns a new dataframe with all strings truncated to the specified maximum length.\n     * \n     * @example\n     * <pre>\n     * \n     * // Truncate all string columns to 100 characters maximum.\n     * const truncatedDf = df.truncateString(100);\n     * </pre>\n     */\n    truncateStrings (maxLength: number): IDataFrame<IndexT, ValueT> {\n        if (!isNumber(maxLength)) throw new Error(\"Expected 'maxLength' parameter to 'truncateStrings' to be an integer.\");\n\n        return this.select((row: any) => {\n            const output: any = {};\n            for (const key of Object.keys(row)) {\n                const value = row[key];\n                if (isString(value)) {\n                    output[key] = value.substring(0, maxLength);\n                }\n                else {\n                    output[key] = value;\n                }\n            }\n           return <ValueT> output;\n        });\n    }\n\n    /**\n     * Produces a new dataframe with all number values rounded to the specified number of places.\n     *\n     * @param numDecimalPlaces The number of decimal places, defaults to 2.\n     * \n     * @returns Returns a new dataframe with all number values rounded to the specified number of places.\n     * \n     * @example\n     * <pre>\n     * \n     * const df = ... your data frame ...\n     * const rounded = df.round(); // Round numbers to two decimal places.\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const df = ... your data frame ...\n     * const rounded = df.round(3); // Round numbers to three decimal places.\n     * </pre>\n     */\n    round (numDecimalPlaces?: number): IDataFrame<IndexT, ValueT> {\n\n        if (numDecimalPlaces !== undefined) {\n            if (!isNumber(numDecimalPlaces)) {\n                throw new Error(\"Expected 'numDecimalPlaces' parameter to 'DataFrame.round' to be a number.\");\n            }\n        }\n        else {\n            numDecimalPlaces = 2; // Default to two decimal places.\n        }\n\n        return this.select((row: any) => {\n            const output: any = {};\n            for (const key of Object.keys(row)) {\n                const value = row[key];\n                if (isNumber(value)) {\n                    output[key] = parseFloat(value.toFixed(numDecimalPlaces));\n                }\n                else {\n                    output[key] = value;\n                }\n            }\n           return <ValueT> output;\n        });\n    }\n\n    /**\n     * Forces lazy evaluation to complete and 'bakes' the dataframe into memory.\n     * \n     * @return Returns a dataframe that has been 'baked', all lazy evaluation has completed.  \n     * \n     * @example\n     * <pre>\n     * \n     * const baked = df.bake();\n     * </pre>\n     */\n    bake (): IDataFrame<IndexT, ValueT> {\n\n        if (this.getContent().isBaked) {\n            // Already baked.\n            return this;\n        }\n\n        return new DataFrame({\n            columnNames: this.getColumnNames(),\n            values: this.toArray(),\n            pairs: this.toPairs(),\n            baked: true,\n        });\n    }\n\n    /** \n     * Gets a new dataframe in reverse order.\n     * \n     * @return Returns a new dataframe that is the reverse of the input.\n     * \n     * @example\n     * <pre>\n     * \n     * const reversedDf = df.reverse();\n     * </pre>\n     */\n    reverse (): IDataFrame<IndexT, ValueT> {\n        return new DataFrame<IndexT, ValueT>(() => {\n            const content = this.getContent();\n            return {\n                columnNames: content.columnNames,\n                values: new ReverseIterable(content.values),\n                index: new ReverseIterable(content.index),\n                pairs: new ReverseIterable(content.pairs)\n            };\n        });\n    }\n\n    /**\n     * Returns only the set of rows in the dataframe that are distinct according to some criteria.\n     * This can be used to remove duplicate rows from the dataframe.\n     *\n     * @param selector User-defined selector function that specifies the criteria used to make comparisons for duplicate rows.\n     * Note that the selector determines the object used for the comparison.  If the selector returns a new instance of an array or a\n     * javascript object, distinct will always include all rows since the object instances are different even if the members are the same.  \n     * \n     * @return Returns a dataframe containing only unique values as determined by the 'selector' function. \n     * \n     * @example\n     * <pre>\n     * \n     * // Remove duplicate rows by customer id. Will return only a single row per customer.\n     * const distinctCustomers = salesDf.distinct(sale => sale.CustomerId);\n     * </pre>\n     * \n     * @example\n     * \n     * <pre>\n     * // Remove duplicate rows across mutliple columns\n     * const safeJoinChar = '$';\n     * const distinctCustomers = salesDf.distinct(sale => [sale.CustomerId, sale.MonthOfYear].join(safeJoinChar));\n     * </pre>\n     */\n    distinct<ToT> (selector?: SelectorFn<ValueT, ToT>): IDataFrame<IndexT, ValueT> {\n        return new DataFrame<IndexT, ValueT>(() => {\n            const content = this.getContent();\n            return {\n                columnNames: content.columnNames,\n                values: new DistinctIterable<ValueT, ToT>(content.values, selector),\n                pairs: new DistinctIterable<[IndexT, ValueT],ToT>(content.pairs, (pair: [IndexT, ValueT]): ToT => selector && selector(pair[1]) || <ToT> <any> pair[1])\n            };\n        });\n    }\n\n    /**\n     * Collects rows in the dataframe into a series of groups according to the user-defined selector function that defines the group for each row.\n     *\n     * @param selector User-defined selector function that defines the value to group by.\n     *\n     * @return Returns a {@link Series} of groups. Each group is a dataframe with values that have been grouped by the 'selector' function.\n     * \n     * @example\n     * <pre>\n     * \n     * const salesDf = ... product sales ...\n     * const salesByProduct = salesDf.groupBy(sale => sale.ProductId);\n     * for (const productSalesGroup of salesByProduct) {\n     *      // ... do something with each product group ...\n     *      const productId = productSalesGroup.first().ProductId;\n     *      const totalSalesForProduct = productSalesGroup.deflate(sale => sale.Amount).sum();\n     *      console.log(totalSalesForProduct);\n     * }\n     * </pre>\n     */\n    groupBy<GroupT> (selector: SelectorWithIndexFn<ValueT, GroupT>): ISeries<number, IDataFrame<IndexT, ValueT>> {\n\n        if (!isFunction(selector)) throw new Error(\"Expected 'selector' parameter to 'DataFrame.groupBy' to be a selector function that determines the value to group the series by.\");\n\n        return new Series<number, IDataFrame<IndexT, ValueT>>(() => {\n            const groups: any[] = []; // Each group, in order of discovery.\n            const groupMap: any = {}; // Group map, records groups by key.\n            \n            let valueIndex = 0;\n    \n            for (const pair of this.getContent().pairs) {\n                const groupKey = selector(pair[1], valueIndex);\n                ++valueIndex;\n                const existingGroup = groupMap[groupKey];\n                if (existingGroup) {\n                    existingGroup.push(pair);\n                }\n                else {\n                    const newGroup: any[] = [];\n                    newGroup.push(pair);\n                    groups.push(newGroup);\n                    groupMap[groupKey] = newGroup;\n                }\n            }\n\n            return {\n                values: groups.map(group => new DataFrame<IndexT, ValueT>({ pairs: group }))\n            };\n        });\n    }\n    \n    /**\n     * Collects rows in the dataframe into a series of groups according to a user-defined selector function that identifies adjacent rows that should be in the same group.\n     *\n     * @param selector Optional selector that defines the value to group by.\n     *\n     * @return Returns a {@link Series} of groups. Each group is a dataframe with values that have been grouped by the 'selector' function.\n     * \n     * @example\n     * <pre>\n     * \n     * // Some ultra simple stock trading strategy backtesting...\n     * const dailyStockPriceDf = ... daily stock price for a company ...\n     * const priceGroups  = dailyStockPriceDf.groupBy(day => day.close > day.movingAverage);\n     * for (const priceGroup of priceGroups) {\n     *      // ... do something with each stock price group ...\n     * \n     *      const firstDay = priceGroup.first();\n     *      if (firstDay.close > movingAverage) {\n     *          // This group of days has the stock price above its moving average.\n     *          // ... maybe enter a long trade here ...\n     *      }\n     *      else {\n     *          // This group of days has the stock price below its moving average.\n     *          // ... maybe enter a short trade here ...\n     *      }\n     * }\n     * </pre>\n     */\n    groupSequentialBy<GroupT> (selector?: SelectorFn<ValueT, GroupT>): ISeries<number, IDataFrame<IndexT, ValueT>> {\n\n        if (selector) {\n            if (!isFunction(selector)) throw new Error(\"Expected 'selector' parameter to 'DataFrame.groupSequentialBy' to be a selector function that determines the value to group the series by.\")\n        }\n        else {\n            selector = value => <GroupT> <any> value;\n        }\n        \n        return this.variableWindow((a: ValueT, b: ValueT): boolean => selector!(a) === selector!(b));\n    }\n\n    /**\n     * Concatenate multiple dataframes into a single dataframe.\n     *\n     * @param dataframes Array of dataframes to concatenate.\n     * \n     * @return Returns a single dataframe concatenated from multiple input dataframes. \n     * \n     * @example\n     * <pre>\n     * \n     * const df1 = ...\n     * const df2 = ...\n     * const df3 = ...\n     * const concatenatedDf = DataFrame.concat([df1, df2, df3]);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const dfs = [... array of dataframes...];\n     * const concatenatedDf = DataFrame.concat(dfs);\n     * </pre>\n     */\n    static concat<IndexT = any, ValueT = any> (dataframes: IDataFrame<IndexT, ValueT>[]): IDataFrame<IndexT, ValueT > {\n        if (!isArray(dataframes)) throw new Error(\"Expected 'dataframes' parameter to 'DataFrame.concat' to be an array of dataframes.\");\n\n        return new DataFrame(() => {\n            const upcast = <DataFrame<IndexT, ValueT>[]> dataframes; // Upcast so that we can access private index, values and pairs.\n            const contents = upcast.map(dataframe => dataframe.getContent());\n\n            let columnNames: string[] = [];\n            for (const content of contents) {\n                for (const columnName of content.columnNames) {\n                    columnNames.push(columnName);\n                }\n            }\n\n            columnNames = makeDistinct(columnNames);\n\n            return {\n                columnNames: columnNames,\n                values: new ConcatIterable(contents.map(content => content.values)),\n                pairs: new ConcatIterable(contents.map(content => content.pairs)),\n            };\n        });    \n    }\n    \n    /**\n     * Concatenate multiple other dataframes onto this dataframe.\n     * \n     * @param dataframes Multiple arguments. Each can be either a dataframe or an array of dataframes.\n     * \n     * @return Returns a single dataframes concatenated from multiple input dataframes. \n     * \n     * @example\n     * <pre>\n     * \n     * const concatenatedDf = dfA.concat(dfB);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const concatenatedDf = dfA.concat(dfB, dfC);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const concatenatedDf = dfA.concat([dfB, dfC]);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const concatenatedDf = dfA.concat(dfB, [dfC, dfD]);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const otherDfs = [... array of dataframes...];\n     * const concatenatedDf = dfA.concat(otherDfs);\n     * </pre>\n     */    \n    concat (...dataframes: (IDataFrame<IndexT, ValueT>[] | IDataFrame<IndexT, ValueT>)[]): IDataFrame<IndexT, ValueT> {\n        const concatInput: IDataFrame<IndexT, ValueT>[] = [this];\n\n        for (const input of dataframes) {\n            if (isArray(input)) {\n                for (const subInput of input) {\n                    concatInput.push(subInput);\n                }\n            }\n            else {\n                concatInput.push(input);\n            }\n        }\n\n        return DataFrame.concat<IndexT, ValueT>(concatInput);\n    }\n   \n    /**\n    * Zip (or merge) together multiple dataframes to create a new dataframe.\n    * Preserves the index of the first dataframe.\n    *\n    * @param input An iterable of datafames to be zipped.\n    * @param zipper User-defined zipper function that merges rows. It produces rows for the new dataframe based-on rows from the input dataframes.\n    * \n    * @return Returns a single dataframe zipped (or merged) from multiple input dataframes. \n    * \n    * @example\n    * <pre>\n    * \n    * function produceNewRow (inputRows) {\n    *       const outputRow = {\n    *           // Produce output row based on the contents of the input rows.\n    *       };\n    *       return outputRow;\n    * }\n    * \n    * const inputDfs = [... array of input dataframes ...];\n    * const zippedDf = DataFrame.zip(inputDfs, produceNewRow);\n    * \n    * </pre>\n    * \n    * @example\n    * <pre>\n    * \n    * function produceNewRow (inputRows) {\n    *       const outputRow = {\n    *           // Produce output row based on the contents of the input rows.\n    *       };\n    *       return outputRow;\n    * }\n    * \n    * const dfA = new DataFrame([ { Value: 10 }, { Value: 20 }, { Value: 30 }]);\n    * const dfB = new DataFrame([ { Value: 100 }, { Value: 200 }, { Value: 300 }]);\n    * const zippedDf = DataFrame.zip([dfA, dfB], produceNewRow);\n    * </pre>\n    */\n    static zip<IndexT = any, ValueT = any, ResultT = any> (dataframes: Iterable<IDataFrame<IndexT, ValueT>>, zipper: ZipNFn<ValueT, ResultT>): IDataFrame<IndexT, ResultT> {\n\n        const input = Array.from(dataframes);\n\n        if (input.length === 0) {\n            return new DataFrame<IndexT, ResultT>();\n        }\n\n        const firstSeries = input[0];\n        if (firstSeries.none()) {\n            return new DataFrame<IndexT, ResultT>();\n        }\n\n        return new DataFrame<IndexT, ResultT>(() => {\n            const firstSeriesUpCast = <DataFrame<IndexT, ValueT>> firstSeries;\n            const upcast = <DataFrame<IndexT, ValueT>[]> input; // Upcast so that we can access private index, values and pairs.\n            \n            return {\n                index: <Iterable<IndexT>> firstSeriesUpCast.getContent().index,\n                values: new ZipIterable<ValueT, ResultT>(upcast.map(s => s.getContent().values), zipper),\n            };\n        });\n    }\n    \n    /**\n    * Zip (or merge) together multiple dataframes to create a new dataframe.\n    * Preserves the index of the first dataframe.\n    * \n    * @param s2, s3, s4, s4 Multiple dataframes to zip.\n    * @param zipper User-defined zipper function that merges rows. It produces rows for the new dataframe based-on rows from the input dataframes.\n    * \n    * @return Returns a single dataframe zipped (or merged) from multiple input dataframes. \n    * \n    * @example\n    * <pre>\n    * \n    * function produceNewRow (rowA, rowB) {\n    *       const outputRow = {\n    *           ValueA: rowA.Value,\n    *           ValueB: rowB.Value,\n    *       };\n    *       return outputRow;\n    * }\n    * \n    * const dfA = new DataFrame([ { Value: 10 }, { Value: 20 }, { Value: 30 }]);\n    * const dfB = new DataFrame([ { Value: 100 }, { Value: 200 }, { Value: 300 }]);\n    * const zippedDf = dfA.zip(dfB, produceNewRow);\n    * </pre>\n    */    \n    zip<Index2T, Value2T, ResultT>  (s2: IDataFrame<Index2T, Value2T>, zipper: Zip2Fn<ValueT, Value2T, ResultT> ): IDataFrame<IndexT, ResultT>;\n    zip<Index2T, Value2T, Index3T, Value3T, ResultT>  (s2: IDataFrame<Index2T, Value2T>, s3: IDataFrame<Index3T, Value3T>, zipper: Zip3Fn<ValueT, Value2T, Value3T, ResultT> ): IDataFrame<IndexT, ResultT>;\n    zip<Index2T, Value2T, Index3T, Value3T, Index4T, Value4T, ResultT>  (s2: IDataFrame<Index2T, Value2T>, s3: IDataFrame<Index3T, Value3T>, s4: IDataFrame<Index4T, Value4T>, zipper: Zip3Fn<ValueT, Value2T, Value3T, ResultT> ): IDataFrame<IndexT, ResultT>;\n    zip<ResultT>  (...args: any[]): IDataFrame<IndexT, ResultT> {\n\n        const selector: Function = args[args.length-1];\n        const input: IDataFrame<IndexT, any>[] = [this].concat(args.slice(0, args.length-1));\n        return DataFrame.zip<IndexT, any, ResultT>(input, values => selector(...values));\n    }    \n\n    /**\n     * Sorts the dataframe in ascending order by a value defined by the user-defined selector function. \n     * \n     * @param selector User-defined selector function that selects the value to sort by.\n     * \n     * @return Returns a new dataframe that has been ordered accorrding to the value chosen by the selector function. \n     * \n     * @example\n     * <pre>\n     * \n     * // Order sales by amount from least to most.\n     * const orderedDf = salesDf.orderBy(sale => sale.Amount); \n     * </pre>\n     */\n    orderBy<SortT> (selector: SelectorWithIndexFn<ValueT, SortT>): IOrderedDataFrame<IndexT, ValueT, SortT> {\n        const content = this.getContent();\n        return new OrderedDataFrame<IndexT, ValueT, SortT>({\n            columnNames: content.columnNames,\n            values: content.values, \n            pairs: content.pairs, \n            selector: selector, \n            direction: Direction.Ascending, \n            parent: null,\n        });\n    }\n\n    /**\n     * Sorts the dataframe in descending order by a value defined by the user-defined selector function. \n     * \n     * @param selector User-defined selector function that selects the value to sort by.\n     * \n     * @return Returns a new dataframe that has been ordered accorrding to the value chosen by the selector function. \n     * \n     * @example\n     * <pre>\n     * \n     * // Order sales by amount from most to least\n     * const orderedDf = salesDf.orderByDescending(sale => sale.Amount); \n     * </pre>\n     */\n    orderByDescending<SortT> (selector: SelectorWithIndexFn<ValueT, SortT>): IOrderedDataFrame<IndexT, ValueT, SortT> {\n        const content = this.getContent();\n        return new OrderedDataFrame<IndexT, ValueT, SortT>({\n            columnNames: content.columnNames,\n            values: content.values, \n            pairs: content.pairs, \n            selector: selector, \n            direction: Direction.Descending, \n            parent: null,\n        });\n    }\n        \n    /**\n     * Creates a new dataframe by merging two input dataframes.\n     * The resulting dataframe contains the union of rows from the two input dataframes.\n     * These are the unique combination of rows in both dataframe.\n     * This is basically a concatenation and then elimination of duplicates.\n     *\n     * @param other The other dataframes to merge.\n     * @param selector Optional user-defined selector function that selects the value to compare to determine distinctness.\n     * \n     * @return Returns the union of the two dataframes.\n     * \n     * @example\n     * <pre>\n     *\n     * const dfA = ...\n     * const dfB = ...\n     * const merged = dfA.union(dfB);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     *\n     * // Merge two sets of customer records that may contain the same\n     * // customer record in each set. This is basically a concatenation\n     * // of the dataframes and then an elimination of any duplicate records\n     * // that result.\n     * const customerRecordsA = ...\n     * const customerRecordsB = ...\n     * const mergedCustomerRecords = customerRecordsA.union(\n     *      customerRecordsB, \n     *      customerRecord => customerRecord.CustomerId\n     * );\n     * </pre>\n     * \n     * \n     * @example\n     * <pre>\n     *\n     * // Note that you can achieve the exact same result as the previous\n     * // example by doing a {@link DataFrame.concat) and {@link DataFrame.distinct}\n     * // of the dataframes and then an elimination of any duplicate records\n     * // that result.\n     * const customerRecordsA = ...\n     * const customerRecordsB = ...\n     * const mergedCustomerRecords = customerRecordsA\n     *      .concat(customerRecordsB)\n     *      .distinct(customerRecord => customerRecord.CustomerId);\n     * </pre>\n     * \n     */\n    union<KeyT = ValueT> (\n        other: IDataFrame<IndexT, ValueT>, \n        selector?: SelectorFn<ValueT, KeyT>): \n            IDataFrame<IndexT, ValueT> {\n\n        if (selector) {\n            if (!isFunction(selector)) throw new Error(\"Expected optional 'selector' parameter to 'DataFrame.union' to be a selector function.\");\n        }\n\n        return this.concat(other).distinct(selector);\n    }\n\n    /**\n     * Creates a new dataframe by merging two input dataframes.\n     * The resulting dataframe contains the intersection of rows from the two input dataframes.\n     * These are only the rows that appear in both dataframes.\n     *\n     * @param inner The inner dataframe to merge (the dataframe you call the function on is the 'outer' dataframe).\n     * @param outerSelector Optional user-defined selector function that selects the key from the outer dataframe that is used to match the two dataframes.\n     * @param innerSelector Optional user-defined selector function that selects the key from the inner dataframe that is used to match the two dataframes.\n     * \n     * @return Returns a new dataframe that contains the intersection of rows from the two input dataframes.\n     * \n     * @example\n     * <pre>\n     * \n     * const dfA = ...\n     * const dfB = ...\n     * const mergedDf = dfA.intersection(dfB);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     *\n     * // Merge two sets of customer records to find only the\n     * // customers that appears in both.\n     * const customerRecordsA = ...\n     * const customerRecordsB = ...\n     * const intersectionOfCustomerRecords = customerRecordsA.intersection(\n     *      customerRecordsB, \n     *      customerRecord => customerRecord.CustomerId\n     * );\n     * </pre>     \n     * */\n    intersection<InnerIndexT = IndexT, InnerValueT = ValueT, KeyT = ValueT> (\n        inner: IDataFrame<InnerIndexT, InnerValueT>, \n        outerSelector?: SelectorFn<ValueT, KeyT>,\n        innerSelector?: SelectorFn<InnerValueT, KeyT>): \n            IDataFrame<IndexT, ValueT> {\n\n        if (outerSelector) {\n            if (!isFunction(outerSelector)) throw new Error(\"Expected optional 'outerSelector' parameter to 'DataFrame.intersection' to be a function.\");\n        }\n        else {\n            outerSelector = value => <KeyT> <any> value;\n        }\n        \n        if (innerSelector) {\n            if (!isFunction(innerSelector)) throw new Error(\"Expected optional 'innerSelector' parameter to 'DataFrame.intersection' to be a function.\");\n        }\n        else {\n            innerSelector = value => <KeyT> <any> value;\n        }\n\n        const outer = this;\n        return outer.filter(outerValue => {\n                const outerKey = outerSelector!(outerValue);\n                return inner\n                    .filter(innerValue => outerKey === innerSelector!(innerValue))\n                    .any();\n            });\n    }\n\n    /**\n     * Creates a new dataframe by merging two input dataframes.\n     * The resulting dataframe contains only the rows from the 1st dataframe that don't appear in the 2nd dataframe.\n     * This is essentially subtracting the rows from the 2nd dataframe from the 1st and creating a new dataframe with the remaining rows.\n     *\n     * @param inner The inner dataframe to merge (the dataframe you call the function on is the 'outer' dataframe).\n     * @param outerSelector Optional user-defined selector function that selects the key from the outer dataframe that is used to match the two dataframes.\n     * @param innerSelector Optional user-defined selector function that selects the key from the inner dataframe that is used to match the two dataframes.\n     * \n     * @return Returns a new dataframe that contains only the rows from the 1st dataframe that don't appear in the 2nd dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * const dfA = ...\n     * const dfB = ...\n     * const remainingDf = dfA.except(dfB);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     *\n     * // Find the list of customers haven't bought anything recently.\n     * const allCustomers = ... list of all customers ...\n     * const recentCustomers = ... list of customers who have purchased recently ...\n     * const remainingCustomers = allCustomers.except(\n     *      recentCustomers, \n     *      customerRecord => customerRecord.CustomerId\n     * );\n     * </pre>\n     */\n    except<InnerIndexT = IndexT, InnerValueT = ValueT, KeyT = ValueT> (\n        inner: IDataFrame<InnerIndexT, InnerValueT>, \n        outerSelector?: SelectorFn<ValueT, KeyT>,\n        innerSelector?: SelectorFn<InnerValueT, KeyT>): \n            IDataFrame<IndexT, ValueT> {\n\n        if (outerSelector) {\n            if (!isFunction(outerSelector)) throw new Error(\"Expected optional 'outerSelector' parameter to 'DataFrame.except' to be a function.\");\n        }\n        else {\n            outerSelector = value => <KeyT> <any> value;\n        }\n\n        if (innerSelector) {\n            if (!isFunction(innerSelector)) throw new Error(\"Expected optional 'innerSelector' parameter to 'DataFrame.except' to be a function.\");\n        }\n        else {\n            innerSelector = value => <KeyT> <any> value;\n        }\n\n        const outer = this;\n        return outer.filter(outerValue => {\n                const outerKey = outerSelector!(outerValue);\n                return inner\n                    .filter(innerValue => outerKey === innerSelector!(innerValue))\n                    .none();\n            });\n    }\n\n   /**\n     * Creates a new dataframe by merging two input dataframes.\n     * The resulting dataframe contains only those rows that have matching keys in both input dataframes.\n     *\n     * @param inner The 'inner' dataframe to join (the dataframe you are callling the function on is the 'outer' dataframe).\n     * @param outerKeySelector User-defined selector function that chooses the join key from the outer dataframe.\n     * @param innerKeySelector User-defined selector function that chooses the join key from the inner dataframe.\n     * @param resultSelector User-defined function that merges outer and inner values.\n     * \n     * @return Returns the new merged dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * // Join together two sets of customers to find those\n     * // that have bought both product A and product B.\n     * const customerWhoBoughtProductA = ...\n     * const customerWhoBoughtProductB = ...\n     * const customersWhoBoughtBothProductsDf = customerWhoBoughtProductA.join(\n     *          customerWhoBoughtProductB,\n     *          customerA => customerA.CustomerId, // Join key.\n     *          customerB => customerB.CustomerId, // Join key.\n     *          (customerA, customerB) => {\n     *              return {\n     *                  // ... merge the results ...\n     *              };\n     *          }\n     *      );\n     * </pre>\n     */\n    join<KeyT, InnerIndexT, InnerValueT, ResultValueT> (\n        inner: IDataFrame<InnerIndexT, InnerValueT>, \n        outerKeySelector: SelectorFn<ValueT, KeyT>, \n        innerKeySelector: SelectorFn<InnerValueT, KeyT>, \n        resultSelector: JoinFn<ValueT, InnerValueT, ResultValueT>):\n            IDataFrame<number, ResultValueT> {\n\n        if (!isFunction(outerKeySelector)) throw new Error(\"Expected 'outerKeySelector' parameter of 'DataFrame.join' to be a selector function.\");\n        if (!isFunction(innerKeySelector)) throw new Error(\"Expected 'innerKeySelector' parameter of 'DataFrame.join' to be a selector function.\");\n        if (!isFunction(resultSelector)) throw new Error(\"Expected 'resultSelector' parameter of 'DataFrame.join' to be a selector function.\");\n\n        const outer = this;\n\n        return new DataFrame<number, ResultValueT>(() => {\n            const innerMap = inner\n                .groupBy(innerKeySelector)\n                .toObject(\n                    group => innerKeySelector(group.first()), \n                    group => group\n                );\n\n            const outerContent = outer.getContent();\n\n            const output: ResultValueT[] = [];\n            \n            for (const outerValue of outer) { //TODO: There should be an enumerator that does this.\n                const outerKey = outerKeySelector(outerValue);\n                const innerGroup = innerMap[outerKey];\n                if (innerGroup) {\n                    for (const innerValue of innerGroup) {\n                        output.push(resultSelector(outerValue, innerValue));\n                    }    \n                }\n            }\n\n            return {\n                values: output\n            };\n        });\n    }\n\n    /**\n     * Creates a new dataframe by merging two input dataframes.\n     * The resulting dataframe contains only those rows that are only present in one or the other of the dataframes, or both.\n     *\n     * @param inner The 'inner' dataframe to join (the dataframe you are callling the function on is the 'outer' dataframe).\n     * @param outerKeySelector User-defined selector function that chooses the join key from the outer dataframe.\n     * @param innerKeySelector User-defined selector function that chooses the join key from the inner dataframe.\n     * @param resultSelector User-defined function that merges outer and inner values.\n     * \n     * Implementation from here:\n     * \n     * \thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n     * \n     * @return Returns the new merged dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * // Join together two sets of customers to find those\n     * // that have bought either product A or product B, or both.\n     * const customerWhoBoughtProductA = ...\n     * const customerWhoBoughtProductB = ...\n     * const customersWhoBoughtEitherProductButNotBothDf = customerWhoBoughtProductA.joinOuter(\n     *          customerWhoBoughtProductB,\n     *          customerA => customerA.CustomerId, // Join key.\n     *          customerB => customerB.CustomerId, // Join key.\n     *          (customerA, customerB) => {\n     *              return {\n     *                  // ... merge the results ...\n     *              };\n     *          }\n     *      );\n     * </pre>\n     */\n    joinOuter<KeyT, InnerIndexT, InnerValueT, ResultValueT> (\n        inner: IDataFrame<InnerIndexT, InnerValueT>, \n        outerKeySelector: SelectorFn<ValueT, KeyT>, \n        innerKeySelector: SelectorFn<InnerValueT, KeyT>, \n        resultSelector: JoinFn<ValueT | null, InnerValueT | null, ResultValueT>):\n            IDataFrame<number, ResultValueT> {\n\n        if (!isFunction(outerKeySelector)) throw new Error(\"Expected 'outerKeySelector' parameter of 'DataFrame.joinOuter' to be a selector function.\");\n        if (!isFunction(innerKeySelector)) throw new Error(\"Expected 'innerKeySelector' parameter of 'DataFrame.joinOuter' to be a selector function.\");\n        if (!isFunction(resultSelector)) throw new Error(\"Expected 'resultSelector' parameter of 'DataFrame.joinOuter' to be a selector function.\");\n\n        // Get the results in the outer that are not in the inner.\n        const outer = this;\n        const outerResult = outer.except<InnerIndexT, InnerValueT, KeyT>(inner, outerKeySelector, innerKeySelector)\n            .select(outer => resultSelector(outer, null))\n            .resetIndex();\n\n        // Get the results in the inner that are not in the outer.\n        const innerResult = inner.except<IndexT, ValueT, KeyT>(outer, innerKeySelector, outerKeySelector)\n            .select(inner => resultSelector(null, inner))\n            .resetIndex();\n\n        // Get the intersection of results between inner and outer.\n        const intersectionResults = outer.join<KeyT, InnerIndexT, InnerValueT, ResultValueT>(inner, outerKeySelector, innerKeySelector, resultSelector);\n\n        return outerResult\n            .concat(intersectionResults)\n            .concat(innerResult)\n            .resetIndex();\n    }\n\n    /**\n     * Creates a new dataframe by merging two input dataframes.\n     * The resulting dataframe contains only those rows that present either in both dataframes or only in the outer (left) dataframe.\n     * \n     * @param inner The 'inner' dataframe to join (the dataframe you are callling the function on is the 'outer' dataframe).\n     * @param outerKeySelector User-defined selector function that chooses the join key from the outer dataframe.\n     * @param innerKeySelector User-defined selector function that chooses the join key from the inner dataframe.\n     * @param resultSelector User-defined function that merges outer and inner values.\n     * \n     * Implementation from here:\n     * \n     * \thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n     * \n     * @return Returns the new merged dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * // Join together two sets of customers to find those\n     * // that have bought either just product A or both product A and product B.\n     * const customerWhoBoughtProductA = ...\n     * const customerWhoBoughtProductB = ...\n     * const boughtJustAorAandB = customerWhoBoughtProductA.joinOuterLeft(\n     *          customerWhoBoughtProductB,\n     *          customerA => customerA.CustomerId, // Join key.\n     *          customerB => customerB.CustomerId, // Join key.\n     *          (customerA, customerB) => {\n     *              return {\n     *                  // ... merge the results ...\n     *              };\n     *          }\n     *      );\n     * </pre>\n     */\n    joinOuterLeft<KeyT, InnerIndexT, InnerValueT, ResultValueT> (\n        inner: IDataFrame<InnerIndexT, InnerValueT>, \n        outerKeySelector: SelectorFn<ValueT, KeyT>, \n        innerKeySelector: SelectorFn<InnerValueT, KeyT>, \n        resultSelector: JoinFn<ValueT | null, InnerValueT | null, ResultValueT>):\n            IDataFrame<number, ResultValueT> {\n\n        if (!isFunction(outerKeySelector)) throw new Error(\"Expected 'outerKeySelector' parameter of 'DataFrame.joinOuterLeft' to be a selector function.\");\n        if (!isFunction(innerKeySelector)) throw new Error(\"Expected 'innerKeySelector' parameter of 'DataFrame.joinOuterLeft' to be a selector function.\");\n        if (!isFunction(resultSelector)) throw new Error(\"Expected 'resultSelector' parameter of 'DataFrame.joinOuterLeft' to be a selector function.\");\n\n        // Get the results in the outer that are not in the inner.\n        const outer = this;\n        const outerResult = outer.except<InnerIndexT, InnerValueT, KeyT>(inner, outerKeySelector, innerKeySelector)\n            .select(outer => resultSelector(outer, null))\n            .resetIndex();\n\n        // Get the intersection of results between inner and outer.\n        const intersectionResults = outer.join<KeyT, InnerIndexT, InnerValueT, ResultValueT>(inner, outerKeySelector, innerKeySelector, resultSelector);\n\n        return outerResult\n            .concat(intersectionResults)\n            .resetIndex();\n    }\n\n    /**\n     * Creates a new dataframe by merging two input dataframes.\n     * The resulting dataframe contains only those rows that present either in both dataframes or only in the inner (right) dataframe.\n     *\n     * @param inner The 'inner' dataframe to join (the dataframe you are callling the function on is the 'outer' dataframe).\n     * @param outerKeySelector User-defined selector function that chooses the join key from the outer dataframe.\n     * @param innerKeySelector User-defined selector function that chooses the join key from the inner dataframe.\n     * @param resultSelector User-defined function that merges outer and inner values.\n     * \n     * Implementation from here:\n     * \n     * \thttp://blogs.geniuscode.net/RyanDHatch/?p=116\n     * \n     * @return Returns the new merged dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * // Join together two sets of customers to find those\n     * // that have bought either just product B or both product A and product B.\n     * const customerWhoBoughtProductA = ...\n     * const customerWhoBoughtProductB = ...\n     * const boughtJustAorAandB = customerWhoBoughtProductA.joinOuterRight(\n     *          customerWhoBoughtProductB,\n     *          customerA => customerA.CustomerId, // Join key.\n     *          customerB => customerB.CustomerId, // Join key.\n     *          (customerA, customerB) => {\n     *              return {\n     *                  // ... merge the results ...\n     *              };\n     *          }\n     *      );\n     * </pre>\n     */\n    joinOuterRight<KeyT, InnerIndexT, InnerValueT, ResultValueT> (\n        inner: IDataFrame<InnerIndexT, InnerValueT>, \n        outerKeySelector: SelectorFn<ValueT, KeyT>, \n        innerKeySelector: SelectorFn<InnerValueT, KeyT>, \n        resultSelector: JoinFn<ValueT | null, InnerValueT | null, ResultValueT>):\n            IDataFrame<number, ResultValueT> {\n\n        if (!isFunction(outerKeySelector)) throw new Error(\"Expected 'outerKeySelector' parameter of 'DataFrame.joinOuterRight' to be a selector function.\");\n        if (!isFunction(innerKeySelector)) throw new Error(\"Expected 'innerKeySelector' parameter of 'DataFrame.joinOuterRight' to be a selector function.\");\n        if (!isFunction(resultSelector)) throw new Error(\"Expected 'resultSelector' parameter of 'DataFrame.joinOuterRight' to be a selector function.\");\n\n        // Get the results in the inner that are not in the outer.\n        const outer = this;\n        const innerResult = inner.except<IndexT, ValueT, KeyT>(outer, innerKeySelector, outerKeySelector)\n            .select(inner => resultSelector(null, inner))\n            .resetIndex();\n\n        // Get the intersection of results between inner and outer.\n        const intersectionResults = outer.join<KeyT, InnerIndexT, InnerValueT, ResultValueT>(inner, outerKeySelector, innerKeySelector, resultSelector);\n\n        return intersectionResults\n            .concat(innerResult)\n            .resetIndex();\n    }    \n\n    /**\n     * Produces a summary of dataframe. \n     * \n     * @param spec Optional parameter that specifies which columns to aggregate and how to aggregate them. Leave this out to produce a default summary of all columns.\n     * \n     * @returns A object with fields that summary the values in the dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * const summary = df.summarize();\n     * console.log(summary);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const summary = df.summarize({ // Summarize using pre-defined functions.\n     *      Column1: Series.sum,\n     *      Column2: Series.average,\n     *      Column3: Series.count,\n     * });\n     * console.log(summary);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const summary = df.summarize({ // Summarize using custom functions.\n     *      Column1: series => series.sum(),\n     *      Column2: series => series.std(),\n     *      ColumnN: whateverFunctionYouWant,\n     * });\n     * console.log(summary);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const summary = df.summarize({ // Multiple output fields per column.\n     *      Column1: {\n     *          OutputField1: Series.sum,\n     *          OutputField2: Series.average,\n     *      },\n     *      Column2: {\n     *          OutputField3: series => series.sum(),\n     *          OutputFieldN: whateverFunctionYouWant,\n     *      },\n     * });\n     * console.log(summary);\n     * </pre>\n     */\n    summarize<OutputValueT = any> (\n        spec?: IMultiColumnAggregatorSpec\n            ): OutputValueT {\n\n        if (spec && !isObject(spec)) {\n            throw new Error(\"Expected 'spec' parameter to 'DataFrame.summarize' to be an object that specifies how to summarize the dataframe.\");\n        }\n\n        if (!spec) {\n            spec = {};\n\n            for (const columnName of this.getColumnNames()) {\n                const columnSpec: any = {};\n                columnSpec[columnName + \"_sum\"] = Series.sum;\n                columnSpec[columnName + \"_average\"] = Series.average;\n                columnSpec[columnName + \"_count\"] = Series.count;\n                spec[columnName] = columnSpec;\n\n            }\n        }\n\n        for (const inputColumnName of Object.keys(spec)) {\n            const inputSpec = spec[inputColumnName];\n            if (isFunction(inputSpec)) {\n                spec[inputColumnName] = {}; // Expand the spec.\n                (spec[inputColumnName] as IColumnAggregatorSpec) [inputColumnName] = inputSpec;\n            }\n        }\n\n        const inputColumnNames = Object.keys(spec);\n        const outputFieldsMap = toMap(\n            inputColumnNames, \n            valueColumnName => valueColumnName, \n            inputColumnName => Object.keys(spec![inputColumnName])\n        );\n\n        const output: any = {};\n        \n        for (const inputColumnName of inputColumnNames) {\n            const outputFieldNames = outputFieldsMap[inputColumnName];\n            for (const outputFieldName of outputFieldNames) {\n                const aggregatorFn = (spec[inputColumnName] as IColumnAggregatorSpec)[outputFieldName];\n                output[outputFieldName] = aggregatorFn(this.getSeries(inputColumnName));\n            }\n        }\n\n        return output;\n    }\n    \n    /**\n     * Reshape (or pivot) a dataframe based on column values.\n     * This is a powerful function that combines grouping, aggregation and sorting.\n     *\n     * @param columnOrColumns Column name whose values make the new DataFrame's columns.\n     * @param valueColumnNameOrSpec Column name or column spec that defines the columns whose values should be aggregated.\n     * @param aggregator Optional function used to aggregate pivotted vales. \n     *\n     * @return Returns a new dataframe that has been pivoted based on a particular column's values. \n     * \n     * @example\n     * <pre>\n     * \n     * // Simplest example.\n     * // Group by the values in 'PivotColumn'.\n     * // The unique set of values in 'PivotColumn' becomes the columns in the resulting dataframe.\n     * // The column 'ValueColumn' is aggregated for each group and this becomes the \n     * // values in the new output column.\n     * const pivottedDf = df.pivot(\"PivotColumn\", \"ValueColumn\", values => values.average());\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * // Multiple input column example.\n     * // Similar to the previous example except now we are aggregating multiple input columns.\n     * // Each group has the average computed for 'ValueColumnA' and the sum for 'ValueColumnB'.\n     * const pivottedDf = df.pivot(\"PivotColumn\", { \n     *      ValueColumnA: aValues => aValues.average(),\n     *      ValueColumnB:  bValues => bValues.sum(),\n     * });\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * // Multiple output column example.\n     * // Similar to the previous example except now we are doing multiple aggregations for each input column.\n     * // The example produces an output dataframe with columns OutputColumnA, B, C and D.\n     * // OutputColumnA/B are the sum and average of ValueColumnA across each group as defined by PivotColumn.\n     * // OutputColumnC/D are the sum and average of ValueColumnB across each group as defined by PivotColumn.\n     * const pivottedDf = df.pivot(\"PivotColumn\", { \n     *      ValueColumnA: {\n     *          OutputColumnA: aValues => aValues.sum(),\n     *          OutputColumnB: aValues => aValues.average(),\n     *      },\n     *      ValueColumnB: {\n     *          OutputColumnC: bValues => bValues.sum(),\n     *          OutputColumnD: bValues => bValues.average(),\n     *      },\n     * });\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * // Full multi-column example.\n     * // Similar to the previous example now we are pivotting on multiple columns.\n     * // We now group by the 'PivotColumnA' and then by 'PivotColumnB', effectively creating a \n     * // multi-level group.\n     * const pivottedDf = df.pivot([\"PivotColumnA\", \"PivotColumnB\" ], { \n     *      ValueColumnA: aValues => aValues.average(),\n     *      ValueColumnB:  bValues => bValues.sum(),\n     * });\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * // To help understand the pivot function, let's look at what it does internally.\n     * // Take the simplest example:\n     * const pivottedDf = df.pivot(\"PivotColumn\", \"ValueColumn\", values => values.average());\n     * \n     * // If we expand out the internals of the pivot function, it will look something like this:\n     * const pivottedDf = df.groupBy(row => row.PivotColumn)\n     *          .select(group => ({\n     *              PivotColumn: group.deflate(row => row.ValueColumn).average()\n     *          }))\n     *          .orderBy(row  => row.PivotColumn);\n     * \n     * // You can see that pivoting a dataframe is the same as grouping, aggregating and sorting it.\n     * // Does pivoting seem simpler now?\n     * \n     * // It gets more complicated than that of course, because the pivot function supports multi-level nested \n     * // grouping and aggregation of multiple columns. So a full expansion of the pivot function is rather complex.\n     * </pre>\n     */\n    pivot<NewValueT = ValueT> (\n        columnOrColumns: string | Iterable<string>, \n        valueColumnNameOrSpec: string | IMultiColumnAggregatorSpec, \n        aggregator?: (values: ISeries<number, any>) => any\n            ): IDataFrame<number, NewValueT> {\n\n        let columnNames: string[];\n\n        if (isString(columnOrColumns)) {\n            columnNames = [columnOrColumns];\n        }\n        else {\n            if (!isArray(columnOrColumns)) throw new Error(\"Expected 'columnOrColumns' parameter to 'DataFrame.pivot' to be a string or an array of strings that identifies the column(s) whose values make the new DataFrame's columns.\");\n\n            columnNames = Array.from(columnOrColumns);\n\n            if (columnNames.length === 0) throw new Error(\"Expected 'columnOrColumns' parameter to 'DataFrame.pivot' to contain at least one string.\");\n\n            for (const columnName of columnNames) {\n                if (!isString(columnName)) throw new Error(\"Expected 'columnOrColumns' parameter to 'DataFrame.pivot' to be an array of strings, each string identifies a column in the DataFrame on which to pivot.\");\n            }\n        }\n\n        let aggSpec: IMultiColumnAggregatorSpec;\n\n        if (!isObject(valueColumnNameOrSpec)) {\n            if (!isString(valueColumnNameOrSpec)) throw new Error(\"Expected 'value' parameter to 'DataFrame.pivot' to be a string that identifies the column whose values to aggregate or a column spec that defines which column contains the value ot aggregate and the ways to aggregate that value.\");\n            if (!isFunction(aggregator)) throw new Error(\"Expected 'aggregator' parameter to 'DataFrame.pivot' to be a function to aggregate pivoted values.\");\n\n            const aggColumnName = valueColumnNameOrSpec as string;\n\n            const outputSpec: IColumnAggregatorSpec = {};\n            outputSpec[aggColumnName] = aggregator!;\n\n            aggSpec = {};\n            aggSpec[aggColumnName] = outputSpec;\n        }\n        else {\n            aggSpec = valueColumnNameOrSpec as IMultiColumnAggregatorSpec;\n\n            for (const inputColumnName of Object.keys(aggSpec)) {\n                const columnAggSpec = aggSpec[inputColumnName];\n                if (isFunction(columnAggSpec)) {\n                    aggSpec[inputColumnName] = {}; // Expand the pivot spec.\n                    (aggSpec[inputColumnName] as IColumnAggregatorSpec) [inputColumnName] = columnAggSpec;\n                }\n            }\n        }\n\n        const firstColumnName = columnNames[0];\n        let working = this.groupBy((row: any) => row[firstColumnName])\n            .select(group => {\n                const output: any = {};\n                output[firstColumnName] = (group.first() as any)[firstColumnName];\n                output.src = group;\n                return output;\n            });\n\n        for (let columnNameIndex = 1; columnNameIndex < columnNames.length; ++columnNameIndex) {\n            const nextColumnName = columnNames[columnNameIndex];\n            working = working.selectMany(parentGroup => {\n                    const src: IDataFrame<IndexT, ValueT> = parentGroup.src;\n                    return src.groupBy((row: any) => row[nextColumnName])\n                        .select(subGroup => {\n                            const output = Object.assign({}, parentGroup);\n                            output[nextColumnName] = (subGroup.first() as any)[nextColumnName];\n                            output.src = subGroup;\n                            return output;\n                        });\n                });\n        }\n\n        const valueColumnNames = Object.keys(aggSpec);\n        const outputColumnsMap = toMap(\n            valueColumnNames, \n            valueColumnName => valueColumnName, \n            valueColumnName => Object.keys(aggSpec[valueColumnName])\n        );\n        \n        const pivotted = working.inflate<NewValueT>((row: any) => {\n            for (const valueColumnName of valueColumnNames) {\n                const outputColumnNames = outputColumnsMap[valueColumnName];\n                for (const outputColumName of outputColumnNames) {\n                    const aggregatorFn = (aggSpec[valueColumnName] as IColumnAggregatorSpec)[outputColumName];\n                    row[outputColumName] = aggregatorFn(row.src.deflate((srcRow: any) => srcRow[valueColumnName])) \n                }\n            }\n\n            delete row.src;\n            return row;\n        });\n\n        let ordered = pivotted.orderBy((row: any) => row[firstColumnName]);\n        for (let columnNameIndex = 1; columnNameIndex < columnNames.length; ++columnNameIndex) {\n            const nextColumnName = columnNames[columnNameIndex];\n            ordered = ordered.thenBy((row: any) => row[nextColumnName]);\n        }\n\n        return ordered;\n    }\n\n    /**\n     * Unpivot a DataFrame from wide to long format, optionally leaving identifiers set.\n     * This is a powerful function that combines grouping, aggregation and sorting.\n     *\n     * @param idColumnOrColumns Column(s) to use as identifier variables.\n     * @param valueColumnOrColumns Column(s) to unpivot.\n     *\n     * @return Returns a new dataframe that has been unpivoted based on a particular column's values. \n     * \n     * @example\n     * <pre>\n     * \n     * // Use column in 'idColumnOrColumns' as the identity column.\n     * // The column name passed in 'valueColumnOrColumns' forms the 'variable' column\n     * // and the values are used to populate the 'value' column of the new dataframe.\n     * const moltenDf = df.melt(\"A\", \"B\");\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * // Multiple value columns example.\n     * // Similar to the previous example except now the variable column will constitute\n     * // of multiple values.\n     * const moltenDf = df.melt(\"A\", [\"B\", \"C\"]);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * // Multiple identity and value columns example.\n     * const moltenDf = df.melt([\"A\", \"B\"], [\"C\", \"D\"]);\n     * </pre>\n     */\n    melt<ValueT> (\n        idColumnOrColumns: string | Iterable<string>,\n        valueColumnOrColumns: string | Iterable<string>\n    ): IDataFrame<IndexT, ValueT> {\n        let idColumnNames: string[];\n        let valueColumnNames: string[];\n\n        if (isString(idColumnOrColumns)) {\n            idColumnNames = [idColumnOrColumns];\n        }\n        else {\n            if (!isArray(idColumnOrColumns)) throw new Error(\"Expected 'idColumnOrColumns' parameter to 'DataFrame.melt' to be a string or an array of strings that identifies the column(s) whose values make the new DataFrame's identity columns.\");\n\n            idColumnNames = Array.from(idColumnOrColumns);\n\n            for (const columnName of idColumnNames) {\n                if (!isString(columnName)) throw new Error(\"Expected 'idColumnOrColumns' parameter to 'DataFrame.melt' to be a string or an array of strings that identifies the column(s) whose values make the new DataFrame's identity columns.\");\n            }\n        }\n\n        if (isString(valueColumnOrColumns)) {\n            valueColumnNames = [valueColumnOrColumns];\n        }\n        else {\n            if (!isArray(valueColumnOrColumns)) throw new Error(\"Expected 'valueColumnOrColumns' parameter to 'DataFrame.melt' to be a string or an array of strings that identifies the column(s) whose molten values make the new DataFrame's 'variable' and 'value' columns.\");\n\n            valueColumnNames = Array.from(valueColumnOrColumns);\n\n            for (const columnName of valueColumnNames) {\n                if (!isString(columnName)) throw new Error(\"Expected 'valueColumnOrColumns' parameter to 'DataFrame.melt' to be a string or an array of strings that identifies the column(s) whose molten values make the new DataFrame's 'variable' and 'value' columns.\");\n            }\n        }\n\n        const K: number = valueColumnNames.length;\n        const N: number = this.count();\n        let mdata: IDataFrame<IndexT, any> = new DataFrame<IndexT, ValueT>();\n        let original: IDataFrame<IndexT, any> = this.subset(idColumnNames.concat(valueColumnNames));\n\n        for (const col of idColumnNames){\n            original = original.dropSeries(col);\n\n            const idData = this.getSeries(col);\n            const columnData = new TileIterable(idData, K);\n            const columnSeries: ISeries<IndexT, ValueT> = new Series(columnData);\n\n            mdata = mdata.withSeries(col, columnSeries);\n        }\n\n        const seriesArray = [];\n\n        for (const col of original.getColumns()) {\n            seriesArray.push(this.getSeries(col.name));\n        }\n\n        const columnData = new RavelIterable(seriesArray);\n        const columnSeries: ISeries<IndexT, ValueT> = new Series(columnData);\n\n        mdata = mdata.withSeries('value', columnSeries);\n\n        const valueColumnData = new RepeatIterable(valueColumnNames, N);\n        const valueColumnSeries: ISeries<IndexT, ValueT> = new Series(valueColumnData);\n\n        mdata = mdata.withSeries('variable', valueColumnSeries);\n\n        return mdata;\n    }\n    \n    /**\n     * Insert a pair at the start of the dataframe.\n     * Doesn't modify the original dataframe! The returned dataframe is entirely new and contains rows from the original dataframe plus the inserted pair.\n     *\n     * @param pair The pair to insert.\n     * \n     * @return Returns a new dataframe with the specified pair inserted.\n     * \n     * @example\n     * <pre>\n     * \n     * const newIndex = ... index of the new row ...\n     * const newRow = ... the new data row to insert ...\n     * const insertedDf = df.insertPair([newIndex, newRows]);\n     * </pre>\n     */\n    insertPair (pair: [IndexT, ValueT]): IDataFrame<IndexT, ValueT> {\n        if (!isArray(pair)) throw new Error(\"Expected 'pair' parameter to 'DataFrame.insertPair' to be an array.\");\n        if (pair.length !== 2) throw new Error(\"Expected 'pair' parameter to 'DataFrame.insertPair' to be an array with two elements. The first element is the index, the second is the value.\");\n\n        return (new DataFrame<IndexT, ValueT>({ pairs: [pair] })).concat(this);\n    }\n\n    /**\n     * Append a pair to the end of a dataframe.\n     * Doesn't modify the original dataframe! The returned dataframe is entirely new and contains rows from the original dataframe plus the appended pair.\n     *\n     * @param pair - The pair to append.\n     *  \n     * @return Returns a new dataframe with the specified pair appended.\n     * \n     * @example\n     * <pre>\n     * \n     * const newIndex = ... index of the new row ...\n     * const newRow = ... the new data row to append ...\n     * const appendedDf = df.appendPair([newIndex, newRows]);\n     * </pre>\n     */\n    appendPair (pair: [IndexT, ValueT]): IDataFrame<IndexT, ValueT> {\n        if (!isArray(pair)) throw new Error(\"Expected 'pair' parameter to 'DataFrame.appendPair' to be an array.\");\n        if (pair.length !== 2) throw new Error(\"Expected 'pair' parameter to 'DataFrame.appendPair' to be an array with two elements. The first element is the index, the second is the value.\");\n\n        return this.concat(new DataFrame<IndexT, ValueT>({ pairs: [pair] }));\n    }\n\n    /**\n     * Removes rows from the dataframe by index.\n     */\n    remove(index: IndexT): IDataFrame<IndexT, ValueT> {\n\n        return new DataFrame<IndexT, ValueT>(() => {\n            const content = this.getContent();\n            return {\n                columnNames: content.columnNames,\n                pairs: new WhereIterable(content.pairs, pair => pair[0] !== index),\n            };\n        });\n    }\n\n    /**\n     * Fill gaps in a dataframe.\n     *\n     * @param comparer User-defined comparer function that is passed pairA and pairB, two consecutive rows, return truthy if there is a gap between the rows, or falsey if there is no gap.\n     * @param generator User-defined generator function that is passed pairA and pairB, two consecutive rows, returns an array of pairs that fills the gap between the rows.\n     *\n     * @return Returns a new dataframe with gaps filled in.\n     * \n     * @example\n     * <pre>\n     * \n     *   var sequenceWithGaps = ...\n     *\n     *  // Predicate that determines if there is a gap.\n     *  var gapExists = (pairA, pairB) => {\n     *      // Returns true if there is a gap.\n     *      return true;\n     *  };\n     *\n     *  // Generator function that produces new rows to fill the game.\n     *  var gapFiller = (pairA, pairB) => {\n     *      // Create an array of index, value pairs that fill the gaps between pairA and pairB.\n     *      return [\n     *          newPair1,\n     *          newPair2,\n     *          newPair3,\n     *      ];\n     *  };\n     *\n     *  var sequenceWithoutGaps = sequenceWithGaps.fillGaps(gapExists, gapFiller);\n     * </pre>\n     */\n    fillGaps (comparer: ComparerFn<[IndexT, ValueT], [IndexT, ValueT]>, generator: GapFillFn<[IndexT, ValueT], [IndexT, ValueT]>): IDataFrame<IndexT, ValueT> {\n        if (!isFunction(comparer)) throw new Error(\"Expected 'comparer' parameter to 'DataFrame.fillGaps' to be a comparer function that compares two values and returns a boolean.\")\n        if (!isFunction(generator)) throw new Error(\"Expected 'generator' parameter to 'DataFrame.fillGaps' to be a generator function that takes two values and returns an array of generated pairs to span the gap.\")\n\n        return this.rollingWindow(2)\n            .selectMany(window => {\n                const pairs = window.toPairs();\n                const pairA = pairs[0];\n                const pairB = pairs[1];\n                if (!comparer(pairA, pairB)) {\n                    return [pairA];\n                }\n\n                const generatedRows = generator(pairA, pairB);\n                if (!isArray(generatedRows)) throw new Error(\"Expected return from 'generator' parameter to 'DataFrame.fillGaps' to be an array of pairs, instead got a \" + typeof(generatedRows));\n\n                return [pairA].concat(generatedRows);\n            })\n            .withIndex(pair => pair[0])\n            .inflate(pair => pair[1])\n            .concat(this.tail(1));\n            \n    }\n\n    /**\n     * Returns the specified default dataframe if the dataframe is empty. \n     *\n     * @param defaultDataFrame Default dataframe to return if the dataframe is empty.\n     * \n     * @return Returns 'defaultDataFrame' if the dataframe is empty. \n     * \n     * @example\n     * <pre>\n     * \n     * const emptyDataFrame = new DataFrame();\n     * const defaultDataFrame = new DataFrame([ { A: 1 }, { A: 2 }, { A: 3 } ]);\n     * expect(emptyDataFrame.defaultIfEmpty(defaultDataFrame)).to.eql(defaultDataFrame);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const nonEmptyDataFrame = new DataFrame([ { A: 100 }]);\n     * const defaultDataFrame = new DataFrame([ { A: 1 }, { A: 2 }, { A: 3 } ]);\n     * expect(nonEmptyDataFrame.defaultIfEmpty(defaultDataFrame)).to.eql(nonEmptyDataFrame);\n     * </pre>\n     */\n    defaultIfEmpty (defaultDataFrame: ValueT[] | IDataFrame<IndexT, ValueT>): IDataFrame<IndexT, ValueT> {\n\n        if (this.none()) {\n            if (defaultDataFrame instanceof DataFrame) {\n                return <IDataFrame<IndexT, ValueT>> defaultDataFrame;\n            }\n            else if (isArray(defaultDataFrame)) {\n                return new DataFrame<IndexT, ValueT>(defaultDataFrame);\n            }\n            else {\n                throw new Error(\"Expected 'defaultSequence' parameter to 'DataFrame.defaultIfEmpty' to be an array or a series.\");\n            }\n        } \n        else {\n            return this;\n        }\n    }\n\n    /**\n     * Detect the the frequency of the types of the values in the dataframe.\n     * This is a good way to understand the shape of your data.\n     *\n     * @return Returns a dataframe with rows that confirm to {@link ITypeFrequency} that describes the data types contained in the original dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * const df = dataForge.readFileSync(\"./my-data.json\").parseJSON();\n     * const dataTypes = df.detectTypes();\n     * console.log(dataTypes.toString());\n     * </pre>\n     */\n    detectTypes (): IDataFrame<number, ITypeFrequency> {\n        return new DataFrame<number, ITypeFrequency>(() => {\n            const typeFrequencies = this.getColumns()\n                .selectMany(column => {\n                    return column.series.detectTypes()\n                        .select((typeFrequency: any) => {\n                            const output = Object.assign({}, typeFrequency);\n                            output.Column = column.name;\n                            return output;\n                        });\n                });\n            return {\n                columnNames: [\"Type\", \"Frequency\", \"Column\"],\n                values: typeFrequencies,\n            };\n        });\n    }\n    \n    /**\n     * Detect the frequency of the values in the dataframe.\n     * This is a good way to understand the shape of your data.\n     *\n     * @return Returns a dataframe with rows that conform to {@link IValueFrequency} that describes the values contained in the dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * const df = dataForge.readFileSync(\"./my-data.json\").parseJSON();\n     * const dataValues = df.detectedValues();\n     * console.log(dataValues.toString());\n     * </pre>\n     */\n    detectValues (): IDataFrame<number, IValueFrequency> {\n        return new DataFrame<number, IValueFrequency>(() => {\n            const valueFrequencies = this.getColumns()\n                .selectMany(column => {\n                    return column.series.detectValues()\n                        .select((valueFrequency: any) => {\n                            const output = Object.assign({}, valueFrequency);\n                            output.Column = column.name;\n                            return output;\n                        });\n                });\n            return {\n                columnNames: [\"Value\", \"Frequency\", \"Column\"],\n                values: valueFrequencies,\n            };\n        });\n    }\n\n    /**\n     * Serialize the dataframe to the JSON data format.\n     * \n     * @return Returns a string in the JSON data format that represents the dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * const jsonData = df.toJSON();\n     * console.log(jsonData);\n     * </pre>\n     */\n    toJSON (): string {\n        return JSON.stringify(this.toArray(), null, 4);\n    }\n\n    /**\n     * Serialize the dataframe to the JSON5 data format.\n     * \n     * @return Returns a string in the JSON5 data format that represents the dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * const jsonData = df.toJSON5();\n     * console.log(jsonData);\n     * </pre>\n     */\n    toJSON5 (): string {\n        return JSON5.stringify(this.toArray(), null, 4);\n    }\n\n    /**\n     * Serialize the dataframe to the CSV data format.\n     * \n     * @param options Options for CSV output. The options object is passed directly to [PapaParse.unparse](https://www.papaparse.com/docs#unparse), please see [PapaParse docs for additional options](https://www.papaparse.com/docs#unparse-config-default).\n     * \n     * @return Returns a string in the CSV data format that represents the dataframe.\n     * \n     * @example\n     * <pre>\n     * \n     * const csvData = df.toCSV();\n     * console.log(csvData);\n     * </pre>\n     * \n     * @example\n     * <pre>\n     * \n     * const csvData = df.toCSV({ header: false });\n     * console.log(csvData);\n     * </pre>\n     */\n    toCSV (options?: ICSVOutputOptions): string {\n        const headerLine = options === undefined || options.header === undefined || options.header\n            ? [this.getColumnNames()]\n            : []\n            ;\n        const rows = headerLine.concat(this.toRows());\n        return PapaParse.unparse(rows, options);\n    }\n\n    /**\n     * Serialize the dataframe to HTML.\n     * \n     * @return Returns a string in HTML format that represents the dataframe.\n     */\n    toHTML (): string {\n\n        const columNames = this.getColumnNames();\n        const header = columNames.map(columnName => \"            <th>\" + columnName + \"</th>\").join(\"\\n\");\n        const pairs = this.toPairs();\n\n        return '<table border=\"1\" class=\"dataframe\">\\n' + \n            '    <thead>\\n' +\n            '        <tr style=\"text-align: right;\">\\n' +\n            '            <th></th>\\n' +\n\n            header +\n\n            '\\n' +\n            '       </tr>\\n' +\n            '    </thead>\\n' +\n            '    <tbody>\\n' +\n\n            pairs.map(pair => {\n                const index = pair[0];\n                const value: any = pair[1];\n                return '        <tr>\\n' +\n                    '            <th>' + index + '</th>\\n' +\n                    columNames.map(columName => {\n                            return '            <td>' + value[columName] + '</td>';\n                        })\n                        .join('\\n') +\n                        '\\n' +\n                        '        </tr>';\n                })\n                .join('\\n') +\n\n            '\\n' +\n            '    </tbody>\\n' +\n            '</table>';\n    }    \n\n    /**\n     * Serialize the dataframe to an ordinary JavaScript data structure.\n     * The resulting data structure is suitable for further serialization to JSON and can be used to \n     * transmit a DataFrame and its internal structure over the wire.\n     * Use the {@link deserialize} function to later reconstitute the serialized dataframe.\n     * \n     * @return Returns a JavaScript data structure conforming to {@link ISerializedDataFrame} that represents the dataframe and its internal structure.\n     * \n     * @example\n     * <pre>\n     * \n     * const jsDataStructure = df.serialize();\n     * const jsonData = JSON.stringify(jsDataStructure);\n     * console.log(jsonData);\n     * const deserializedJsDataStructure = JSON.parse(jsonData);\n     * const deserializedDf = DataFrame.deserialize(deserializedJsDataStructure); // Reconsituted.\n     * </pre>\n     */\n    serialize (): ISerializedDataFrame {\n        let rows = this.toArray(); // Bake the dataframe to an array.\n        const index = this.getIndex(); // Extract the index.\n        let indexValues = index.head(rows.length).toArray() as any[];\n        const columns = this.getColumns();\n        const serializedColumns = toMap(columns, column => column.name, column => column.type);\n        const indexType = index.getType();\n        \n        if (indexType === \"date\") {\n            indexValues = indexValues.map(index => moment(index).toISOString()); // Manually serialize date value, they aren't supported directly by JSON.\n        }\n\n        let cloned = false;\n\n        // Serialize date values.\n        for (const column of columns) {\n            if (column.type === \"date\") {\n                if (!cloned) {\n                    rows = rows.map(row => Object.assign({}, row)); // Clone so we don't modify any original data.\n                    cloned = true;\n                }\n\n                for (const row of rows) {\n                    (row as any)[column.name] = moment((row as any)[column.name]).toISOString(); // Manually serialize date value.\n                }\n            }\n        }\n        \n        return {\n            columnOrder: this.getColumnNames(),\n            columns: serializedColumns,\n            index: {\n                type: indexType,\n                values: indexValues,\n            },\n            values: rows,\n        };\n    }\n\n    /**\n     * Deserialize the dataframe from an ordinary JavaScript data structure.\n     * Can reconstitute a dataframe that previously serialized with the {@link serialize} function.\n     * This can rebuilds the dataframe with the exact same internal structure after it has been transmitted over the wire.\n     * \n     * @param input The serialize JavaScript data structure for the dataframe.\n     * \n     * @return Returns the deserialized/reconstituted dataframe.    \n     * \n     * @example\n     * <pre>\n     * \n     * const jsDataStructure = df.serialize();\n     * const jsonData = JSON.stringify(jsDataStructure);\n     * console.log(jsonData);\n     * const deserializedJsDataStructure = JSON.parse(jsonData);\n     * const deserializedDf = DataFrame.deserialize(deserializedJsDataStructure); // Reconsituted.\n     * </pre>\n     */\n    static deserialize<IndexT = any,  ValueT = any> (input: ISerializedDataFrame): IDataFrame<IndexT, ValueT> {\n\n        let indexValues = input.index && input.index.values || [];\n        let rows = input.values && input.values || [];\n        let cloned = false;\n\n        // Deserialize dates.\n        if (input.columns) {\n            for (const columnName of Object.keys(input.columns)) {\n                if (input.columns[columnName] !== \"date\") {\n                    continue; // No need to process other types, they are natively supported by JSON.\n                }\n\n                if (!cloned) {\n                    rows = rows.map(row => Object.assign({}, row)); // Clone so we don't modify any original data.\n                    cloned = true;\n                }\n    \n                for (const row of rows) {\n                    row[columnName] = moment(row[columnName]).toDate(); // Manually deserialize data value.\n                }\n            }\n        }\n\n        if (input.index && input.index.type === \"date\") {\n            indexValues = indexValues.map(value => moment(value).toDate()); // Manually deserialize data value.\n        }\n\n        return new DataFrame<IndexT, ValueT>({\n            columnNames: input.columnOrder || [],\n            index: indexValues,\n            values: rows,\n        });\n    }\n\n    /***\n     * Allows the dataframe to be queried to confirm that it is actually a dataframe.\n     * Used from JavaScript to tell the difference between a Series and a DataFrame.\n     * \n     * @return Returns the string \"dataframe\".\n     */\n    getTypeCode (): string {\n        return \"dataframe\";\n    }\n}\n\n/**\n * @hidden\n * The configuration for an ordered dataframe.\n */\ninterface IOrderedDataFrameConfig<IndexT, ValueT, SortT> {\n    //\n    // The order of columns for the data frame.\n    //\n    columnNames: string[] | Iterable<string>;\n\n    //\n    // The source values for the ordered dataframe.\n    //\n    values: Iterable<ValueT>;\n\n    //\n    // The source pairs (index,value) for the ordered dataframe.\n    //\n    pairs: Iterable<[IndexT, ValueT]>;\n\n    //\n    // The selector used to get the sorting key for the orderby operation.\n    //\n    selector: SelectorWithIndexFn<ValueT, SortT>;\n\n    //\n    // The sort direction, ascending or descending.\n    //\n    direction: Direction;\n\n    //\n    // The parent dataframe in the orderby operation or null if none.\n    //\n    parent: OrderedDataFrame<IndexT, ValueT, any> | null;\n}\n\n/**\n * @hidden\n * Represents a dataframe that has been sorted.\n */\nclass OrderedDataFrame<IndexT = number, ValueT = any, SortT = any> \n    extends DataFrame<IndexT, ValueT>\n    implements IOrderedDataFrame<IndexT, ValueT, SortT> {\n\n    //\n    // Configuration for the ordered dataframe.\n    //\n    private config: IOrderedDataFrameConfig<IndexT, ValueT, SortT>;\n\n    //\n    // Helper function to create a sort spec.\n    //\n    private static makeSortSpec (sortLevel: number, selector: SortSelectorFn, direction: Direction): ISortSpec {\n        return { sortLevel: sortLevel, selector: selector, direction: direction };\n    }\n\n    //\n    // Helper function to make a sort selector for pairs, this captures the parent correct when generating the closure.\n    //\n    private static makePairsSelector (selector: SortSelectorFn): SortSelectorFn {\n        return (pair: any, index: number) => selector(pair[1], index);\n    }\n\n    constructor(config: IOrderedDataFrameConfig<IndexT, ValueT, SortT>) {\n\n        const valueSortSpecs: ISortSpec[] = [];\n        const pairSortSpecs: ISortSpec[] = [];\n        let sortLevel = 0;\n\n        let parent = config.parent;\n        const parents = [];\n        while (parent !== null) {\n            parents.push(parent);\n            parent = parent.config.parent;\n        }\n\n        parents.reverse();\n\n        for (const parent of parents) {\n            const parentConfig = parent.config;\n            valueSortSpecs.push(OrderedDataFrame.makeSortSpec(sortLevel, parentConfig.selector, parentConfig.direction));\n            pairSortSpecs.push(OrderedDataFrame.makeSortSpec(sortLevel, OrderedDataFrame.makePairsSelector(parentConfig.selector), parentConfig.direction));\n            ++sortLevel;\n        }\n\n        valueSortSpecs.push(OrderedDataFrame.makeSortSpec(sortLevel, config.selector, config.direction));\n        pairSortSpecs.push(OrderedDataFrame.makeSortSpec(sortLevel, OrderedDataFrame.makePairsSelector(config.selector), config.direction));\n\n        super({\n            columnNames: config.columnNames,\n            values: new OrderedIterable(config.values, valueSortSpecs),\n            pairs: new OrderedIterable(config.pairs, pairSortSpecs)\n        });\n\n        this.config = config;\n    }\n\n    /** \n     * Applys additional sorting (ascending) to an already sorted dataframe.\n     * \n     * @param selector User-defined selector that selects the additional value to sort by.\n     * \n     * @return Returns a new dataframe has been additionally sorted by the value chosen by the selector function. \n     * \n     * @example\n     * <pre>\n     * \n     * // Order sales by salesperson and then by amount (from least to most).\n     * const orderedDf = salesDf.orderBy(sale => sale.SalesPerson).thenBy(sale => sale.Amount);\n     * </pre>\n     */\n    thenBy<SortT> (selector: SelectorWithIndexFn<ValueT, SortT>): IOrderedDataFrame<IndexT, ValueT, SortT> {\n        return new OrderedDataFrame<IndexT, ValueT, SortT>({\n            columnNames: this.config.columnNames,\n            values: this.config.values, \n            pairs: this.config.pairs, \n            selector: selector, \n            direction: Direction.Ascending, \n            parent: this,\n        });\n    }\n\n    /** \n     * Applys additional sorting (descending) to an already sorted dataframe.\n     * \n     * @param selector User-defined selector that selects the additional value to sort by.\n     * \n     * @return Returns a new dataframe has been additionally sorted by the value chosen by the selector function. \n     * \n     * @example\n     * <pre>\n     * \n     * // Order sales by salesperson and then by amount (from most to least).\n     * const orderedDf = salesDf.orderBy(sale => sale.SalesPerson).thenByDescending(sale => sale.Amount);\n     * </pre>\n     */\n    thenByDescending<SortT> (selector: SelectorWithIndexFn<ValueT, SortT>): IOrderedDataFrame<IndexT, ValueT, SortT> {\n        return new OrderedDataFrame<IndexT, ValueT, SortT>({\n            columnNames: this.config.columnNames,\n            values: this.config.values, \n            pairs: this.config.pairs, \n            selector: selector, \n            direction: Direction.Descending, \n            parent: this,\n        });\n    }\n}\n","export { Index, IIndex } from './lib/index';\nexport { Series, ISeries, SelectorWithIndexFn } from './lib/series';\nexport { DataFrame, IDataFrame } from './lib/dataframe';\nimport { ArrayIterable } from './lib/iterables/array-iterable';\nimport { CsvRowsIterable } from './lib/iterables/csv-rows-iterable';\nimport { Series, ISeries } from '.';\nimport { DataFrame, IDataFrame } from '.';\nimport { isString, isObject, isArray, isNumber } from './lib/utils';\nimport { isFunction } from 'util';\nimport JSON5 from 'json5';\n// @ts-ignore\nimport moment from \"dayjs\";\n// @ts-ignore\nimport customParseFormat from 'dayjs/plugin/customParseFormat';\nmoment.extend(customParseFormat);\n\n// @ts-ignore\nimport PapaParse from 'papaparse';\n\n/**\n * Represents a field from a JavaScript object.\n */\nexport interface IFieldRecord {\n    /**\n     * The name of the field.\n     */\n    Field: string;\n\n    /**\n     * The value of the field.\n     */\n    Value: any;\n}\n\n/**\n * Convert a regular JavaScript obejct to a dataframe.\n * Each row in the dataframe represents a field from the object.\n * \n * @param obj - The JavaScript object to convert to a dataframe.\n * \n * @returns Returns a dataframe that lists the fields in the pass-in object.\n */\nexport function fromObject (obj: any): IDataFrame<number, IFieldRecord> {\n    return new DataFrame<number, IFieldRecord>(\n        Object.keys(obj)\n            .map(fieldName => ({\n                Field: fieldName,\n                Value: obj[fieldName],\n            }))\n    );\n}\n\n/**\n * Deserialize a dataframe from a JSON text string.\n *\n * @param jsonTextString The JSON text to deserialize.\n * \n * @returns Returns a dataframe that has been deserialized from the JSON data.\n */\nexport function fromJSON (jsonTextString: string): IDataFrame<number, any> {\n    \n    if (!isString(jsonTextString)) throw new Error(\"Expected 'jsonTextString' parameter to 'dataForge.fromJSON' to be a string containing data encoded in the JSON format.\");\n\n    return new DataFrame<number, any>({\n        values: JSON.parse(jsonTextString)\n    });\n}\n\n/**\n * Deserialize a dataframe from a JSON5 text string.\n *\n * @param jsonTextString The JSON5 text to deserialize.\n * \n * @returns Returns a dataframe that has been deserialized from the JSON data.\n */\nexport function fromJSON5 (jsonTextString: string): IDataFrame<number, any> {\n    \n    if (!isString(jsonTextString)) throw new Error(\"Expected 'jsonTextString' parameter to 'dataForge.fromJSON5' to be a string containing data encoded in the JSON5 format.\");\n\n    return new DataFrame<number, any>({\n        values: JSON5.parse(jsonTextString)\n    });\n}\n\n/**\n * Options for parsing CSV data.\n */\nexport interface ICSVOptions {\n    /**\n     * Optionally specifies the column names (when enabled, assumes that the header row is not read from the CSV data).\n     * Default: undefined\n     */\n    columnNames?: Iterable<string>;\n\n    /**\n     * Automatically pick types based on what the value looks like.\n     * Default: false.\n     */\n    dynamicTyping?: boolean;\n\n    /**\n     * Skip empty lines in the input.\n     * Default: true\n     */\n    skipEmptyLines?: boolean;\n}\n\n/**\n * Deserialize a DataFrame from a CSV text string.\n *\n * @param csvTextString The CSV text to deserialize.\n * @param config Optional configuration options for parsing the CSV data. \n * The config object is passed directly to [PapaParse.parse](https://www.papaparse.com/docs#strings), please see [PapaParse docs for additional options](https://www.papaparse.com/docs#config).\n * \n * @returns Returns a dataframe that has been deserialized from the CSV data.\n */\nexport function fromCSV (csvTextString: string, config?: ICSVOptions) {\n    if (!isString(csvTextString)) throw new Error(\"Expected 'csvTextString' parameter to 'dataForge.fromCSV' to be a string containing data encoded in the CSV format.\");\n\n    if (config) {\n        if (!isObject(config)) throw new Error(\"Expected 'config' parameter to 'dataForge.fromCSV' to be an object with CSV parsing configuration options.\");\n\n        if (config.columnNames) {\n            if (!isFunction(config.columnNames[Symbol.iterator])) {\n                if (!isArray(config.columnNames)) throw new Error(\"Expect 'columnNames' field of 'config' parameter to DataForge.fromCSV to be an array or iterable of strings that specifies column names.\")\n            }\n\n\n            for (const columnName of config.columnNames) {\n                if (!isString(columnName)) throw new Error(\"Expect 'columnNames' field of 'config' parameter to DataForge.fromCSV to be an array of strings that specify column names.\")\n            }\n        }\n        \n        if (config.skipEmptyLines === undefined) {\n            config = Object.assign({}, config); // Clone the config. Don't want to modify the original.\n            config.skipEmptyLines = true;\n        }\n    }\n    else {\n        config = {\n            skipEmptyLines: true,\n        }\n    }\n\n    const parsed = PapaParse.parse(csvTextString, config as any);\n    let rows = <string[][]> parsed.data;\n\n    if (rows.length === 0) {\n        return new DataFrame<number, any>();\n    }\n\n    let columnNames;\n    rows = rows.map(row => {\n            return row.map(cell => isString(cell) ? cell.trim() : cell); // Trim each cell that is still a string.\n        });\n\n    if (config && config.columnNames) {\n        columnNames = config.columnNames;\n    }\n    else {\n        columnNames = rows.shift();\n    }\n\n    return new DataFrame<number, any>({\n        rows: rows,\n        columnNames: columnNames,\n    });\n}\n\nconst concat = Series.concat;\n\n/**\n * Concatenate multiple series into a single series.\n * THIS FUNCTION IS DEPRECATED. Instead use dataFrame.Series.concat.\n * \n * @param {array} series - Array of series to concatenate.\n *\n * @returns {Series} - Returns the single concatendated series.  \n */\nexport { concat as concatSeries };\n\nconst zip = Series.zip;\n\n/**\n * Zip together multiple series to create a new series.\n * THIS FUNCTION IS DEPRECATED. Instead use dataFrame.Series.zip.\n *\n * @param {array} series - Array of series to zip together.\n * @param {function} selector - Selector function that produces a new series based on the input series.\n * \n * @returns {Series} Returns a single series that is the combination of multiple input series that have been 'zipped' together by the 'selector' function.\n */\nexport { zip as zipSeries }\n\n/**\n * Generate a series from a range of numbers.\n *\n * @param start - The value of the first number in the range.\n * @param count - The number of sequential values in the range.\n * \n * @returns Returns a series with a sequence of generated values. The series contains 'count' values beginning at 'start'. \n */\nexport function range (start: number, count: number): ISeries<number, number> {\n\n    if (!isNumber(start)) throw new Error(\"Expect 'start' parameter to 'dataForge.range' function to be a number.\");\n    if (!isNumber(count)) throw new Error(\"Expect 'count' parameter to 'dataForge.range' function to be a number.\");\n\n    const values: number[] = [];\n    for (let valueIndex = 0; valueIndex < count; ++valueIndex) {\n        values.push(start + valueIndex);\n    }\n\n    return new Series<number, number>(values);\n}\n\n/**\n * Replicate a particular value N times to create a series.\n * \n * @param value The value to replicate.\n * @param count The number of times to replicate the value.\n * \n * @returns Returns a new series that contains N copies of the value.\n */\nexport function replicate<ValueT> (value: ValueT, count: number): ISeries<number, ValueT> {\n    const values: ValueT[] = [];\n    for (let i = 0; i < count; ++i) {\n        values.push(value);\n    }\n\n    return new Series<number, ValueT>(values);\n}\n\n/**\n * Generate a data-frame containing a matrix of values.\n *\n * @param numColumns - The number of columns in the data-frame.\n * @param numRows - The number of rows in the data-frame.\n * @param start - The starting value.\n * @param increment - The value to increment by for each new value.\n * \n * @returns Returns a dataframe that contains a matrix of generated values.\n */\nexport function matrix (numColumns: number, numRows: number, start: number, increment: number): IDataFrame<number, any> {\n    if (!isNumber(numColumns)) throw new Error(\"Expect 'numColumns' parameter to 'dataForge.matrix' function to be a number.\");\n    if (!isNumber(numRows)) throw new Error(\"Expect 'numRows' parameter to 'dataForge.matrix' function to be a number.\");\n    if (!isNumber(start)) throw new Error(\"Expect 'start' parameter to 'dataForge.matrix' function to be a number.\");\n    if (!isNumber(increment)) throw new Error(\"Expect 'increment' parameter to 'dataForge.matrix' function to be a number.\");\n\n    const rows: number[][] = [];\n    const columnNames: string[] = [];\n    var nextValue = start;\n\n    for (let colIndex = 0; colIndex < numColumns; ++colIndex) {\n        columnNames.push((colIndex+1).toString());\n    }\n    \n    for (let rowIndex = 0; rowIndex < numRows; ++rowIndex) {\n        var row: number[] = [];\n\n        for (let colIndex = 0; colIndex < numColumns; ++colIndex) {\n            row.push(nextValue + (colIndex * increment));\n        }\n\n        nextValue += numColumns * increment;\n        rows.push(row);\n    }\n\n    return new DataFrame({\n        columnNames: columnNames,\n        rows: rows,\n    });\n}\n","!function(t,n){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=n():\"function\"==typeof define&&define.amd?define(n):t.dayjs=n()}(this,function(){\"use strict\";var t=\"millisecond\",n=\"second\",e=\"minute\",i=\"hour\",r=\"day\",s=\"week\",u=\"month\",a=\"quarter\",o=\"year\",h=/^(\\d{4})-?(\\d{1,2})-?(\\d{0,2})[^0-9]*(\\d{1,2})?:?(\\d{1,2})?:?(\\d{1,2})?.?(\\d{1,3})?$/,f=/\\[([^\\]]+)]|Y{2,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,c=function(t,n,e){var i=String(t);return!i||i.length>=n?t:\"\"+Array(n+1-i.length).join(e)+t},d={s:c,z:function(t){var n=-t.utcOffset(),e=Math.abs(n),i=Math.floor(e/60),r=e%60;return(n<=0?\"+\":\"-\")+c(i,2,\"0\")+\":\"+c(r,2,\"0\")},m:function(t,n){var e=12*(n.year()-t.year())+(n.month()-t.month()),i=t.clone().add(e,u),r=n-i<0,s=t.clone().add(e+(r?-1:1),u);return Number(-(e+(n-i)/(r?i-s:s-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(h){return{M:u,y:o,w:s,d:r,h:i,m:e,s:n,ms:t,Q:a}[h]||String(h||\"\").toLowerCase().replace(/s$/,\"\")},u:function(t){return void 0===t}},$={name:\"en\",weekdays:\"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),months:\"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\")},l=\"en\",m={};m[l]=$;var y=function(t){return t instanceof S},M=function(t,n,e){var i;if(!t)return null;if(\"string\"==typeof t)m[t]&&(i=t),n&&(m[t]=n,i=t);else{var r=t.name;m[r]=t,i=r}return e||(l=i),i},g=function(t,n,e){if(y(t))return t.clone();var i=n?\"string\"==typeof n?{format:n,pl:e}:n:{};return i.date=t,new S(i)},D=d;D.l=M,D.i=y,D.w=function(t,n){return g(t,{locale:n.$L,utc:n.$u})};var S=function(){function c(t){this.$L=this.$L||M(t.locale,null,!0)||l,this.parse(t)}var d=c.prototype;return d.parse=function(t){this.$d=function(t){var n=t.date,e=t.utc;if(null===n)return new Date(NaN);if(D.u(n))return new Date;if(n instanceof Date)return new Date(n);if(\"string\"==typeof n&&!/Z$/i.test(n)){var i=n.match(h);if(i)return e?new Date(Date.UTC(i[1],i[2]-1,i[3]||1,i[4]||0,i[5]||0,i[6]||0,i[7]||0)):new Date(i[1],i[2]-1,i[3]||1,i[4]||0,i[5]||0,i[6]||0,i[7]||0)}return new Date(n)}(t),this.init()},d.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds()},d.$utils=function(){return D},d.isValid=function(){return!(\"Invalid Date\"===this.$d.toString())},d.isSame=function(t,n){var e=g(t);return this.startOf(n)<=e&&e<=this.endOf(n)},d.isAfter=function(t,n){return g(t)<this.startOf(n)},d.isBefore=function(t,n){return this.endOf(n)<g(t)},d.$g=function(t,n,e){return D.u(t)?this[n]:this.set(e,t)},d.year=function(t){return this.$g(t,\"$y\",o)},d.month=function(t){return this.$g(t,\"$M\",u)},d.day=function(t){return this.$g(t,\"$W\",r)},d.date=function(t){return this.$g(t,\"$D\",\"date\")},d.hour=function(t){return this.$g(t,\"$H\",i)},d.minute=function(t){return this.$g(t,\"$m\",e)},d.second=function(t){return this.$g(t,\"$s\",n)},d.millisecond=function(n){return this.$g(n,\"$ms\",t)},d.unix=function(){return Math.floor(this.valueOf()/1e3)},d.valueOf=function(){return this.$d.getTime()},d.startOf=function(t,a){var h=this,f=!!D.u(a)||a,c=D.p(t),d=function(t,n){var e=D.w(h.$u?Date.UTC(h.$y,n,t):new Date(h.$y,n,t),h);return f?e:e.endOf(r)},$=function(t,n){return D.w(h.toDate()[t].apply(h.toDate(),(f?[0,0,0,0]:[23,59,59,999]).slice(n)),h)},l=this.$W,m=this.$M,y=this.$D,M=\"set\"+(this.$u?\"UTC\":\"\");switch(c){case o:return f?d(1,0):d(31,11);case u:return f?d(1,m):d(0,m+1);case s:var g=this.$locale().weekStart||0,S=(l<g?l+7:l)-g;return d(f?y-S:y+(6-S),m);case r:case\"date\":return $(M+\"Hours\",0);case i:return $(M+\"Minutes\",1);case e:return $(M+\"Seconds\",2);case n:return $(M+\"Milliseconds\",3);default:return this.clone()}},d.endOf=function(t){return this.startOf(t,!1)},d.$set=function(s,a){var h,f=D.p(s),c=\"set\"+(this.$u?\"UTC\":\"\"),d=(h={},h[r]=c+\"Date\",h.date=c+\"Date\",h[u]=c+\"Month\",h[o]=c+\"FullYear\",h[i]=c+\"Hours\",h[e]=c+\"Minutes\",h[n]=c+\"Seconds\",h[t]=c+\"Milliseconds\",h)[f],$=f===r?this.$D+(a-this.$W):a;if(f===u||f===o){var l=this.clone().set(\"date\",1);l.$d[d]($),l.init(),this.$d=l.set(\"date\",Math.min(this.$D,l.daysInMonth())).toDate()}else d&&this.$d[d]($);return this.init(),this},d.set=function(t,n){return this.clone().$set(t,n)},d.get=function(t){return this[D.p(t)]()},d.add=function(t,a){var h,f=this;t=Number(t);var c=D.p(a),d=function(n){var e=new Date(f.$d);return e.setDate(e.getDate()+n*t),D.w(e,f)};if(c===u)return this.set(u,this.$M+t);if(c===o)return this.set(o,this.$y+t);if(c===r)return d(1);if(c===s)return d(7);var $=(h={},h[e]=6e4,h[i]=36e5,h[n]=1e3,h)[c]||1,l=this.valueOf()+t*$;return D.w(l,this)},d.subtract=function(t,n){return this.add(-1*t,n)},d.format=function(t){var n=this;if(!this.isValid())return\"Invalid Date\";var e=t||\"YYYY-MM-DDTHH:mm:ssZ\",i=D.z(this),r=this.$locale(),s=r.weekdays,u=r.months,a=function(t,n,e,i){return t&&t[n]||e[n].substr(0,i)},o=function(t){return D.s(n.$H%12||12,t,\"0\")},h={YY:String(this.$y).slice(-2),YYYY:String(this.$y),M:String(this.$M+1),MM:D.s(this.$M+1,2,\"0\"),MMM:a(r.monthsShort,this.$M,u,3),MMMM:u[this.$M],D:String(this.$D),DD:D.s(this.$D,2,\"0\"),d:String(this.$W),dd:a(r.weekdaysMin,this.$W,s,2),ddd:a(r.weekdaysShort,this.$W,s,3),dddd:s[this.$W],H:String(this.$H),HH:D.s(this.$H,2,\"0\"),h:o(1),hh:o(2),a:this.$H<12?\"am\":\"pm\",A:this.$H<12?\"AM\":\"PM\",m:String(this.$m),mm:D.s(this.$m,2,\"0\"),s:String(this.$s),ss:D.s(this.$s,2,\"0\"),SSS:D.s(this.$ms,3,\"0\"),Z:i};return e.replace(f,function(t,n){return n||h[t]||i.replace(\":\",\"\")})},d.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},d.diff=function(t,h,f){var c,d=D.p(h),$=g(t),l=6e4*($.utcOffset()-this.utcOffset()),m=this-$,y=D.m(this,$);return y=(c={},c[o]=y/12,c[u]=y,c[a]=y/3,c[s]=(m-l)/6048e5,c[r]=(m-l)/864e5,c[i]=m/36e5,c[e]=m/6e4,c[n]=m/1e3,c)[d]||m,f?y:D.a(y)},d.daysInMonth=function(){return this.endOf(u).$D},d.$locale=function(){return m[this.$L]},d.locale=function(t,n){if(!t)return this.$L;var e=this.clone();return e.$L=M(t,n,!0),e},d.clone=function(){return D.w(this.toDate(),this)},d.toDate=function(){return new Date(this.$d)},d.toJSON=function(){return this.toISOString()},d.toISOString=function(){return this.$d.toISOString()},d.toString=function(){return this.$d.toUTCString()},c}();return g.prototype=S.prototype,g.extend=function(t,n){return t(n,S,g),g},g.locale=M,g.isDayjs=y,g.unix=function(t){return g(1e3*t)},g.en=m[l],g.Ls=m,g});\n","// @ts-ignore\nimport t from \"typy\";\n\n//\n// Various shared utility functions.\n//\n\nexport function* mapIterable<InT, OutT> (items: Iterable<InT>, mapFn: (item: InT) => OutT): Iterable<OutT> {\n    const iterator = items[Symbol.iterator]();\n    while (true) {\n        const result = iterator.next();\n        if (result.done) {\n            break;\n        }\n        yield mapFn(result.value);\n    }\n}\n\n//\n// Helper function to only return distinct items.\n//\nexport function makeDistinct<ItemT, KeyT>(items: Iterable<ItemT>, selector?: (item: ItemT) => KeyT): ItemT[] {\n    const set: any = {};\n    const output: any[] = [];\n    for (const item of items) {\n        var key = selector && selector(item) || item;\n        if (!set[key]) {\n            // Haven't yet seen this key.\n            set[key] = true;\n            output.push(item);\n        }\n    }\n\n    return output;\n}\n\n//\n// Helper function to map an array of objects.\n//\nexport function toMap<InT, KeyT, ValueT>(items: Iterable<InT>, keySelector: (item: InT) => KeyT, valueSelector: (item: InT) => ValueT): any {\n    const output: any = {};\n    for (const item of items) {\n        var key = keySelector(item);\n        output[key] = valueSelector(item);\n    }\n    return output;\n}\n\n//\n// Helper function to map an array of objects.\n//\nexport function toMap2<InT, KeyT, ValueT>(items: Iterable<InT>, keySelector: (item: InT) => KeyT, valueSelector: (item: InT) => ValueT): Map<KeyT, ValueT> {\n    const output = new Map<KeyT, ValueT>();\n    for (const item of items) {\n        output.set(keySelector(item), valueSelector(item));\n    }\n    return output;\n}\n\n//\n// Determine the type of a value.\n//\nexport function determineType (value: any): string {\n    if (value === undefined) {\n        return \"undefined\";\n    }\n    else if (isNumber(value)) {\n        return \"number\";\n    }\n    else if (isString(value)) {\n        return \"string\";\n    }\n    else if (value instanceof Date) {\n        return \"date\";\n    }\n    else if (isBoolean(value)) {\n        return \"boolean\";\n    }\n    else {\n        return \"unsupported\";\n    }\n}\n\nexport function isObject(v: any): boolean {\n    return t(v).isObject && !isDate(v);\n}\n\nexport function isFunction(v: any): v is Function {\n    return t(v).isFunction;\n}\n\nexport function isString(v: any): v is string {\n    return t(v).isString;\n}\n\nexport function isDate(v: any): v is Date {\n    return Object.prototype.toString.call(v) === \"[object Date]\";\n}\n\nexport function isBoolean(v: any): v is boolean {\n    return t(v).isBoolean;\n}\n\nexport function isNumber(v: any): v is number {\n    return t(v).isNumber;\n}\n\nexport function isArray(v: any): v is Array<any> {\n    return t(v).isArray;\n}\n\nexport function isUndefined(v: any): boolean {\n    return v === undefined;\n}\n","import { ISeries, Series, SeriesConfigFn } from './series';\n// @ts-ignore\nimport moment from \"dayjs\";\nimport { determineType } from './utils';\n\n/**\n * A predicate function for testing a value against another.\n */\nexport type PredicateFn = (value: any, against: any) => boolean;\n\n/**\n * Interface that represents an index for a Series.\n */\nexport interface IIndex<IndexT> extends ISeries<number, IndexT> {\n\n    /**\n     * Get the type of the index.\n     * \n     * @returns Returns a string that specifies the type of the index.\n     */\n    getType (): string;\n\n    /**\n     * Get the less than operation for the index.\n     * \n     * @returns Returns a function that can be used to compare a value against an index value.\n     */\n    getLessThan (): PredicateFn;\n\n    /**\n     * Get the less than or equal to operation for the index.\n     * \n     * @returns Returns a function that can be used to compare a value against an index value.\n     */\n    getLessThanOrEqualTo (): PredicateFn;\n\n    /**\n     * Get the greater than operation for the index.\n     * \n     * @returns Returns a function that can be used to compare a value against an index value.\n     */\n    getGreaterThan (): PredicateFn;\n    \n}\n\n/**\n * Class that represents an index for a Series.\n */\nexport class Index<IndexT> extends Series<number, IndexT> implements IIndex<IndexT> {\n\n    //\n    // Records the type of the index.\n    //\n    private _type?: string;\n\n    constructor(config?: any | SeriesConfigFn<number, IndexT>) {\n        super(config);\n    }\n\n    /**\n     * Get the type of the index.\n     * \n     * @returns Returns a string that specifies the type of the index.\n     */\n    getType (): string {\n\n        if (!this._type) {\n            //\n            // Detect the type.\n            //\n            if (this.any()) {\n                this._type = determineType(this.first());\n            }\n            else {\n                this._type = 'empty';\n            }\n        }\n\n        return this._type;\n    }\n\n    /**\n     * Get the less than operation for the index.\n     * \n     * @returns Returns a function that can be used to compare a value against an index value.\n     */\n    getLessThan (): PredicateFn {\n\n        switch (this.getType()) {\n            case \"date\":\n                return (d1: Date, d2: Date) => moment(d1).isBefore(d2);\n\n            case \"string\":\n            case \"number\":\n                return (v1: any, v2: any) => v1 < v2;\n\n            case \"empty\":\n                return () => true; // Series is empty, so this makes no difference.\n\n            default:\n                throw new Error(\"No less than operation available for type: \" + this.getType());\n        }\n    }\n\n    /**\n     * Get the less than or equal to operation for the index.\n     * \n     * @returns Returns a function that can be used to compare a value against an index value.\n     */\n    getLessThanOrEqualTo (): PredicateFn {\n        return (v1: any, v2: any) => !this.getGreaterThan()(v1, v2); //TODO: Should expand  this out.\n    }\n    \n    /**\n     * Get the greater than operation for the index.\n     * \n     * @returns Returns a function that can be used to compare a value against an index value.\n     */\n    getGreaterThan (): PredicateFn {\n\n        switch (this.getType()) {\n            case \"date\":\n                return (d1: Date, d2: Date) => moment(d1).isAfter(d2);\n\n            case \"string\":\n            case \"number\":\n                return (v1: any, v2: any) => v1 > v2;\n\n            case \"empty\":\n                return () => true; // Series is empty, so this makes no difference.\n\n            default:\n                throw new Error(\"No greater than operation available for type: \" + this.getType());\n        }\n    }\n\n}\n","//\n// An iterator that iterates the elements of an array.\n//\n\nexport class ArrayIterator<T> implements Iterator<T> {\n\n    arr: T[];\n\n    index = 0;\n\n    constructor(arr: T[]) {\n        this.arr = arr;\n    }\n\n    next(): IteratorResult<T> {\n        if (this.index < this.arr.length) {\n            return {\n                done: false, \n                value: this.arr[this.index++],\n            };\n        }\n        else {\n            // https://github.com/Microsoft/TypeScript/issues/8938\n            return ({ done: true } as IteratorResult<T>)  // <= explicit cast here!;\n        }\n    }\n\n}","//\n// An iterable that returns no values.\n//\n\nimport { EmptyIterator } from '../iterators/empty-iterator';\n\nexport class EmptyIterable implements Iterable<any> {\n\n    [Symbol.iterator](): Iterator<any> {\n        return new EmptyIterator();\n    }\n}","//\n// An iterable that simply counts up from zero.\n// This creates the default index in Data-Forge.\n//\n\nimport { CountIterator } from '../iterators/count-iterator';\n\nexport class CountIterable implements Iterable<any> {\n\n    [Symbol.iterator](): Iterator<any> {\n        return new CountIterator();\n    }\n}","//\n// An iterable that allows multiple other iterables to be iterated at once.\n// This allows iterables to be composed.\n// This is used in Data-Forge to combine iterables for index and values.\n//\n\nimport { MultiIterator } from '../iterators/multi-iterator';\n\nexport class MultiIterable implements Iterable<any[]> {\n\n    iterables: Iterable<any>[];\n\n    constructor(iterables: Iterable<any>[]) {\n        this.iterables = iterables;\n    }\n\n    [Symbol.iterator](): Iterator<any> {\n        var iterators: Iterator<any>[] = [];\n\n        for (const iterable of this.iterables) {\n            iterators.push(iterable[Symbol.iterator]());\n        }\n\n        return new MultiIterator(iterators);\n    }\n}","//\n// An iterable that applies a selector function to each item.\n//\n\nimport { SelectorFn, SelectIterator } from '../iterators/select-iterator';\n\nexport class SelectIterable<ValueT, ToT> implements Iterable<ToT> {\n\n    iterable: Iterable<ValueT>;\n    selector: SelectorFn<ValueT, ToT>;\n\n    constructor(iterable: Iterable<ValueT>, selector: SelectorFn<ValueT, ToT>) {\n        this.iterable = iterable;\n        this.selector = selector;\n    }\n\n    [Symbol.iterator](): Iterator<ToT> {\n        var iterator = this.iterable[Symbol.iterator]();\n        return new SelectIterator<ValueT, ToT>(iterator, this.selector);\n    }\n}","//\n// An iterable that applies a selector function to each item.\n//\n\nimport { SelectorFn, SelectManyIterator } from '../iterators/select-many-iterator';\n\nexport class SelectManyIterable<ValueT, ToT> implements Iterable<ToT> {\n\n    iterable: Iterable<ValueT>;\n    selector: SelectorFn<ValueT, ToT>;\n\n    constructor(iterable: Iterable<ValueT>, selector: SelectorFn<ValueT, ToT>) {\n        this.iterable = iterable;\n        this.selector = selector;\n    }\n\n    [Symbol.iterator](): Iterator<ToT> {\n        var iterator = this.iterable[Symbol.iterator]();\n        return new SelectManyIterator<ValueT, ToT>(iterator, this.selector);\n    }\n}","//\n// An iterable that takes a certain number of elements from a child iterable.\n//\n\nimport { TakeIterator } from '../iterators/take-iterator';\n\nexport class TakeIterable<T> implements Iterable<T> {\n\n    childIterable: Iterable<T>;\n    numElements: number;\n\n    constructor(childIterable: Iterable<T>, numElements: number) {\n        this.childIterable = childIterable;\n        this.numElements = numElements;\n    }\n\n    [Symbol.iterator](): Iterator<any> {\n        var childIterator = this.childIterable[Symbol.iterator]();\n        return new TakeIterator(childIterator, this.numElements);\n    }\n}","//\n// An iterable that takes a sequence of elements while a predicate function returns true.\n//\n\nimport { TakeWhileIterator, PredicateFn } from '../iterators/take-while-iterator';\n\nexport class TakeWhileIterable<T> implements Iterable<T> {\n\n    childIterable: Iterable<T>;\n    predicate: PredicateFn<T>;\n\n    constructor(childIterable: Iterable<T>, predicate: PredicateFn<T>) {\n        this.childIterable = childIterable;\n        this.predicate = predicate;\n    }\n\n    [Symbol.iterator](): Iterator<any> {\n        var childIterator = this.childIterable[Symbol.iterator]();\n        return new TakeWhileIterator(childIterator, this.predicate);\n    }\n}","//\n// An iterable that takes elements from a child iterable based on a predicate function.\n//\n\nimport { WhereIterator, PredicateFn } from '../iterators/where-iterator';\n\nexport class WhereIterable<T> implements Iterable<T> {\n\n    childIterable: Iterable<T>;\n    predicate: PredicateFn<T>;\n\n    constructor(childIterable: Iterable<T>, predicate: PredicateFn<T>) {\n        this.childIterable = childIterable;\n        this.predicate = predicate;\n    }\n\n    [Symbol.iterator](): Iterator<any> {\n        var childIterator = this.childIterable[Symbol.iterator]();\n        return new WhereIterator(childIterator, this.predicate);\n    }\n}","//\n// An iterable that concatenates multiple iterables.\n//\n\nimport { ConcatIterator } from '../iterators/concat-iterator';\n\nexport class ConcatIterable<T> implements Iterable<T> {\n\n    iterables: Iterable<Iterable<T>>;\n\n    constructor(iterables: Iterable<Iterable<T>>) {\n        this.iterables = iterables;\n    }\n\n    [Symbol.iterator](): Iterator<any> {\n        return new ConcatIterator(this.iterables);\n    }\n}","//\n// An iterable that iterates the elements in reverse.\n//\n\nimport { ArrayIterator } from '../iterators/array-iterator';\n\nexport class ReverseIterable<T> implements Iterable<T> {\n\n    iterable: Iterable<T>;\n\n    constructor(iterable: Iterable<T>) {\n        this.iterable = iterable\n    }\n\n    [Symbol.iterator](): Iterator<any> {\n        const working = [];\n        for (const value of this.iterable) {\n            working.push(value);\n        }\n        working.reverse();\n        return new ArrayIterator(working);\n    }\n}","//\n// An iterable that zips together each set of elements in child iterables.\n//\n\nimport { ZipIterator, ZipFn } from '../iterators/zip-iterator';\n\nexport class ZipIterable<ValueT, ReturnT> implements Iterable<ReturnT> {\n\n    iterables: Iterable<ValueT>[];\n    zipper: ZipFn<ValueT, ReturnT>;\n\n    constructor(iterables: Iterable<ValueT>[], zipper: ZipFn<ValueT, ReturnT>) {\n        this.iterables = iterables;\n        this.zipper = zipper;\n    }\n\n    [Symbol.iterator](): Iterator<ReturnT> {\n        return new ZipIterator<ValueT, ReturnT>(this.iterables, this.zipper);\n    }\n}","//\n// An iterable that iterates the only distinct elements of another iterable.\n//\n\nimport { DistinctIterator, SelectorFnNoIndex } from '../iterators/distinct-iterator';\n\nexport class DistinctIterable<FromT, ToT> implements Iterable<FromT> {\n\n    iterable: Iterable<FromT>;\n    selector?: SelectorFnNoIndex<FromT, ToT>;\n\n    constructor(iterable: Iterable<FromT>, selector?: SelectorFnNoIndex<FromT, ToT>) {\n        this.iterable = iterable;\n        this.selector = selector;\n    }\n\n    [Symbol.iterator](): Iterator<FromT> {\n        return new DistinctIterator(this.iterable, this.selector);\n    }\n}","//\n// An iterable that sorts it's input before iterating it.\n//\n\nimport { ArrayIterator } from '../iterators/array-iterator';\n\nexport type SelectorFn = (value: any, index: number) => any;\n\nexport enum Direction {\n    Ascending,\n    Descending\n}\n\nexport interface ISortSpec {\n    sortLevel: number; // Debug helper. Sort level 0 is the first level.\n    selector: SelectorFn;\n    direction: Direction,\n}\n\nclass SortOperation {\n\n    values: any[];\n    sortSpec: ISortSpec;\n    keys: any[];\n\n    constructor(values: any[], sortSpec: ISortSpec) {\n        this.values = values;\n        this.sortSpec = sortSpec;\n        this.keys = [];\n    }\n\n    genKeys (): void {\n        if (this.keys.length > 0) {\n            // Already cached.\n            return;\n        }\n        \n        const index = 0;\n        for (const value of this.values) {\n            this.keys.push(this.sortSpec.selector(value, index));\n        }        \n    }\n\n    compare (indexA: number, indexB: number): number {\n        this.genKeys();\n\n        const keyA = this.keys[indexA];\n        const keyB = this.keys[indexB];\n        let comparison = -1;\n        if (keyA === keyB) {\n            comparison = 0;\n        }\n        else if (keyA > keyB) {\n            comparison = 1;\n        }\n\n        return (this.sortSpec.direction === Direction.Descending) ? -comparison : comparison;\n    }\n}\n\nexport class OrderedIterable implements Iterable<any> {\n\n    //TODO: Would probably be good to cache the sorted data here.\n\n    iterable: Iterable<any>;\n    sortSpec: ISortSpec[];\n\n    constructor(iterable: Iterable<any>, sortSpec: ISortSpec[]) {\n        this.iterable = iterable;\n        this.sortSpec = sortSpec;\n    }\n\n    [Symbol.iterator](): Iterator<any> {\n\n        const indexes: number[] = [];\n        const values: any[] = [];\n\n        let index = 0;\n        for (const value of this.iterable) {\n            indexes.push(index);\n            values.push(value);\n            ++index;\n        }\n\n        const sortOperations: SortOperation[] = [];\n        for (const sortSpec of this.sortSpec) {\n            sortOperations.push(new SortOperation(values, sortSpec));\n        }\n\n        sortOperations[0].genKeys();\n\n        indexes.sort((indexA: number, indexB: number): number => {\n            for (const sortOperation of sortOperations) {\n                const comparison = sortOperation.compare(indexA, indexB);\n                if (comparison !== 0) {\n                    return comparison;\n                }\n            }\n\n            return 0;\n        });\n\n        const sortedValues: any[] = [];\n\n        for (const index of indexes) {\n            sortedValues.push(values[index]);\n        }        \n\n        return new ArrayIterator(sortedValues);\n    }\n}","//\n// An iterable to extact an element from an array.\n//\n\nimport { ExtractElementIterator } from '../iterators/extract-element-iterator';\n\nexport class ExtractElementIterable implements Iterable<any> {\n\n    arrayIterable: Iterable<any[]>;\n    extractIndex: number;\n\n    constructor(arrayIterable: Iterable<any[]>, extractIndex: number) {\n        this.arrayIterable = arrayIterable;\n        this.extractIndex = extractIndex;\n    }\n\n    [Symbol.iterator](): Iterator<any> {\n        var arrayIterator = this.arrayIterable[Symbol.iterator]();\n        return new ExtractElementIterator(arrayIterator, this.extractIndex);\n    }\n}","//\n// An iterable that skips a number of values.\n//\n\nimport { SkipIterator } from '../iterators/skip-iterator';\n\nexport class SkipIterable implements Iterable<any> {\n\n    iterable: Iterable<any>;\n    numValues: number;\n\n    constructor(iterable: Iterable<any>, numValues: number) {\n        this.iterable = iterable;\n        this.numValues = numValues;\n    }\n\n    [Symbol.iterator](): Iterator<any> {\n        var iterator = this.iterable[Symbol.iterator]();\n        return new SkipIterator(iterator, this.numValues);\n    }\n}","//\n// An iterable that skips a sequence of elements while a predicate function returns true.\n//\n\nimport { SkipWhileIterator, PredicateFn } from '../iterators/skip-while-iterator';\n\nexport class SkipWhileIterable<T> implements Iterable<T> {\n\n    childIterable: Iterable<T>;\n    predicate: PredicateFn<T>;\n\n    constructor(childIterable: Iterable<T>, predicate: PredicateFn<T>) {\n        this.childIterable = childIterable;\n        this.predicate = predicate;\n    }\n\n    [Symbol.iterator](): Iterator<any> {\n        var childIterator = this.childIterable[Symbol.iterator]();\n        return new SkipWhileIterator(childIterator, this.predicate);\n    }\n}","var wcwidth\n\ntry {\n  wcwidth = require('wcwidth')\n} catch(e) {}\n\nmodule.exports = Table\n\nfunction Table() {\n  this.rows = []\n  this.row = {__printers : {}}\n}\n\n/**\n * Push the current row to the table and start a new one\n *\n * @returns {Table} `this`\n */\n\nTable.prototype.newRow = function() {\n  this.rows.push(this.row)\n  this.row = {__printers : {}}\n  return this\n}\n\n/**\n * Write cell in the current row\n *\n * @param {String} col          - Column name\n * @param {Any} val             - Cell value\n * @param {Function} [printer]  - Printer function to format the value\n * @returns {Table} `this`\n */\n\nTable.prototype.cell = function(col, val, printer) {\n  this.row[col] = val\n  this.row.__printers[col] = printer || string\n  return this\n}\n\n/**\n * String to separate columns\n */\n\nTable.prototype.separator = '  '\n\nfunction string(val) {\n  return val === undefined ? '' : ''+val\n}\n\nfunction length(str) {\n  var s = str.replace(/\\u001b\\[\\d+m/g, '')\n  return wcwidth == null ? s.length : wcwidth(s)\n}\n\n/**\n * Default printer\n */\n\nTable.string = string\n\n/**\n * Create a printer which right aligns the content by padding with `ch` on the left\n *\n * @param {String} ch\n * @returns {Function}\n */\n\nTable.leftPadder = leftPadder\n\nfunction leftPadder(ch) {\n  return function(val, width) {\n    var str = string(val)\n    var len = length(str)\n    var pad = width > len ? Array(width - len + 1).join(ch) : ''\n    return pad + str\n  }\n}\n\n/**\n * Printer which right aligns the content\n */\n\nvar padLeft = Table.padLeft = leftPadder(' ')\n\n/**\n * Create a printer which pads with `ch` on the right\n *\n * @param {String} ch\n * @returns {Function}\n */\n\nTable.rightPadder = rightPadder\n\nfunction rightPadder(ch) {\n  return function padRight(val, width) {\n    var str = string(val)\n    var len = length(str)\n    var pad = width > len ? Array(width - len + 1).join(ch) : ''\n    return str + pad\n  }\n}\n\nvar padRight = rightPadder(' ')\n\n/**\n * Create a printer for numbers\n *\n * Will do right alignment and optionally fix the number of digits after decimal point\n *\n * @param {Number} [digits] - Number of digits for fixpoint notation\n * @returns {Function}\n */\n\nTable.number = function(digits) {\n  return function(val, width) {\n    if (val == null) return ''\n    if (typeof val != 'number')\n      throw new Error(''+val + ' is not a number')\n    var str = digits == null ? val+'' : val.toFixed(digits)\n    return padLeft(str, width)\n  }\n}\n\nfunction each(row, fn) {\n  for(var key in row) {\n    if (key == '__printers') continue\n    fn(key, row[key])\n  }\n}\n\n/**\n * Get list of columns in printing order\n *\n * @returns {string[]}\n */\n\nTable.prototype.columns = function() {\n  var cols = {}\n  for(var i = 0; i < 2; i++) { // do 2 times\n    this.rows.forEach(function(row) {\n      var idx = 0\n      each(row, function(key) {\n        idx = Math.max(idx, cols[key] || 0)\n        cols[key] = idx\n        idx++\n      })\n    })\n  }\n  return Object.keys(cols).sort(function(a, b) {\n    return cols[a] - cols[b]\n  })\n}\n\n/**\n * Format just rows, i.e. print the table without headers and totals\n *\n * @returns {String} String representaion of the table\n */\n\nTable.prototype.print = function() {\n  var cols = this.columns()\n  var separator = this.separator\n  var widths = {}\n  var out = ''\n\n  // Calc widths\n  this.rows.forEach(function(row) {\n    each(row, function(key, val) {\n      var str = row.__printers[key].call(row, val)\n      widths[key] = Math.max(length(str), widths[key] || 0)\n    })\n  })\n\n  // Now print\n  this.rows.forEach(function(row) {\n    var line = ''\n    cols.forEach(function(key) {\n      var width = widths[key]\n      var str = row.hasOwnProperty(key)\n        ? ''+row.__printers[key].call(row, row[key], width)\n        : ''\n      line += padRight(str, width) + separator\n    })\n    line = line.slice(0, -separator.length)\n    out += line + '\\n'\n  })\n\n  return out\n}\n\n/**\n * Format the table\n *\n * @returns {String}\n */\n\nTable.prototype.toString = function() {\n  var cols = this.columns()\n  var out = new Table()\n\n  // copy options\n  out.separator = this.separator\n\n  // Write header\n  cols.forEach(function(col) {\n    out.cell(col, col)\n  })\n  out.newRow()\n  out.pushDelimeter(cols)\n\n  // Write body\n  out.rows = out.rows.concat(this.rows)\n\n  // Totals\n  if (this.totals && this.rows.length) {\n    out.pushDelimeter(cols)\n    this.forEachTotal(out.cell.bind(out))\n    out.newRow()\n  }\n\n  return out.print()\n}\n\n/**\n * Push delimeter row to the table (with each cell filled with dashs during printing)\n *\n * @param {String[]} [cols]\n * @returns {Table} `this`\n */\n\nTable.prototype.pushDelimeter = function(cols) {\n  cols = cols || this.columns()\n  cols.forEach(function(col) {\n    this.cell(col, undefined, leftPadder('-'))\n  }, this)\n  return this.newRow()\n}\n\n/**\n * Compute all totals and yield the results to `cb`\n *\n * @param {Function} cb - Callback function with signature `(column, value, printer)`\n */\n\nTable.prototype.forEachTotal = function(cb) {\n  for(var key in this.totals) {\n    var aggr = this.totals[key]\n    var acc = aggr.init\n    var len = this.rows.length\n    this.rows.forEach(function(row, idx) {\n      acc = aggr.reduce.call(row, acc, row[key], idx, len)\n    })\n    cb(key, acc, aggr.printer)\n  }\n}\n\n/**\n * Format the table so that each row represents column and each column represents row\n *\n * @param {Object} [opts]\n * @param {String} [ops.separator] - Column separation string\n * @param {Function} [opts.namePrinter] - Printer to format column names\n * @returns {String}\n */\n\nTable.prototype.printTransposed = function(opts) {\n  opts = opts || {}\n  var out = new Table\n  out.separator = opts.separator || this.separator\n  this.columns().forEach(function(col) {\n    out.cell(0, col, opts.namePrinter)\n    this.rows.forEach(function(row, idx) {\n      out.cell(idx+1, row[col], row.__printers[col])\n    })\n    out.newRow()\n  }, this)\n  return out.print()\n}\n\n/**\n * Sort the table\n *\n * @param {Function|string[]} [cmp] - Either compare function or a list of columns to sort on\n * @returns {Table} `this`\n */\n\nTable.prototype.sort = function(cmp) {\n  if (typeof cmp == 'function') {\n    this.rows.sort(cmp)\n    return this\n  }\n\n  var keys = Array.isArray(cmp) ? cmp : this.columns()\n\n  var comparators = keys.map(function(key) {\n    var order = 'asc'\n    var m = /(.*)\\|\\s*(asc|des)\\s*$/.exec(key)\n    if (m) {\n      key = m[1]\n      order = m[2]\n    }\n    return function (a, b) {\n      return order == 'asc'\n        ? compare(a[key], b[key])\n        : compare(b[key], a[key])\n    }\n  })\n\n  return this.sort(function(a, b) {\n    for (var i = 0; i < comparators.length; i++) {\n      var order = comparators[i](a, b)\n      if (order != 0) return order\n    }\n    return 0\n  })\n}\n\nfunction compare(a, b) {\n  if (a === b) return 0\n  if (a === undefined) return 1\n  if (b === undefined) return -1\n  if (a === null) return 1\n  if (b === null) return -1\n  if (a > b) return 1\n  if (a < b) return -1\n  return compare(String(a), String(b))\n}\n\n/**\n * Add a total for the column\n *\n * @param {String} col - column name\n * @param {Object} [opts]\n * @param {Function} [opts.reduce = sum] - reduce(acc, val, idx, length) function to compute the total value\n * @param {Function} [opts.printer = padLeft] - Printer to format the total cell\n * @param {Any} [opts.init = 0] - Initial value for reduction\n * @returns {Table} `this`\n */\n\nTable.prototype.total = function(col, opts) {\n  opts = opts || {}\n  this.totals = this.totals || {}\n  this.totals[col] = {\n    reduce: opts.reduce || Table.aggr.sum,\n    printer: opts.printer || padLeft,\n    init: opts.init == null ? 0 : opts.init\n  }\n  return this\n}\n\n/**\n * Predefined helpers for totals\n */\n\nTable.aggr = {}\n\n/**\n * Create a printer which formats the value with `printer`,\n * adds the `prefix` to it and right aligns the whole thing\n *\n * @param {String} prefix\n * @param {Function} printer\n * @returns {printer}\n */\n\nTable.aggr.printer = function(prefix, printer) {\n  printer = printer || string\n  return function(val, width) {\n    return padLeft(prefix + printer(val), width)\n  }\n}\n\n/**\n * Sum reduction\n */\n\nTable.aggr.sum = function(acc, val) {\n  return acc + val\n}\n\n/**\n * Average reduction\n */\n\nTable.aggr.avg = function(acc, val, idx, len) {\n  acc = acc + val\n  return idx + 1 == len ? acc/len : acc\n}\n\n/**\n * Print the array or object\n *\n * @param {Array|Object} obj - Object to print\n * @param {Function|Object} [format] - Format options\n * @param {Function} [cb] - Table post processing and formating\n * @returns {String}\n */\n\nTable.print = function(obj, format, cb) {\n  var opts = format || {}\n\n  format = typeof format == 'function'\n    ? format\n    : function(obj, cell) {\n      for(var key in obj) {\n        if (!obj.hasOwnProperty(key)) continue\n        var params = opts[key] || {}\n        cell(params.name || key, obj[key], params.printer)\n      }\n    }\n\n  var t = new Table\n  var cell = t.cell.bind(t)\n\n  if (Array.isArray(obj)) {\n    cb = cb || function(t) { return t.toString() }\n    obj.forEach(function(item) {\n      format(item, cell)\n      t.newRow()\n    })\n  } else {\n    cb = cb || function(t) { return t.printTransposed({separator: ' : '}) }\n    format(obj, cell)\n    t.newRow()\n  }\n\n  return cb(t)\n}\n\n/**\n * Same as `Table.print()` but yields the result to `console.log()`\n */\n\nTable.log = function(obj, format, cb) {\n  console.log(Table.print(obj, format, cb))\n}\n\n/**\n * Same as `.toString()` but yields the result to `console.log()`\n */\n\nTable.prototype.log = function() {\n  console.log(this.toString())\n}\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.JSON5 = factory());\n}(this, (function () { 'use strict';\n\n\tfunction createCommonjsModule(fn, module) {\n\t\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n\t}\n\n\tvar _global = createCommonjsModule(function (module) {\n\t// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\n\tvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n\t  ? window : typeof self != 'undefined' && self.Math == Math ? self\n\t  // eslint-disable-next-line no-new-func\n\t  : Function('return this')();\n\tif (typeof __g == 'number') { __g = global; } // eslint-disable-line no-undef\n\t});\n\n\tvar _core = createCommonjsModule(function (module) {\n\tvar core = module.exports = { version: '2.5.7' };\n\tif (typeof __e == 'number') { __e = core; } // eslint-disable-line no-undef\n\t});\n\tvar _core_1 = _core.version;\n\n\tvar _isObject = function (it) {\n\t  return typeof it === 'object' ? it !== null : typeof it === 'function';\n\t};\n\n\tvar _anObject = function (it) {\n\t  if (!_isObject(it)) { throw TypeError(it + ' is not an object!'); }\n\t  return it;\n\t};\n\n\tvar _fails = function (exec) {\n\t  try {\n\t    return !!exec();\n\t  } catch (e) {\n\t    return true;\n\t  }\n\t};\n\n\t// Thank's IE8 for his funny defineProperty\n\tvar _descriptors = !_fails(function () {\n\t  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n\t});\n\n\tvar document = _global.document;\n\t// typeof document.createElement is 'object' in old IE\n\tvar is = _isObject(document) && _isObject(document.createElement);\n\tvar _domCreate = function (it) {\n\t  return is ? document.createElement(it) : {};\n\t};\n\n\tvar _ie8DomDefine = !_descriptors && !_fails(function () {\n\t  return Object.defineProperty(_domCreate('div'), 'a', { get: function () { return 7; } }).a != 7;\n\t});\n\n\t// 7.1.1 ToPrimitive(input [, PreferredType])\n\n\t// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n\t// and the second argument - flag - preferred type is a string\n\tvar _toPrimitive = function (it, S) {\n\t  if (!_isObject(it)) { return it; }\n\t  var fn, val;\n\t  if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) { return val; }\n\t  if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) { return val; }\n\t  if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) { return val; }\n\t  throw TypeError(\"Can't convert object to primitive value\");\n\t};\n\n\tvar dP = Object.defineProperty;\n\n\tvar f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n\t  _anObject(O);\n\t  P = _toPrimitive(P, true);\n\t  _anObject(Attributes);\n\t  if (_ie8DomDefine) { try {\n\t    return dP(O, P, Attributes);\n\t  } catch (e) { /* empty */ } }\n\t  if ('get' in Attributes || 'set' in Attributes) { throw TypeError('Accessors not supported!'); }\n\t  if ('value' in Attributes) { O[P] = Attributes.value; }\n\t  return O;\n\t};\n\n\tvar _objectDp = {\n\t\tf: f\n\t};\n\n\tvar _propertyDesc = function (bitmap, value) {\n\t  return {\n\t    enumerable: !(bitmap & 1),\n\t    configurable: !(bitmap & 2),\n\t    writable: !(bitmap & 4),\n\t    value: value\n\t  };\n\t};\n\n\tvar _hide = _descriptors ? function (object, key, value) {\n\t  return _objectDp.f(object, key, _propertyDesc(1, value));\n\t} : function (object, key, value) {\n\t  object[key] = value;\n\t  return object;\n\t};\n\n\tvar hasOwnProperty = {}.hasOwnProperty;\n\tvar _has = function (it, key) {\n\t  return hasOwnProperty.call(it, key);\n\t};\n\n\tvar id = 0;\n\tvar px = Math.random();\n\tvar _uid = function (key) {\n\t  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n\t};\n\n\tvar _redefine = createCommonjsModule(function (module) {\n\tvar SRC = _uid('src');\n\tvar TO_STRING = 'toString';\n\tvar $toString = Function[TO_STRING];\n\tvar TPL = ('' + $toString).split(TO_STRING);\n\n\t_core.inspectSource = function (it) {\n\t  return $toString.call(it);\n\t};\n\n\t(module.exports = function (O, key, val, safe) {\n\t  var isFunction = typeof val == 'function';\n\t  if (isFunction) { _has(val, 'name') || _hide(val, 'name', key); }\n\t  if (O[key] === val) { return; }\n\t  if (isFunction) { _has(val, SRC) || _hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key))); }\n\t  if (O === _global) {\n\t    O[key] = val;\n\t  } else if (!safe) {\n\t    delete O[key];\n\t    _hide(O, key, val);\n\t  } else if (O[key]) {\n\t    O[key] = val;\n\t  } else {\n\t    _hide(O, key, val);\n\t  }\n\t// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n\t})(Function.prototype, TO_STRING, function toString() {\n\t  return typeof this == 'function' && this[SRC] || $toString.call(this);\n\t});\n\t});\n\n\tvar _aFunction = function (it) {\n\t  if (typeof it != 'function') { throw TypeError(it + ' is not a function!'); }\n\t  return it;\n\t};\n\n\t// optional / simple context binding\n\n\tvar _ctx = function (fn, that, length) {\n\t  _aFunction(fn);\n\t  if (that === undefined) { return fn; }\n\t  switch (length) {\n\t    case 1: return function (a) {\n\t      return fn.call(that, a);\n\t    };\n\t    case 2: return function (a, b) {\n\t      return fn.call(that, a, b);\n\t    };\n\t    case 3: return function (a, b, c) {\n\t      return fn.call(that, a, b, c);\n\t    };\n\t  }\n\t  return function (/* ...args */) {\n\t    return fn.apply(that, arguments);\n\t  };\n\t};\n\n\tvar PROTOTYPE = 'prototype';\n\n\tvar $export = function (type, name, source) {\n\t  var IS_FORCED = type & $export.F;\n\t  var IS_GLOBAL = type & $export.G;\n\t  var IS_STATIC = type & $export.S;\n\t  var IS_PROTO = type & $export.P;\n\t  var IS_BIND = type & $export.B;\n\t  var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] || (_global[name] = {}) : (_global[name] || {})[PROTOTYPE];\n\t  var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});\n\t  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n\t  var key, own, out, exp;\n\t  if (IS_GLOBAL) { source = name; }\n\t  for (key in source) {\n\t    // contains in native\n\t    own = !IS_FORCED && target && target[key] !== undefined;\n\t    // export native or passed\n\t    out = (own ? target : source)[key];\n\t    // bind timers to global for call from export context\n\t    exp = IS_BIND && own ? _ctx(out, _global) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;\n\t    // extend global\n\t    if (target) { _redefine(target, key, out, type & $export.U); }\n\t    // export\n\t    if (exports[key] != out) { _hide(exports, key, exp); }\n\t    if (IS_PROTO && expProto[key] != out) { expProto[key] = out; }\n\t  }\n\t};\n\t_global.core = _core;\n\t// type bitmap\n\t$export.F = 1;   // forced\n\t$export.G = 2;   // global\n\t$export.S = 4;   // static\n\t$export.P = 8;   // proto\n\t$export.B = 16;  // bind\n\t$export.W = 32;  // wrap\n\t$export.U = 64;  // safe\n\t$export.R = 128; // real proto method for `library`\n\tvar _export = $export;\n\n\t// 7.1.4 ToInteger\n\tvar ceil = Math.ceil;\n\tvar floor = Math.floor;\n\tvar _toInteger = function (it) {\n\t  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n\t};\n\n\t// 7.2.1 RequireObjectCoercible(argument)\n\tvar _defined = function (it) {\n\t  if (it == undefined) { throw TypeError(\"Can't call method on  \" + it); }\n\t  return it;\n\t};\n\n\t// true  -> String#at\n\t// false -> String#codePointAt\n\tvar _stringAt = function (TO_STRING) {\n\t  return function (that, pos) {\n\t    var s = String(_defined(that));\n\t    var i = _toInteger(pos);\n\t    var l = s.length;\n\t    var a, b;\n\t    if (i < 0 || i >= l) { return TO_STRING ? '' : undefined; }\n\t    a = s.charCodeAt(i);\n\t    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n\t      ? TO_STRING ? s.charAt(i) : a\n\t      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n\t  };\n\t};\n\n\tvar $at = _stringAt(false);\n\t_export(_export.P, 'String', {\n\t  // 21.1.3.3 String.prototype.codePointAt(pos)\n\t  codePointAt: function codePointAt(pos) {\n\t    return $at(this, pos);\n\t  }\n\t});\n\n\tvar codePointAt = _core.String.codePointAt;\n\n\tvar max = Math.max;\n\tvar min = Math.min;\n\tvar _toAbsoluteIndex = function (index, length) {\n\t  index = _toInteger(index);\n\t  return index < 0 ? max(index + length, 0) : min(index, length);\n\t};\n\n\tvar fromCharCode = String.fromCharCode;\n\tvar $fromCodePoint = String.fromCodePoint;\n\n\t// length should be 1, old FF problem\n\t_export(_export.S + _export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {\n\t  // 21.1.2.2 String.fromCodePoint(...codePoints)\n\t  fromCodePoint: function fromCodePoint(x) {\n\t    var arguments$1 = arguments;\n\t // eslint-disable-line no-unused-vars\n\t    var res = [];\n\t    var aLen = arguments.length;\n\t    var i = 0;\n\t    var code;\n\t    while (aLen > i) {\n\t      code = +arguments$1[i++];\n\t      if (_toAbsoluteIndex(code, 0x10ffff) !== code) { throw RangeError(code + ' is not a valid code point'); }\n\t      res.push(code < 0x10000\n\t        ? fromCharCode(code)\n\t        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)\n\t      );\n\t    } return res.join('');\n\t  }\n\t});\n\n\tvar fromCodePoint = _core.String.fromCodePoint;\n\n\t// This is a generated file. Do not edit.\n\tvar Space_Separator = /[\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]/;\n\tvar ID_Start = /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1C80-\\u1C88\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312E\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEA\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE83\\uDE86-\\uDE89\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4\\uDD00-\\uDD43]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]/;\n\tvar ID_Continue = /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u0860-\\u086A\\u08A0-\\u08B4\\u08B6-\\u08BD\\u08D4-\\u08E1\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u09FC\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9-\\u0AFF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C80-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D00-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D54-\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1CD0-\\u1CD2\\u1CD4-\\u1CF9\\u1D00-\\u1DF9\\u1DFB-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312E\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FEA\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AE\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C5\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF2D-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE3E\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC00-\\uDC4A\\uDC50-\\uDC59\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDE00-\\uDE3E\\uDE47\\uDE50-\\uDE83\\uDE86-\\uDE99\\uDEC0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC36\\uDC38-\\uDC40\\uDC50-\\uDC59\\uDC72-\\uDC8F\\uDC92-\\uDCA7\\uDCA9-\\uDCB6\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD36\\uDD3A\\uDD3C\\uDD3D\\uDD3F-\\uDD47\\uDD50-\\uDD59]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD81C-\\uD820\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F\\uDFE0\\uDFE1]|\\uD821[\\uDC00-\\uDFEC]|\\uD822[\\uDC00-\\uDEF2]|\\uD82C[\\uDC00-\\uDD1E\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD838[\\uDC00-\\uDC06\\uDC08-\\uDC18\\uDC1B-\\uDC21\\uDC23\\uDC24\\uDC26-\\uDC2A]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6\\uDD00-\\uDD4A\\uDD50-\\uDD59]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/;\n\n\tvar unicode = {\n\t\tSpace_Separator: Space_Separator,\n\t\tID_Start: ID_Start,\n\t\tID_Continue: ID_Continue\n\t};\n\n\tvar util = {\n\t    isSpaceSeparator: function isSpaceSeparator (c) {\n\t        return unicode.Space_Separator.test(c)\n\t    },\n\n\t    isIdStartChar: function isIdStartChar (c) {\n\t        return (\n\t            (c >= 'a' && c <= 'z') ||\n\t        (c >= 'A' && c <= 'Z') ||\n\t        (c === '$') || (c === '_') ||\n\t        unicode.ID_Start.test(c)\n\t        )\n\t    },\n\n\t    isIdContinueChar: function isIdContinueChar (c) {\n\t        return (\n\t            (c >= 'a' && c <= 'z') ||\n\t        (c >= 'A' && c <= 'Z') ||\n\t        (c >= '0' && c <= '9') ||\n\t        (c === '$') || (c === '_') ||\n\t        (c === '\\u200C') || (c === '\\u200D') ||\n\t        unicode.ID_Continue.test(c)\n\t        )\n\t    },\n\n\t    isDigit: function isDigit (c) {\n\t        return /[0-9]/.test(c)\n\t    },\n\n\t    isHexDigit: function isHexDigit (c) {\n\t        return /[0-9A-Fa-f]/.test(c)\n\t    },\n\t};\n\n\tvar source;\n\tvar parseState;\n\tvar stack;\n\tvar pos;\n\tvar line;\n\tvar column;\n\tvar token;\n\tvar key;\n\tvar root;\n\n\tvar parse = function parse (text, reviver) {\n\t    source = String(text);\n\t    parseState = 'start';\n\t    stack = [];\n\t    pos = 0;\n\t    line = 1;\n\t    column = 0;\n\t    token = undefined;\n\t    key = undefined;\n\t    root = undefined;\n\n\t    do {\n\t        token = lex();\n\n\t        // This code is unreachable.\n\t        // if (!parseStates[parseState]) {\n\t        //     throw invalidParseState()\n\t        // }\n\n\t        parseStates[parseState]();\n\t    } while (token.type !== 'eof')\n\n\t    if (typeof reviver === 'function') {\n\t        return internalize({'': root}, '', reviver)\n\t    }\n\n\t    return root\n\t};\n\n\tfunction internalize (holder, name, reviver) {\n\t    var value = holder[name];\n\t    if (value != null && typeof value === 'object') {\n\t        for (var key in value) {\n\t            var replacement = internalize(value, key, reviver);\n\t            if (replacement === undefined) {\n\t                delete value[key];\n\t            } else {\n\t                value[key] = replacement;\n\t            }\n\t        }\n\t    }\n\n\t    return reviver.call(holder, name, value)\n\t}\n\n\tvar lexState;\n\tvar buffer;\n\tvar doubleQuote;\n\tvar sign;\n\tvar c;\n\n\tfunction lex () {\n\t    lexState = 'default';\n\t    buffer = '';\n\t    doubleQuote = false;\n\t    sign = 1;\n\n\t    for (;;) {\n\t        c = peek();\n\n\t        // This code is unreachable.\n\t        // if (!lexStates[lexState]) {\n\t        //     throw invalidLexState(lexState)\n\t        // }\n\n\t        var token = lexStates[lexState]();\n\t        if (token) {\n\t            return token\n\t        }\n\t    }\n\t}\n\n\tfunction peek () {\n\t    if (source[pos]) {\n\t        return String.fromCodePoint(source.codePointAt(pos))\n\t    }\n\t}\n\n\tfunction read () {\n\t    var c = peek();\n\n\t    if (c === '\\n') {\n\t        line++;\n\t        column = 0;\n\t    } else if (c) {\n\t        column += c.length;\n\t    } else {\n\t        column++;\n\t    }\n\n\t    if (c) {\n\t        pos += c.length;\n\t    }\n\n\t    return c\n\t}\n\n\tvar lexStates = {\n\t    default: function default$1 () {\n\t        switch (c) {\n\t        case '\\t':\n\t        case '\\v':\n\t        case '\\f':\n\t        case ' ':\n\t        case '\\u00A0':\n\t        case '\\uFEFF':\n\t        case '\\n':\n\t        case '\\r':\n\t        case '\\u2028':\n\t        case '\\u2029':\n\t            read();\n\t            return\n\n\t        case '/':\n\t            read();\n\t            lexState = 'comment';\n\t            return\n\n\t        case undefined:\n\t            read();\n\t            return newToken('eof')\n\t        }\n\n\t        if (util.isSpaceSeparator(c)) {\n\t            read();\n\t            return\n\t        }\n\n\t        // This code is unreachable.\n\t        // if (!lexStates[parseState]) {\n\t        //     throw invalidLexState(parseState)\n\t        // }\n\n\t        return lexStates[parseState]()\n\t    },\n\n\t    comment: function comment () {\n\t        switch (c) {\n\t        case '*':\n\t            read();\n\t            lexState = 'multiLineComment';\n\t            return\n\n\t        case '/':\n\t            read();\n\t            lexState = 'singleLineComment';\n\t            return\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    multiLineComment: function multiLineComment () {\n\t        switch (c) {\n\t        case '*':\n\t            read();\n\t            lexState = 'multiLineCommentAsterisk';\n\t            return\n\n\t        case undefined:\n\t            throw invalidChar(read())\n\t        }\n\n\t        read();\n\t    },\n\n\t    multiLineCommentAsterisk: function multiLineCommentAsterisk () {\n\t        switch (c) {\n\t        case '*':\n\t            read();\n\t            return\n\n\t        case '/':\n\t            read();\n\t            lexState = 'default';\n\t            return\n\n\t        case undefined:\n\t            throw invalidChar(read())\n\t        }\n\n\t        read();\n\t        lexState = 'multiLineComment';\n\t    },\n\n\t    singleLineComment: function singleLineComment () {\n\t        switch (c) {\n\t        case '\\n':\n\t        case '\\r':\n\t        case '\\u2028':\n\t        case '\\u2029':\n\t            read();\n\t            lexState = 'default';\n\t            return\n\n\t        case undefined:\n\t            read();\n\t            return newToken('eof')\n\t        }\n\n\t        read();\n\t    },\n\n\t    value: function value () {\n\t        switch (c) {\n\t        case '{':\n\t        case '[':\n\t            return newToken('punctuator', read())\n\n\t        case 'n':\n\t            read();\n\t            literal('ull');\n\t            return newToken('null', null)\n\n\t        case 't':\n\t            read();\n\t            literal('rue');\n\t            return newToken('boolean', true)\n\n\t        case 'f':\n\t            read();\n\t            literal('alse');\n\t            return newToken('boolean', false)\n\n\t        case '-':\n\t        case '+':\n\t            if (read() === '-') {\n\t                sign = -1;\n\t            }\n\n\t            lexState = 'sign';\n\t            return\n\n\t        case '.':\n\t            buffer = read();\n\t            lexState = 'decimalPointLeading';\n\t            return\n\n\t        case '0':\n\t            buffer = read();\n\t            lexState = 'zero';\n\t            return\n\n\t        case '1':\n\t        case '2':\n\t        case '3':\n\t        case '4':\n\t        case '5':\n\t        case '6':\n\t        case '7':\n\t        case '8':\n\t        case '9':\n\t            buffer = read();\n\t            lexState = 'decimalInteger';\n\t            return\n\n\t        case 'I':\n\t            read();\n\t            literal('nfinity');\n\t            return newToken('numeric', Infinity)\n\n\t        case 'N':\n\t            read();\n\t            literal('aN');\n\t            return newToken('numeric', NaN)\n\n\t        case '\"':\n\t        case \"'\":\n\t            doubleQuote = (read() === '\"');\n\t            buffer = '';\n\t            lexState = 'string';\n\t            return\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    identifierNameStartEscape: function identifierNameStartEscape () {\n\t        if (c !== 'u') {\n\t            throw invalidChar(read())\n\t        }\n\n\t        read();\n\t        var u = unicodeEscape();\n\t        switch (u) {\n\t        case '$':\n\t        case '_':\n\t            break\n\n\t        default:\n\t            if (!util.isIdStartChar(u)) {\n\t                throw invalidIdentifier()\n\t            }\n\n\t            break\n\t        }\n\n\t        buffer += u;\n\t        lexState = 'identifierName';\n\t    },\n\n\t    identifierName: function identifierName () {\n\t        switch (c) {\n\t        case '$':\n\t        case '_':\n\t        case '\\u200C':\n\t        case '\\u200D':\n\t            buffer += read();\n\t            return\n\n\t        case '\\\\':\n\t            read();\n\t            lexState = 'identifierNameEscape';\n\t            return\n\t        }\n\n\t        if (util.isIdContinueChar(c)) {\n\t            buffer += read();\n\t            return\n\t        }\n\n\t        return newToken('identifier', buffer)\n\t    },\n\n\t    identifierNameEscape: function identifierNameEscape () {\n\t        if (c !== 'u') {\n\t            throw invalidChar(read())\n\t        }\n\n\t        read();\n\t        var u = unicodeEscape();\n\t        switch (u) {\n\t        case '$':\n\t        case '_':\n\t        case '\\u200C':\n\t        case '\\u200D':\n\t            break\n\n\t        default:\n\t            if (!util.isIdContinueChar(u)) {\n\t                throw invalidIdentifier()\n\t            }\n\n\t            break\n\t        }\n\n\t        buffer += u;\n\t        lexState = 'identifierName';\n\t    },\n\n\t    sign: function sign$1 () {\n\t        switch (c) {\n\t        case '.':\n\t            buffer = read();\n\t            lexState = 'decimalPointLeading';\n\t            return\n\n\t        case '0':\n\t            buffer = read();\n\t            lexState = 'zero';\n\t            return\n\n\t        case '1':\n\t        case '2':\n\t        case '3':\n\t        case '4':\n\t        case '5':\n\t        case '6':\n\t        case '7':\n\t        case '8':\n\t        case '9':\n\t            buffer = read();\n\t            lexState = 'decimalInteger';\n\t            return\n\n\t        case 'I':\n\t            read();\n\t            literal('nfinity');\n\t            return newToken('numeric', sign * Infinity)\n\n\t        case 'N':\n\t            read();\n\t            literal('aN');\n\t            return newToken('numeric', NaN)\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    zero: function zero () {\n\t        switch (c) {\n\t        case '.':\n\t            buffer += read();\n\t            lexState = 'decimalPoint';\n\t            return\n\n\t        case 'e':\n\t        case 'E':\n\t            buffer += read();\n\t            lexState = 'decimalExponent';\n\t            return\n\n\t        case 'x':\n\t        case 'X':\n\t            buffer += read();\n\t            lexState = 'hexadecimal';\n\t            return\n\t        }\n\n\t        return newToken('numeric', sign * 0)\n\t    },\n\n\t    decimalInteger: function decimalInteger () {\n\t        switch (c) {\n\t        case '.':\n\t            buffer += read();\n\t            lexState = 'decimalPoint';\n\t            return\n\n\t        case 'e':\n\t        case 'E':\n\t            buffer += read();\n\t            lexState = 'decimalExponent';\n\t            return\n\t        }\n\n\t        if (util.isDigit(c)) {\n\t            buffer += read();\n\t            return\n\t        }\n\n\t        return newToken('numeric', sign * Number(buffer))\n\t    },\n\n\t    decimalPointLeading: function decimalPointLeading () {\n\t        if (util.isDigit(c)) {\n\t            buffer += read();\n\t            lexState = 'decimalFraction';\n\t            return\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    decimalPoint: function decimalPoint () {\n\t        switch (c) {\n\t        case 'e':\n\t        case 'E':\n\t            buffer += read();\n\t            lexState = 'decimalExponent';\n\t            return\n\t        }\n\n\t        if (util.isDigit(c)) {\n\t            buffer += read();\n\t            lexState = 'decimalFraction';\n\t            return\n\t        }\n\n\t        return newToken('numeric', sign * Number(buffer))\n\t    },\n\n\t    decimalFraction: function decimalFraction () {\n\t        switch (c) {\n\t        case 'e':\n\t        case 'E':\n\t            buffer += read();\n\t            lexState = 'decimalExponent';\n\t            return\n\t        }\n\n\t        if (util.isDigit(c)) {\n\t            buffer += read();\n\t            return\n\t        }\n\n\t        return newToken('numeric', sign * Number(buffer))\n\t    },\n\n\t    decimalExponent: function decimalExponent () {\n\t        switch (c) {\n\t        case '+':\n\t        case '-':\n\t            buffer += read();\n\t            lexState = 'decimalExponentSign';\n\t            return\n\t        }\n\n\t        if (util.isDigit(c)) {\n\t            buffer += read();\n\t            lexState = 'decimalExponentInteger';\n\t            return\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    decimalExponentSign: function decimalExponentSign () {\n\t        if (util.isDigit(c)) {\n\t            buffer += read();\n\t            lexState = 'decimalExponentInteger';\n\t            return\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    decimalExponentInteger: function decimalExponentInteger () {\n\t        if (util.isDigit(c)) {\n\t            buffer += read();\n\t            return\n\t        }\n\n\t        return newToken('numeric', sign * Number(buffer))\n\t    },\n\n\t    hexadecimal: function hexadecimal () {\n\t        if (util.isHexDigit(c)) {\n\t            buffer += read();\n\t            lexState = 'hexadecimalInteger';\n\t            return\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    hexadecimalInteger: function hexadecimalInteger () {\n\t        if (util.isHexDigit(c)) {\n\t            buffer += read();\n\t            return\n\t        }\n\n\t        return newToken('numeric', sign * Number(buffer))\n\t    },\n\n\t    string: function string () {\n\t        switch (c) {\n\t        case '\\\\':\n\t            read();\n\t            buffer += escape();\n\t            return\n\n\t        case '\"':\n\t            if (doubleQuote) {\n\t                read();\n\t                return newToken('string', buffer)\n\t            }\n\n\t            buffer += read();\n\t            return\n\n\t        case \"'\":\n\t            if (!doubleQuote) {\n\t                read();\n\t                return newToken('string', buffer)\n\t            }\n\n\t            buffer += read();\n\t            return\n\n\t        case '\\n':\n\t        case '\\r':\n\t            throw invalidChar(read())\n\n\t        case '\\u2028':\n\t        case '\\u2029':\n\t            separatorChar(c);\n\t            break\n\n\t        case undefined:\n\t            throw invalidChar(read())\n\t        }\n\n\t        buffer += read();\n\t    },\n\n\t    start: function start () {\n\t        switch (c) {\n\t        case '{':\n\t        case '[':\n\t            return newToken('punctuator', read())\n\n\t        // This code is unreachable since the default lexState handles eof.\n\t        // case undefined:\n\t        //     return newToken('eof')\n\t        }\n\n\t        lexState = 'value';\n\t    },\n\n\t    beforePropertyName: function beforePropertyName () {\n\t        switch (c) {\n\t        case '$':\n\t        case '_':\n\t            buffer = read();\n\t            lexState = 'identifierName';\n\t            return\n\n\t        case '\\\\':\n\t            read();\n\t            lexState = 'identifierNameStartEscape';\n\t            return\n\n\t        case '}':\n\t            return newToken('punctuator', read())\n\n\t        case '\"':\n\t        case \"'\":\n\t            doubleQuote = (read() === '\"');\n\t            lexState = 'string';\n\t            return\n\t        }\n\n\t        if (util.isIdStartChar(c)) {\n\t            buffer += read();\n\t            lexState = 'identifierName';\n\t            return\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    afterPropertyName: function afterPropertyName () {\n\t        if (c === ':') {\n\t            return newToken('punctuator', read())\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    beforePropertyValue: function beforePropertyValue () {\n\t        lexState = 'value';\n\t    },\n\n\t    afterPropertyValue: function afterPropertyValue () {\n\t        switch (c) {\n\t        case ',':\n\t        case '}':\n\t            return newToken('punctuator', read())\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    beforeArrayValue: function beforeArrayValue () {\n\t        if (c === ']') {\n\t            return newToken('punctuator', read())\n\t        }\n\n\t        lexState = 'value';\n\t    },\n\n\t    afterArrayValue: function afterArrayValue () {\n\t        switch (c) {\n\t        case ',':\n\t        case ']':\n\t            return newToken('punctuator', read())\n\t        }\n\n\t        throw invalidChar(read())\n\t    },\n\n\t    end: function end () {\n\t        // This code is unreachable since it's handled by the default lexState.\n\t        // if (c === undefined) {\n\t        //     read()\n\t        //     return newToken('eof')\n\t        // }\n\n\t        throw invalidChar(read())\n\t    },\n\t};\n\n\tfunction newToken (type, value) {\n\t    return {\n\t        type: type,\n\t        value: value,\n\t        line: line,\n\t        column: column,\n\t    }\n\t}\n\n\tfunction literal (s) {\n\t    for (var i = 0, list = s; i < list.length; i += 1) {\n\t        var c = list[i];\n\n\t        var p = peek();\n\n\t        if (p !== c) {\n\t            throw invalidChar(read())\n\t        }\n\n\t        read();\n\t    }\n\t}\n\n\tfunction escape () {\n\t    var c = peek();\n\t    switch (c) {\n\t    case 'b':\n\t        read();\n\t        return '\\b'\n\n\t    case 'f':\n\t        read();\n\t        return '\\f'\n\n\t    case 'n':\n\t        read();\n\t        return '\\n'\n\n\t    case 'r':\n\t        read();\n\t        return '\\r'\n\n\t    case 't':\n\t        read();\n\t        return '\\t'\n\n\t    case 'v':\n\t        read();\n\t        return '\\v'\n\n\t    case '0':\n\t        read();\n\t        if (util.isDigit(peek())) {\n\t            throw invalidChar(read())\n\t        }\n\n\t        return '\\0'\n\n\t    case 'x':\n\t        read();\n\t        return hexEscape()\n\n\t    case 'u':\n\t        read();\n\t        return unicodeEscape()\n\n\t    case '\\n':\n\t    case '\\u2028':\n\t    case '\\u2029':\n\t        read();\n\t        return ''\n\n\t    case '\\r':\n\t        read();\n\t        if (peek() === '\\n') {\n\t            read();\n\t        }\n\n\t        return ''\n\n\t    case '1':\n\t    case '2':\n\t    case '3':\n\t    case '4':\n\t    case '5':\n\t    case '6':\n\t    case '7':\n\t    case '8':\n\t    case '9':\n\t        throw invalidChar(read())\n\n\t    case undefined:\n\t        throw invalidChar(read())\n\t    }\n\n\t    return read()\n\t}\n\n\tfunction hexEscape () {\n\t    var buffer = '';\n\t    var c = peek();\n\n\t    if (!util.isHexDigit(c)) {\n\t        throw invalidChar(read())\n\t    }\n\n\t    buffer += read();\n\n\t    c = peek();\n\t    if (!util.isHexDigit(c)) {\n\t        throw invalidChar(read())\n\t    }\n\n\t    buffer += read();\n\n\t    return String.fromCodePoint(parseInt(buffer, 16))\n\t}\n\n\tfunction unicodeEscape () {\n\t    var buffer = '';\n\t    var count = 4;\n\n\t    while (count-- > 0) {\n\t        var c = peek();\n\t        if (!util.isHexDigit(c)) {\n\t            throw invalidChar(read())\n\t        }\n\n\t        buffer += read();\n\t    }\n\n\t    return String.fromCodePoint(parseInt(buffer, 16))\n\t}\n\n\tvar parseStates = {\n\t    start: function start () {\n\t        if (token.type === 'eof') {\n\t            throw invalidEOF()\n\t        }\n\n\t        push();\n\t    },\n\n\t    beforePropertyName: function beforePropertyName () {\n\t        switch (token.type) {\n\t        case 'identifier':\n\t        case 'string':\n\t            key = token.value;\n\t            parseState = 'afterPropertyName';\n\t            return\n\n\t        case 'punctuator':\n\t            // This code is unreachable since it's handled by the lexState.\n\t            // if (token.value !== '}') {\n\t            //     throw invalidToken()\n\t            // }\n\n\t            pop();\n\t            return\n\n\t        case 'eof':\n\t            throw invalidEOF()\n\t        }\n\n\t        // This code is unreachable since it's handled by the lexState.\n\t        // throw invalidToken()\n\t    },\n\n\t    afterPropertyName: function afterPropertyName () {\n\t        // This code is unreachable since it's handled by the lexState.\n\t        // if (token.type !== 'punctuator' || token.value !== ':') {\n\t        //     throw invalidToken()\n\t        // }\n\n\t        if (token.type === 'eof') {\n\t            throw invalidEOF()\n\t        }\n\n\t        parseState = 'beforePropertyValue';\n\t    },\n\n\t    beforePropertyValue: function beforePropertyValue () {\n\t        if (token.type === 'eof') {\n\t            throw invalidEOF()\n\t        }\n\n\t        push();\n\t    },\n\n\t    beforeArrayValue: function beforeArrayValue () {\n\t        if (token.type === 'eof') {\n\t            throw invalidEOF()\n\t        }\n\n\t        if (token.type === 'punctuator' && token.value === ']') {\n\t            pop();\n\t            return\n\t        }\n\n\t        push();\n\t    },\n\n\t    afterPropertyValue: function afterPropertyValue () {\n\t        // This code is unreachable since it's handled by the lexState.\n\t        // if (token.type !== 'punctuator') {\n\t        //     throw invalidToken()\n\t        // }\n\n\t        if (token.type === 'eof') {\n\t            throw invalidEOF()\n\t        }\n\n\t        switch (token.value) {\n\t        case ',':\n\t            parseState = 'beforePropertyName';\n\t            return\n\n\t        case '}':\n\t            pop();\n\t        }\n\n\t        // This code is unreachable since it's handled by the lexState.\n\t        // throw invalidToken()\n\t    },\n\n\t    afterArrayValue: function afterArrayValue () {\n\t        // This code is unreachable since it's handled by the lexState.\n\t        // if (token.type !== 'punctuator') {\n\t        //     throw invalidToken()\n\t        // }\n\n\t        if (token.type === 'eof') {\n\t            throw invalidEOF()\n\t        }\n\n\t        switch (token.value) {\n\t        case ',':\n\t            parseState = 'beforeArrayValue';\n\t            return\n\n\t        case ']':\n\t            pop();\n\t        }\n\n\t        // This code is unreachable since it's handled by the lexState.\n\t        // throw invalidToken()\n\t    },\n\n\t    end: function end () {\n\t        // This code is unreachable since it's handled by the lexState.\n\t        // if (token.type !== 'eof') {\n\t        //     throw invalidToken()\n\t        // }\n\t    },\n\t};\n\n\tfunction push () {\n\t    var value;\n\n\t    switch (token.type) {\n\t    case 'punctuator':\n\t        switch (token.value) {\n\t        case '{':\n\t            value = {};\n\t            break\n\n\t        case '[':\n\t            value = [];\n\t            break\n\t        }\n\n\t        break\n\n\t    case 'null':\n\t    case 'boolean':\n\t    case 'numeric':\n\t    case 'string':\n\t        value = token.value;\n\t        break\n\n\t    // This code is unreachable.\n\t    // default:\n\t    //     throw invalidToken()\n\t    }\n\n\t    if (root === undefined) {\n\t        root = value;\n\t    } else {\n\t        var parent = stack[stack.length - 1];\n\t        if (Array.isArray(parent)) {\n\t            parent.push(value);\n\t        } else {\n\t            parent[key] = value;\n\t        }\n\t    }\n\n\t    if (value !== null && typeof value === 'object') {\n\t        stack.push(value);\n\n\t        if (Array.isArray(value)) {\n\t            parseState = 'beforeArrayValue';\n\t        } else {\n\t            parseState = 'beforePropertyName';\n\t        }\n\t    } else {\n\t        var current = stack[stack.length - 1];\n\t        if (current == null) {\n\t            parseState = 'end';\n\t        } else if (Array.isArray(current)) {\n\t            parseState = 'afterArrayValue';\n\t        } else {\n\t            parseState = 'afterPropertyValue';\n\t        }\n\t    }\n\t}\n\n\tfunction pop () {\n\t    stack.pop();\n\n\t    var current = stack[stack.length - 1];\n\t    if (current == null) {\n\t        parseState = 'end';\n\t    } else if (Array.isArray(current)) {\n\t        parseState = 'afterArrayValue';\n\t    } else {\n\t        parseState = 'afterPropertyValue';\n\t    }\n\t}\n\n\t// This code is unreachable.\n\t// function invalidParseState () {\n\t//     return new Error(`JSON5: invalid parse state '${parseState}'`)\n\t// }\n\n\t// This code is unreachable.\n\t// function invalidLexState (state) {\n\t//     return new Error(`JSON5: invalid lex state '${state}'`)\n\t// }\n\n\tfunction invalidChar (c) {\n\t    if (c === undefined) {\n\t        return syntaxError((\"JSON5: invalid end of input at \" + line + \":\" + column))\n\t    }\n\n\t    return syntaxError((\"JSON5: invalid character '\" + (formatChar(c)) + \"' at \" + line + \":\" + column))\n\t}\n\n\tfunction invalidEOF () {\n\t    return syntaxError((\"JSON5: invalid end of input at \" + line + \":\" + column))\n\t}\n\n\t// This code is unreachable.\n\t// function invalidToken () {\n\t//     if (token.type === 'eof') {\n\t//         return syntaxError(`JSON5: invalid end of input at ${line}:${column}`)\n\t//     }\n\n\t//     const c = String.fromCodePoint(token.value.codePointAt(0))\n\t//     return syntaxError(`JSON5: invalid character '${formatChar(c)}' at ${line}:${column}`)\n\t// }\n\n\tfunction invalidIdentifier () {\n\t    column -= 5;\n\t    return syntaxError((\"JSON5: invalid identifier character at \" + line + \":\" + column))\n\t}\n\n\tfunction separatorChar (c) {\n\t    console.warn((\"JSON5: '\" + (formatChar(c)) + \"' in strings is not valid ECMAScript; consider escaping\"));\n\t}\n\n\tfunction formatChar (c) {\n\t    var replacements = {\n\t        \"'\": \"\\\\'\",\n\t        '\"': '\\\\\"',\n\t        '\\\\': '\\\\\\\\',\n\t        '\\b': '\\\\b',\n\t        '\\f': '\\\\f',\n\t        '\\n': '\\\\n',\n\t        '\\r': '\\\\r',\n\t        '\\t': '\\\\t',\n\t        '\\v': '\\\\v',\n\t        '\\0': '\\\\0',\n\t        '\\u2028': '\\\\u2028',\n\t        '\\u2029': '\\\\u2029',\n\t    };\n\n\t    if (replacements[c]) {\n\t        return replacements[c]\n\t    }\n\n\t    if (c < ' ') {\n\t        var hexString = c.charCodeAt(0).toString(16);\n\t        return '\\\\x' + ('00' + hexString).substring(hexString.length)\n\t    }\n\n\t    return c\n\t}\n\n\tfunction syntaxError (message) {\n\t    var err = new SyntaxError(message);\n\t    err.lineNumber = line;\n\t    err.columnNumber = column;\n\t    return err\n\t}\n\n\tvar stringify = function stringify (value, replacer, space) {\n\t    var stack = [];\n\t    var indent = '';\n\t    var propertyList;\n\t    var replacerFunc;\n\t    var gap = '';\n\t    var quote;\n\n\t    if (\n\t        replacer != null &&\n\t        typeof replacer === 'object' &&\n\t        !Array.isArray(replacer)\n\t    ) {\n\t        space = replacer.space;\n\t        quote = replacer.quote;\n\t        replacer = replacer.replacer;\n\t    }\n\n\t    if (typeof replacer === 'function') {\n\t        replacerFunc = replacer;\n\t    } else if (Array.isArray(replacer)) {\n\t        propertyList = [];\n\t        for (var i = 0, list = replacer; i < list.length; i += 1) {\n\t            var v = list[i];\n\n\t            var item = (void 0);\n\n\t            if (typeof v === 'string') {\n\t                item = v;\n\t            } else if (\n\t                typeof v === 'number' ||\n\t                v instanceof String ||\n\t                v instanceof Number\n\t            ) {\n\t                item = String(v);\n\t            }\n\n\t            if (item !== undefined && propertyList.indexOf(item) < 0) {\n\t                propertyList.push(item);\n\t            }\n\t        }\n\t    }\n\n\t    if (space instanceof Number) {\n\t        space = Number(space);\n\t    } else if (space instanceof String) {\n\t        space = String(space);\n\t    }\n\n\t    if (typeof space === 'number') {\n\t        if (space > 0) {\n\t            space = Math.min(10, Math.floor(space));\n\t            gap = '          '.substr(0, space);\n\t        }\n\t    } else if (typeof space === 'string') {\n\t        gap = space.substr(0, 10);\n\t    }\n\n\t    return serializeProperty('', {'': value})\n\n\t    function serializeProperty (key, holder) {\n\t        var value = holder[key];\n\t        if (value != null) {\n\t            if (typeof value.toJSON5 === 'function') {\n\t                value = value.toJSON5(key);\n\t            } else if (typeof value.toJSON === 'function') {\n\t                value = value.toJSON(key);\n\t            }\n\t        }\n\n\t        if (replacerFunc) {\n\t            value = replacerFunc.call(holder, key, value);\n\t        }\n\n\t        if (value instanceof Number) {\n\t            value = Number(value);\n\t        } else if (value instanceof String) {\n\t            value = String(value);\n\t        } else if (value instanceof Boolean) {\n\t            value = value.valueOf();\n\t        }\n\n\t        switch (value) {\n\t        case null: return 'null'\n\t        case true: return 'true'\n\t        case false: return 'false'\n\t        }\n\n\t        if (typeof value === 'string') {\n\t            return quoteString(value, false)\n\t        }\n\n\t        if (typeof value === 'number') {\n\t            return String(value)\n\t        }\n\n\t        if (typeof value === 'object') {\n\t            return Array.isArray(value) ? serializeArray(value) : serializeObject(value)\n\t        }\n\n\t        return undefined\n\t    }\n\n\t    function quoteString (value) {\n\t        var quotes = {\n\t            \"'\": 0.1,\n\t            '\"': 0.2,\n\t        };\n\n\t        var replacements = {\n\t            \"'\": \"\\\\'\",\n\t            '\"': '\\\\\"',\n\t            '\\\\': '\\\\\\\\',\n\t            '\\b': '\\\\b',\n\t            '\\f': '\\\\f',\n\t            '\\n': '\\\\n',\n\t            '\\r': '\\\\r',\n\t            '\\t': '\\\\t',\n\t            '\\v': '\\\\v',\n\t            '\\0': '\\\\0',\n\t            '\\u2028': '\\\\u2028',\n\t            '\\u2029': '\\\\u2029',\n\t        };\n\n\t        var product = '';\n\n\t        for (var i = 0, list = value; i < list.length; i += 1) {\n\t            var c = list[i];\n\n\t            switch (c) {\n\t            case \"'\":\n\t            case '\"':\n\t                quotes[c]++;\n\t                product += c;\n\t                continue\n\t            }\n\n\t            if (replacements[c]) {\n\t                product += replacements[c];\n\t                continue\n\t            }\n\n\t            if (c < ' ') {\n\t                var hexString = c.charCodeAt(0).toString(16);\n\t                product += '\\\\x' + ('00' + hexString).substring(hexString.length);\n\t                continue\n\t            }\n\n\t            product += c;\n\t        }\n\n\t        var quoteChar = quote || Object.keys(quotes).reduce(function (a, b) { return (quotes[a] < quotes[b]) ? a : b; });\n\n\t        product = product.replace(new RegExp(quoteChar, 'g'), replacements[quoteChar]);\n\n\t        return quoteChar + product + quoteChar\n\t    }\n\n\t    function serializeObject (value) {\n\t        if (stack.indexOf(value) >= 0) {\n\t            throw TypeError('Converting circular structure to JSON5')\n\t        }\n\n\t        stack.push(value);\n\n\t        var stepback = indent;\n\t        indent = indent + gap;\n\n\t        var keys = propertyList || Object.keys(value);\n\t        var partial = [];\n\t        for (var i = 0, list = keys; i < list.length; i += 1) {\n\t            var key = list[i];\n\n\t            var propertyString = serializeProperty(key, value);\n\t            if (propertyString !== undefined) {\n\t                var member = serializeKey(key) + ':';\n\t                if (gap !== '') {\n\t                    member += ' ';\n\t                }\n\t                member += propertyString;\n\t                partial.push(member);\n\t            }\n\t        }\n\n\t        var final;\n\t        if (partial.length === 0) {\n\t            final = '{}';\n\t        } else {\n\t            var properties;\n\t            if (gap === '') {\n\t                properties = partial.join(',');\n\t                final = '{' + properties + '}';\n\t            } else {\n\t                var separator = ',\\n' + indent;\n\t                properties = partial.join(separator);\n\t                final = '{\\n' + indent + properties + ',\\n' + stepback + '}';\n\t            }\n\t        }\n\n\t        stack.pop();\n\t        indent = stepback;\n\t        return final\n\t    }\n\n\t    function serializeKey (key) {\n\t        if (key.length === 0) {\n\t            return quoteString(key, true)\n\t        }\n\n\t        var firstChar = String.fromCodePoint(key.codePointAt(0));\n\t        if (!util.isIdStartChar(firstChar)) {\n\t            return quoteString(key, true)\n\t        }\n\n\t        for (var i = firstChar.length; i < key.length; i++) {\n\t            if (!util.isIdContinueChar(String.fromCodePoint(key.codePointAt(i)))) {\n\t                return quoteString(key, true)\n\t            }\n\t        }\n\n\t        return key\n\t    }\n\n\t    function serializeArray (value) {\n\t        if (stack.indexOf(value) >= 0) {\n\t            throw TypeError('Converting circular structure to JSON5')\n\t        }\n\n\t        stack.push(value);\n\n\t        var stepback = indent;\n\t        indent = indent + gap;\n\n\t        var partial = [];\n\t        for (var i = 0; i < value.length; i++) {\n\t            var propertyString = serializeProperty(String(i), value);\n\t            partial.push((propertyString !== undefined) ? propertyString : 'null');\n\t        }\n\n\t        var final;\n\t        if (partial.length === 0) {\n\t            final = '[]';\n\t        } else {\n\t            if (gap === '') {\n\t                var properties = partial.join(',');\n\t                final = '[' + properties + ']';\n\t            } else {\n\t                var separator = ',\\n' + indent;\n\t                var properties$1 = partial.join(separator);\n\t                final = '[\\n' + indent + properties$1 + ',\\n' + stepback + ']';\n\t            }\n\t        }\n\n\t        stack.pop();\n\t        indent = stepback;\n\t        return final\n\t    }\n\t};\n\n\tvar JSON5 = {\n\t    parse: parse,\n\t    stringify: stringify,\n\t};\n\n\tvar lib = JSON5;\n\n\tvar es5 = lib;\n\n\treturn es5;\n\n})));\n","/* @license\nPapa Parse\nv5.2.0\nhttps://github.com/mholt/PapaParse\nLicense: MIT\n*/\n!function(e,t){\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof module&&\"undefined\"!=typeof exports?module.exports=t():e.Papa=t()}(this,function s(){\"use strict\";var f=\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:void 0!==f?f:{};var n=!f.document&&!!f.postMessage,o=n&&/blob:/i.test((f.location||{}).protocol),a={},h=0,b={parse:function(e,t){var i=(t=t||{}).dynamicTyping||!1;U(i)&&(t.dynamicTypingFunction=i,i={});if(t.dynamicTyping=i,t.transform=!!U(t.transform)&&t.transform,t.worker&&b.WORKERS_SUPPORTED){var r=function(){if(!b.WORKERS_SUPPORTED)return!1;var e=(i=f.URL||f.webkitURL||null,r=s.toString(),b.BLOB_URL||(b.BLOB_URL=i.createObjectURL(new Blob([\"(\",r,\")();\"],{type:\"text/javascript\"})))),t=new f.Worker(e);var i,r;return t.onmessage=_,t.id=h++,a[t.id]=t}();return r.userStep=t.step,r.userChunk=t.chunk,r.userComplete=t.complete,r.userError=t.error,t.step=U(t.step),t.chunk=U(t.chunk),t.complete=U(t.complete),t.error=U(t.error),delete t.worker,void r.postMessage({input:e,config:t,workerId:r.id})}var n=null;b.NODE_STREAM_INPUT,\"string\"==typeof e?n=t.download?new l(t):new p(t):!0===e.readable&&U(e.read)&&U(e.on)?n=new g(t):(f.File&&e instanceof File||e instanceof Object)&&(n=new c(t));return n.stream(e)},unparse:function(e,t){var n=!1,_=!0,m=\",\",v=\"\\r\\n\",s='\"',a=s+s,i=!1,r=null;!function(){if(\"object\"!=typeof t)return;\"string\"!=typeof t.delimiter||b.BAD_DELIMITERS.filter(function(e){return-1!==t.delimiter.indexOf(e)}).length||(m=t.delimiter);(\"boolean\"==typeof t.quotes||\"function\"==typeof t.quotes||Array.isArray(t.quotes))&&(n=t.quotes);\"boolean\"!=typeof t.skipEmptyLines&&\"string\"!=typeof t.skipEmptyLines||(i=t.skipEmptyLines);\"string\"==typeof t.newline&&(v=t.newline);\"string\"==typeof t.quoteChar&&(s=t.quoteChar);\"boolean\"==typeof t.header&&(_=t.header);if(Array.isArray(t.columns)){if(0===t.columns.length)throw new Error(\"Option columns is empty\");r=t.columns}void 0!==t.escapeChar&&(a=t.escapeChar+s)}();var o=new RegExp(q(s),\"g\");\"string\"==typeof e&&(e=JSON.parse(e));if(Array.isArray(e)){if(!e.length||Array.isArray(e[0]))return u(null,e,i);if(\"object\"==typeof e[0])return u(r||h(e[0]),e,i)}else if(\"object\"==typeof e)return\"string\"==typeof e.data&&(e.data=JSON.parse(e.data)),Array.isArray(e.data)&&(e.fields||(e.fields=e.meta&&e.meta.fields),e.fields||(e.fields=Array.isArray(e.data[0])?e.fields:h(e.data[0])),Array.isArray(e.data[0])||\"object\"==typeof e.data[0]||(e.data=[e.data])),u(e.fields||[],e.data||[],i);throw new Error(\"Unable to serialize unrecognized input\");function h(e){if(\"object\"!=typeof e)return[];var t=[];for(var i in e)t.push(i);return t}function u(e,t,i){var r=\"\";\"string\"==typeof e&&(e=JSON.parse(e)),\"string\"==typeof t&&(t=JSON.parse(t));var n=Array.isArray(e)&&0<e.length,s=!Array.isArray(t[0]);if(n&&_){for(var a=0;a<e.length;a++)0<a&&(r+=m),r+=y(e[a],a);0<t.length&&(r+=v)}for(var o=0;o<t.length;o++){var h=n?e.length:t[o].length,u=!1,f=n?0===Object.keys(t[o]).length:0===t[o].length;if(i&&!n&&(u=\"greedy\"===i?\"\"===t[o].join(\"\").trim():1===t[o].length&&0===t[o][0].length),\"greedy\"===i&&n){for(var d=[],l=0;l<h;l++){var c=s?e[l]:l;d.push(t[o][c])}u=\"\"===d.join(\"\").trim()}if(!u){for(var p=0;p<h;p++){0<p&&!f&&(r+=m);var g=n&&s?e[p]:p;r+=y(t[o][g],p)}o<t.length-1&&(!i||0<h&&!f)&&(r+=v)}}return r}function y(e,t){if(null==e)return\"\";if(e.constructor===Date)return JSON.stringify(e).slice(1,25);var i=e.toString().replace(o,a),r=\"boolean\"==typeof n&&n||\"function\"==typeof n&&n(e,t)||Array.isArray(n)&&n[t]||function(e,t){for(var i=0;i<t.length;i++)if(-1<e.indexOf(t[i]))return!0;return!1}(i,b.BAD_DELIMITERS)||-1<i.indexOf(m)||\" \"===i.charAt(0)||\" \"===i.charAt(i.length-1);return r?s+i+s:i}}};if(b.RECORD_SEP=String.fromCharCode(30),b.UNIT_SEP=String.fromCharCode(31),b.BYTE_ORDER_MARK=\"\\ufeff\",b.BAD_DELIMITERS=[\"\\r\",\"\\n\",'\"',b.BYTE_ORDER_MARK],b.WORKERS_SUPPORTED=!n&&!!f.Worker,b.NODE_STREAM_INPUT=1,b.LocalChunkSize=10485760,b.RemoteChunkSize=5242880,b.DefaultDelimiter=\",\",b.Parser=w,b.ParserHandle=i,b.NetworkStreamer=l,b.FileStreamer=c,b.StringStreamer=p,b.ReadableStreamStreamer=g,f.jQuery){var d=f.jQuery;d.fn.parse=function(o){var i=o.config||{},h=[];return this.each(function(e){if(!(\"INPUT\"===d(this).prop(\"tagName\").toUpperCase()&&\"file\"===d(this).attr(\"type\").toLowerCase()&&f.FileReader)||!this.files||0===this.files.length)return!0;for(var t=0;t<this.files.length;t++)h.push({file:this.files[t],inputElem:this,instanceConfig:d.extend({},i)})}),e(),this;function e(){if(0!==h.length){var e,t,i,r,n=h[0];if(U(o.before)){var s=o.before(n.file,n.inputElem);if(\"object\"==typeof s){if(\"abort\"===s.action)return e=\"AbortError\",t=n.file,i=n.inputElem,r=s.reason,void(U(o.error)&&o.error({name:e},t,i,r));if(\"skip\"===s.action)return void u();\"object\"==typeof s.config&&(n.instanceConfig=d.extend(n.instanceConfig,s.config))}else if(\"skip\"===s)return void u()}var a=n.instanceConfig.complete;n.instanceConfig.complete=function(e){U(a)&&a(e,n.file,n.inputElem),u()},b.parse(n.file,n.instanceConfig)}else U(o.complete)&&o.complete()}function u(){h.splice(0,1),e()}}}function u(e){this._handle=null,this._finished=!1,this._completed=!1,this._halted=!1,this._input=null,this._baseIndex=0,this._partialLine=\"\",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(e){var t=E(e);t.chunkSize=parseInt(t.chunkSize),e.step||e.chunk||(t.chunkSize=null);this._handle=new i(t),(this._handle.streamer=this)._config=t}.call(this,e),this.parseChunk=function(e,t){if(this.isFirstChunk&&U(this._config.beforeFirstChunk)){var i=this._config.beforeFirstChunk(e);void 0!==i&&(e=i)}this.isFirstChunk=!1,this._halted=!1;var r=this._partialLine+e;this._partialLine=\"\";var n=this._handle.parse(r,this._baseIndex,!this._finished);if(!this._handle.paused()&&!this._handle.aborted()){var s=n.meta.cursor;this._finished||(this._partialLine=r.substring(s-this._baseIndex),this._baseIndex=s),n&&n.data&&(this._rowCount+=n.data.length);var a=this._finished||this._config.preview&&this._rowCount>=this._config.preview;if(o)f.postMessage({results:n,workerId:b.WORKER_ID,finished:a});else if(U(this._config.chunk)&&!t){if(this._config.chunk(n,this._handle),this._handle.paused()||this._handle.aborted())return void(this._halted=!0);n=void 0,this._completeResults=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(n.data),this._completeResults.errors=this._completeResults.errors.concat(n.errors),this._completeResults.meta=n.meta),this._completed||!a||!U(this._config.complete)||n&&n.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),a||n&&n.meta.paused||this._nextChunk(),n}this._halted=!0},this._sendError=function(e){U(this._config.error)?this._config.error(e):o&&this._config.error&&f.postMessage({workerId:b.WORKER_ID,error:e,finished:!1})}}function l(e){var r;(e=e||{}).chunkSize||(e.chunkSize=b.RemoteChunkSize),u.call(this,e),this._nextChunk=n?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(e){this._input=e,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(r=new XMLHttpRequest,this._config.withCredentials&&(r.withCredentials=this._config.withCredentials),n||(r.onload=y(this._chunkLoaded,this),r.onerror=y(this._chunkError,this)),r.open(this._config.downloadRequestBody?\"POST\":\"GET\",this._input,!n),this._config.downloadRequestHeaders){var e=this._config.downloadRequestHeaders;for(var t in e)r.setRequestHeader(t,e[t])}if(this._config.chunkSize){var i=this._start+this._config.chunkSize-1;r.setRequestHeader(\"Range\",\"bytes=\"+this._start+\"-\"+i)}try{r.send(this._config.downloadRequestBody)}catch(e){this._chunkError(e.message)}n&&0===r.status&&this._chunkError()}},this._chunkLoaded=function(){4===r.readyState&&(r.status<200||400<=r.status?this._chunkError():(this._start+=this._config.chunkSize?this._config.chunkSize:r.responseText.length,this._finished=!this._config.chunkSize||this._start>=function(e){var t=e.getResponseHeader(\"Content-Range\");if(null===t)return-1;return parseInt(t.substring(t.lastIndexOf(\"/\")+1))}(r),this.parseChunk(r.responseText)))},this._chunkError=function(e){var t=r.statusText||e;this._sendError(new Error(t))}}function c(e){var r,n;(e=e||{}).chunkSize||(e.chunkSize=b.LocalChunkSize),u.call(this,e);var s=\"undefined\"!=typeof FileReader;this.stream=function(e){this._input=e,n=e.slice||e.webkitSlice||e.mozSlice,s?((r=new FileReader).onload=y(this._chunkLoaded,this),r.onerror=y(this._chunkError,this)):r=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var e=this._input;if(this._config.chunkSize){var t=Math.min(this._start+this._config.chunkSize,this._input.size);e=n.call(e,this._start,t)}var i=r.readAsText(e,this._config.encoding);s||this._chunkLoaded({target:{result:i}})},this._chunkLoaded=function(e){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(e.target.result)},this._chunkError=function(){this._sendError(r.error)}}function p(e){var i;u.call(this,e=e||{}),this.stream=function(e){return i=e,this._nextChunk()},this._nextChunk=function(){if(!this._finished){var e,t=this._config.chunkSize;return t?(e=i.substring(0,t),i=i.substring(t)):(e=i,i=\"\"),this._finished=!i,this.parseChunk(e)}}}function g(e){u.call(this,e=e||{});var t=[],i=!0,r=!1;this.pause=function(){u.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){u.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(e){this._input=e,this._input.on(\"data\",this._streamData),this._input.on(\"end\",this._streamEnd),this._input.on(\"error\",this._streamError)},this._checkIsFinished=function(){r&&1===t.length&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),t.length?this.parseChunk(t.shift()):i=!0},this._streamData=y(function(e){try{t.push(\"string\"==typeof e?e:e.toString(this._config.encoding)),i&&(i=!1,this._checkIsFinished(),this.parseChunk(t.shift()))}catch(e){this._streamError(e)}},this),this._streamError=y(function(e){this._streamCleanUp(),this._sendError(e)},this),this._streamEnd=y(function(){this._streamCleanUp(),r=!0,this._streamData(\"\")},this),this._streamCleanUp=y(function(){this._input.removeListener(\"data\",this._streamData),this._input.removeListener(\"end\",this._streamEnd),this._input.removeListener(\"error\",this._streamError)},this)}function i(m){var a,o,h,r=Math.pow(2,53),n=-r,s=/^\\s*-?(\\d+\\.?|\\.\\d+|\\d+\\.\\d+)(e[-+]?\\d+)?\\s*$/,u=/(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))/,t=this,i=0,f=0,d=!1,e=!1,l=[],c={data:[],errors:[],meta:{}};if(U(m.step)){var p=m.step;m.step=function(e){if(c=e,_())g();else{if(g(),0===c.data.length)return;i+=e.data.length,m.preview&&i>m.preview?o.abort():(c.data=c.data[0],p(c,t))}}}function v(e){return\"greedy\"===m.skipEmptyLines?\"\"===e.join(\"\").trim():1===e.length&&0===e[0].length}function g(){if(c&&h&&(k(\"Delimiter\",\"UndetectableDelimiter\",\"Unable to auto-detect delimiting character; defaulted to '\"+b.DefaultDelimiter+\"'\"),h=!1),m.skipEmptyLines)for(var e=0;e<c.data.length;e++)v(c.data[e])&&c.data.splice(e--,1);return _()&&function(){if(!c)return;function e(e){U(m.transformHeader)&&(e=m.transformHeader(e)),l.push(e)}if(Array.isArray(c.data[0])){for(var t=0;_()&&t<c.data.length;t++)c.data[t].forEach(e);c.data.splice(0,1)}else c.data.forEach(e)}(),function(){if(!c||!m.header&&!m.dynamicTyping&&!m.transform)return c;function e(e,t){var i,r=m.header?{}:[];for(i=0;i<e.length;i++){var n=i,s=e[i];m.header&&(n=i>=l.length?\"__parsed_extra\":l[i]),m.transform&&(s=m.transform(s,n)),s=y(n,s),\"__parsed_extra\"===n?(r[n]=r[n]||[],r[n].push(s)):r[n]=s}return m.header&&(i>l.length?k(\"FieldMismatch\",\"TooManyFields\",\"Too many fields: expected \"+l.length+\" fields but parsed \"+i,f+t):i<l.length&&k(\"FieldMismatch\",\"TooFewFields\",\"Too few fields: expected \"+l.length+\" fields but parsed \"+i,f+t)),r}var t=1;!c.data.length||Array.isArray(c.data[0])?(c.data=c.data.map(e),t=c.data.length):c.data=e(c.data,0);m.header&&c.meta&&(c.meta.fields=l);return f+=t,c}()}function _(){return m.header&&0===l.length}function y(e,t){return i=e,m.dynamicTypingFunction&&void 0===m.dynamicTyping[i]&&(m.dynamicTyping[i]=m.dynamicTypingFunction(i)),!0===(m.dynamicTyping[i]||m.dynamicTyping)?\"true\"===t||\"TRUE\"===t||\"false\"!==t&&\"FALSE\"!==t&&(function(e){if(s.test(e)){var t=parseFloat(e);if(n<t&&t<r)return!0}return!1}(t)?parseFloat(t):u.test(t)?new Date(t):\"\"===t?null:t):t;var i}function k(e,t,i,r){var n={type:e,code:t,message:i};void 0!==r&&(n.row=r),c.errors.push(n)}this.parse=function(e,t,i){var r=m.quoteChar||'\"';if(m.newline||(m.newline=function(e,t){e=e.substring(0,1048576);var i=new RegExp(q(t)+\"([^]*?)\"+q(t),\"gm\"),r=(e=e.replace(i,\"\")).split(\"\\r\"),n=e.split(\"\\n\"),s=1<n.length&&n[0].length<r[0].length;if(1===r.length||s)return\"\\n\";for(var a=0,o=0;o<r.length;o++)\"\\n\"===r[o][0]&&a++;return a>=r.length/2?\"\\r\\n\":\"\\r\"}(e,r)),h=!1,m.delimiter)U(m.delimiter)&&(m.delimiter=m.delimiter(e),c.meta.delimiter=m.delimiter);else{var n=function(e,t,i,r,n){var s,a,o,h;n=n||[\",\",\"\\t\",\"|\",\";\",b.RECORD_SEP,b.UNIT_SEP];for(var u=0;u<n.length;u++){var f=n[u],d=0,l=0,c=0;o=void 0;for(var p=new w({comments:r,delimiter:f,newline:t,preview:10}).parse(e),g=0;g<p.data.length;g++)if(i&&v(p.data[g]))c++;else{var _=p.data[g].length;l+=_,void 0!==o?0<_&&(d+=Math.abs(_-o),o=_):o=_}0<p.data.length&&(l/=p.data.length-c),(void 0===a||d<=a)&&(void 0===h||h<l)&&1.99<l&&(a=d,s=f,h=l)}return{successful:!!(m.delimiter=s),bestDelimiter:s}}(e,m.newline,m.skipEmptyLines,m.comments,m.delimitersToGuess);n.successful?m.delimiter=n.bestDelimiter:(h=!0,m.delimiter=b.DefaultDelimiter),c.meta.delimiter=m.delimiter}var s=E(m);return m.preview&&m.header&&s.preview++,a=e,o=new w(s),c=o.parse(a,t,i),g(),d?{meta:{paused:!0}}:c||{meta:{paused:!1}}},this.paused=function(){return d},this.pause=function(){d=!0,o.abort(),a=U(m.chunk)?\"\":a.substring(o.getCharIndex())},this.resume=function(){t.streamer._halted?(d=!1,t.streamer.parseChunk(a,!0)):setTimeout(t.resume,3)},this.aborted=function(){return e},this.abort=function(){e=!0,o.abort(),c.meta.aborted=!0,U(m.complete)&&m.complete(c),a=\"\"}}function q(e){return e.replace(/[.*+?^${}()|[\\]\\\\]/g,\"\\\\$&\")}function w(e){var O,D=(e=e||{}).delimiter,I=e.newline,T=e.comments,A=e.step,L=e.preview,F=e.fastMode,z=O=void 0===e.quoteChar?'\"':e.quoteChar;if(void 0!==e.escapeChar&&(z=e.escapeChar),(\"string\"!=typeof D||-1<b.BAD_DELIMITERS.indexOf(D))&&(D=\",\"),T===D)throw new Error(\"Comment character same as delimiter\");!0===T?T=\"#\":(\"string\"!=typeof T||-1<b.BAD_DELIMITERS.indexOf(T))&&(T=!1),\"\\n\"!==I&&\"\\r\"!==I&&\"\\r\\n\"!==I&&(I=\"\\n\");var M=0,j=!1;this.parse=function(a,t,i){if(\"string\"!=typeof a)throw new Error(\"Input must be a string\");var r=a.length,e=D.length,n=I.length,s=T.length,o=U(A),h=[],u=[],f=[],d=M=0;if(!a)return R();if(F||!1!==F&&-1===a.indexOf(O)){for(var l=a.split(I),c=0;c<l.length;c++){if(f=l[c],M+=f.length,c!==l.length-1)M+=I.length;else if(i)return R();if(!T||f.substring(0,s)!==T){if(o){if(h=[],b(f.split(D)),S(),j)return R()}else b(f.split(D));if(L&&L<=c)return h=h.slice(0,L),R(!0)}}return R()}for(var p=a.indexOf(D,M),g=a.indexOf(I,M),_=new RegExp(q(z)+q(O),\"g\"),m=a.indexOf(O,M);;)if(a[M]!==O)if(T&&0===f.length&&a.substring(M,M+s)===T){if(-1===g)return R();M=g+n,g=a.indexOf(I,M),p=a.indexOf(D,M)}else{if(-1!==p&&(p<g||-1===g)){if(!(p<m)){f.push(a.substring(M,p)),M=p+e,p=a.indexOf(D,M);continue}var v=x(p,m,g);if(v&&void 0!==v.nextDelim){p=v.nextDelim,m=v.quoteSearch,f.push(a.substring(M,p)),M=p+e,p=a.indexOf(D,M);continue}}if(-1===g)break;if(f.push(a.substring(M,g)),C(g+n),o&&(S(),j))return R();if(L&&h.length>=L)return R(!0)}else for(m=M,M++;;){if(-1===(m=a.indexOf(O,m+1)))return i||u.push({type:\"Quotes\",code:\"MissingQuotes\",message:\"Quoted field unterminated\",row:h.length,index:M}),E();if(m===r-1)return E(a.substring(M,m).replace(_,O));if(O!==z||a[m+1]!==z){if(O===z||0===m||a[m-1]!==z){-1!==p&&p<m+1&&(p=a.indexOf(D,m+1)),-1!==g&&g<m+1&&(g=a.indexOf(I,m+1));var y=w(-1===g?p:Math.min(p,g));if(a[m+1+y]===D){f.push(a.substring(M,m).replace(_,O)),a[M=m+1+y+e]!==O&&(m=a.indexOf(O,M)),p=a.indexOf(D,M),g=a.indexOf(I,M);break}var k=w(g);if(a.substring(m+1+k,m+1+k+n)===I){if(f.push(a.substring(M,m).replace(_,O)),C(m+1+k+n),p=a.indexOf(D,M),m=a.indexOf(O,M),o&&(S(),j))return R();if(L&&h.length>=L)return R(!0);break}u.push({type:\"Quotes\",code:\"InvalidQuotes\",message:\"Trailing quote on quoted field is malformed\",row:h.length,index:M}),m++}}else m++}return E();function b(e){h.push(e),d=M}function w(e){var t=0;if(-1!==e){var i=a.substring(m+1,e);i&&\"\"===i.trim()&&(t=i.length)}return t}function E(e){return i||(void 0===e&&(e=a.substring(M)),f.push(e),M=r,b(f),o&&S()),R()}function C(e){M=e,b(f),f=[],g=a.indexOf(I,M)}function R(e){return{data:h,errors:u,meta:{delimiter:D,linebreak:I,aborted:j,truncated:!!e,cursor:d+(t||0)}}}function S(){A(R()),h=[],u=[]}function x(e,t,i){var r={nextDelim:void 0,quoteSearch:void 0},n=a.indexOf(O,t+1);if(t<e&&e<n&&(n<i||-1===i)){var s=a.indexOf(D,n);if(-1===s)return r;n<s&&(n=a.indexOf(O,n+1)),r=x(s,n,i)}else r={nextDelim:e,quoteSearch:t};return r}},this.abort=function(){j=!0},this.getCharIndex=function(){return M}}function _(e){var t=e.data,i=a[t.workerId],r=!1;if(t.error)i.userError(t.error,t.file);else if(t.results&&t.results.data){var n={abort:function(){r=!0,m(t.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:v,resume:v};if(U(i.userStep)){for(var s=0;s<t.results.data.length&&(i.userStep({data:t.results.data[s],errors:t.results.errors,meta:t.results.meta},n),!r);s++);delete t.results}else U(i.userChunk)&&(i.userChunk(t.results,n,t.file),delete t.results)}t.finished&&!r&&m(t.workerId,t.results)}function m(e,t){var i=a[e];U(i.userComplete)&&i.userComplete(t),i.terminate(),delete a[e]}function v(){throw new Error(\"Not implemented.\")}function E(e){if(\"object\"!=typeof e||null===e)return e;var t=Array.isArray(e)?[]:{};for(var i in e)t[i]=E(e[i]);return t}function y(e,t){return function(){e.apply(t,arguments)}}function U(e){return\"function\"==typeof e}return o&&(f.onmessage=function(e){var t=e.data;void 0===b.WORKER_ID&&t&&(b.WORKER_ID=t.workerId);if(\"string\"==typeof t.input)f.postMessage({workerId:b.WORKER_ID,results:b.parse(t.input,t.config),finished:!0});else if(f.File&&t.input instanceof File||t.input instanceof Object){var i=b.parse(t.input,t.config);i&&f.postMessage({workerId:b.WORKER_ID,results:i,finished:!0})}}),(l.prototype=Object.create(u.prototype)).constructor=l,(c.prototype=Object.create(u.prototype)).constructor=c,(p.prototype=Object.create(p.prototype)).constructor=p,(g.prototype=Object.create(u.prototype)).constructor=g,b});","//\n// An iterable that captures an iterator (e.g. from a generator function)\n// and caches it to make it resusable \n// (iterators or the output of a generator is generally not reusable).\n//\n\nimport { CachedIterator } from '../iterators/cached-iterator';\n\nexport class CachedIteratorIterable<T> implements Iterable<T> {\n\n    private cached: T[] = [];\n\n    constructor(private iterator: Iterator<T>) {\n    }\n\n    [Symbol.iterator](): Iterator<any> {\n        return new CachedIterator<T>(this);\n    }\n\n    //\n    // Gets from the cache or populates the cache.\n    //\n    _next(index: number): IteratorResult<T> {\n\n        if (index >= this.cached.length) {\n            // Beyond the cache.\n            const result = this.iterator.next();\n            if (result.done) {\n                // Finished.\n                return ({ done: true } as IteratorResult<T>)  // <= explicit cast here!;\n            }\n\n            // Cache result and return it.\n            this.cached.push(result.value);\n        }\n\n        return {\n            done: false, \n            value: this.cached[index],\n        };\n    }\n}\n\n\n","!function(t,n){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=n():\"function\"==typeof define&&define.amd?define(n):t.dayjs_plugin_customParseFormat=n()}(this,function(){\"use strict\";var t,n=/(\\[[^[]*\\])|([-:/.()\\s]+)|(A|a|YYYY|YY?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g,e=/\\d\\d/,r=/\\d\\d?/,o=/\\d*[^\\s\\d-:/.()]+/;var s=function(t){return function(n){this[t]=+n}},i=[/[+-]\\d\\d:?\\d\\d/,function(t){var n,e;(this.zone||(this.zone={})).offset=(n=t.match(/([+-]|\\d\\d)/g),0===(e=60*n[1]+ +n[2])?0:\"+\"===n[0]?-e:e)}],a={A:[/[AP]M/,function(t){this.afternoon=\"PM\"===t}],a:[/[ap]m/,function(t){this.afternoon=\"pm\"===t}],S:[/\\d/,function(t){this.milliseconds=100*+t}],SS:[e,function(t){this.milliseconds=10*+t}],SSS:[/\\d{3}/,function(t){this.milliseconds=+t}],s:[r,s(\"seconds\")],ss:[r,s(\"seconds\")],m:[r,s(\"minutes\")],mm:[r,s(\"minutes\")],H:[r,s(\"hours\")],h:[r,s(\"hours\")],HH:[r,s(\"hours\")],hh:[r,s(\"hours\")],D:[r,s(\"day\")],DD:[e,s(\"day\")],Do:[o,function(n){var e=t.ordinal,r=n.match(/\\d+/);if(this.day=r[0],e)for(var o=1;o<=31;o+=1)e(o).replace(/\\[|\\]/g,\"\")===n&&(this.day=o)}],M:[r,s(\"month\")],MM:[e,s(\"month\")],MMM:[o,function(n){var e=t,r=e.months,o=e.monthsShort,s=o?o.findIndex(function(t){return t===n}):r.findIndex(function(t){return t.substr(0,3)===n});if(s<0)throw new Error;this.month=s+1}],MMMM:[o,function(n){var e=t.months.indexOf(n);if(e<0)throw new Error;this.month=e+1}],Y:[/[+-]?\\d+/,s(\"year\")],YY:[e,function(t){t=+t,this.year=t+(t>68?1900:2e3)}],YYYY:[/\\d{4}/,s(\"year\")],Z:i,ZZ:i};var u=function(t,e,r){try{var o=function(t){for(var e=t.match(n),r=e.length,o=0;o<r;o+=1){var s=e[o],i=a[s],u=i&&i[0],f=i&&i[1];e[o]=f?{regex:u,parser:f}:s.replace(/^\\[|\\]$/g,\"\")}return function(t){for(var n={},o=0,s=0;o<r;o+=1){var i=e[o];if(\"string\"==typeof i)s+=i.length;else{var a=i.regex,u=i.parser,f=t.substr(s),h=a.exec(f)[0];u.call(n,h),s+=h.length}}return function(t){var n=t.afternoon;if(void 0!==n){var e=t.hours;n?e<12&&(t.hours+=12):12===e&&(t.hours=0),delete t.afternoon}}(n),n}}(e)(t),s=o.year,i=o.month,u=o.day,f=o.hours,h=o.minutes,d=o.seconds,c=o.milliseconds,m=o.zone;if(m)return new Date(Date.UTC(s,i-1,u,f||0,h||0,d||0,c||0)+60*m.offset*1e3);var l=new Date,v=s||l.getFullYear(),p=i>0?i-1:l.getMonth(),M=u||l.getDate(),y=f||0,D=h||0,g=d||0,Y=c||0;return r?new Date(Date.UTC(v,p,M,y,D,g,Y)):new Date(v,p,M,y,D,g,Y)}catch(t){return new Date(\"\")}};return function(n,e,r){var o=e.prototype,s=o.parse;o.parse=function(n){var e=n.date,o=n.format,i=n.pl,a=n.utc;this.$u=a,o?(t=i?r.Ls[i]:this.$locale(),this.$d=u(e,o,a),this.init(n)):s.call(this,n)}}});\n","//\n// An iterator that returns no values.\n//\n\nexport class EmptyIterator implements Iterator<any> {\n\n    next(): IteratorResult<any> {\n        return {\n            done: true,\n            value: null\n        };\n    }\n}","//\n// An iterator that simply counts up from zero.\n// This creates the default index in Data-Forge.\n//\n\nexport class CountIterator implements Iterator<number> {\n\n    index = 0;\n\n    next(): IteratorResult<number> {\n        return {\n            done: false,\n            value: this.index++\n        };\n    }\n\n}","//\n// An iterator that can iterate multiple other iterators at once.\n// This allows iterators to be composed.\n// This is used in Data-Forge to combine iterators for index and values.\n//\n\nexport class MultiIterator implements Iterator<any[]> {\n\n    iterators: Iterator<any>[];\n\n    constructor(iterators: Iterator<any>[]) {\n        this.iterators = iterators;\n    }\n\n    next(): IteratorResult<any[]> {\n\n        if (this.iterators.length === 0) {\n            return {\n                done: true,\n                value: [],\n            };\n        }\n\n        var multiResult = [];\n\n        for (const iterator of this.iterators) {\n            var result = iterator.next();\n            if (result.done) {\n                return { \n                    done: true,\n                    value: [],\n                };\n            }\n\n            multiResult.push(result.value);\n        }\n\n        return {\n            done: false,\n            value: multiResult\n        };\n    }\n\n}","//\n// An iterator that applies a selector function to each item.\n//\n\nexport type SelectorFn<ValueT, ToT> = (value: ValueT, index: number) => ToT;\n\nexport class SelectIterator<ValueT, ToT> implements Iterator<ToT> {\n\n    iterator: Iterator<ValueT>;\n    selector: SelectorFn<ValueT, ToT>;\n    index = 0;\n\n    constructor(iterator: Iterator<ValueT>, selector: SelectorFn<ValueT, ToT>) {\n        this.iterator = iterator;\n        this.selector = selector;\n    }\n\n    next(): IteratorResult<ToT> {\n        var result = this.iterator.next();\n        if (result.done) {\n            // https://github.com/Microsoft/TypeScript/issues/8938\n            return ({ done: true } as IteratorResult<ToT>)  // <= explicit cast here!;\n        }\n\n        return {\n            done: false,\n            value: this.selector(result.value, this.index++)\n        };\n    }\n}","//\n// An iterator that applies a selector function to each item.\n//\n\nexport type SelectorFn<ValueT, ToT> = (value: ValueT, index: number) => Iterable<ToT>;\n\nexport class SelectManyIterator<ValueT, ToT> implements Iterator<ToT> {\n\n    iterator: Iterator<ValueT>;\n    outputIterator: Iterator<ToT> | null;\n    selector: SelectorFn<ValueT, ToT>;\n    index = 0;\n\n    constructor(iterator: Iterator<ValueT>, selector: SelectorFn<ValueT, ToT>) {\n        this.iterator = iterator;\n        this.selector = selector;\n        this.outputIterator = null;\n    }\n\n    next(): IteratorResult<ToT> {     \n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            if (this.outputIterator === null) {\n                var result = this.iterator.next();\n                if (result.done) {\n                    // https://github.com/Microsoft/TypeScript/issues/8938\n                    return ({ done: true } as IteratorResult<ToT>)  // <= explicit cast here!;\n                }\n\n                const outputIterable = this.selector(result.value, this.index++);\n                this.outputIterator = outputIterable[Symbol.iterator]();\n            }\n\n            var outputResult = this.outputIterator!.next();\n            if (outputResult.done) {\n                this.outputIterator = null;\n                continue;\n            }\n            else {\n                return outputResult;\n            }\n        }   \n    }\n}","//\n// An iterator that a sequence of elements while a predicate function returns true.\n//\n\nexport class TakeIterator<T> implements Iterator<T> {\n\n    childIterator: Iterator<T>;\n    numElements: number;\n\n    constructor(childIterator: Iterator<T>, numElements: number) {\n        this.childIterator = childIterator;\n        this.numElements = numElements;\n    }\n\n    next(): IteratorResult<T> {\n        if (this.numElements <= 0) {\n            // https://github.com/Microsoft/TypeScript/issues/8938\n            return ({ done: true } as IteratorResult<T>)  // <= explicit cast here!;\n        }\n\n        --this.numElements;\n        return this.childIterator.next();\n    }\n}","//\n// An iterator that takes a sequence of elements while a predicate function returns true.\n//\n\n/**\n * A predicate function, returns true or false based on input.\n */\nexport type PredicateFn<InputT> = (value: InputT) => boolean;\n\nexport class TakeWhileIterator<T> implements Iterator<T> {\n\n    childIterator: Iterator<T>;\n    predicate: PredicateFn<T>;\n    done = false;\n\n    constructor(childIterator: Iterator<T>, predicate: PredicateFn<T>) {\n        this.childIterator = childIterator;\n        this.predicate = predicate;\n    }\n\n    next(): IteratorResult<T> {\n        if (!this.done) {\n            var result = this.childIterator.next();\n            if (result.done) {\n                this.done = true;\n            }\n            else if (this.predicate(result.value)) {\n                return result;\n            }\n            else {\n                this.done = true;\n            }\n        }\n\n        // https://github.com/Microsoft/TypeScript/issues/8938\n        return ({ done: true } as IteratorResult<T>)  // <= explicit cast here!;\n    }\n}","//\n// An iterator that takes elements from a child iterator based on a predicate function.\n//\n\n/**\n * A predicate function, returns true or false based on input.\n */\nexport type PredicateFn<InputT> = (value: InputT) => boolean;\n\nexport class WhereIterator<T> implements Iterator<T> {\n\n    childIterator: Iterator<T>;\n    predicate: PredicateFn<T>;\n\n    constructor(childIterator: Iterator<T>, predicate: PredicateFn<T>) {\n        this.childIterator = childIterator;\n        this.predicate = predicate;\n    }\n\n    next(): IteratorResult<T> {\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            var result = this.childIterator.next();\n            if (result.done) {\n                return result;\n            }\n\n            if (this.predicate(result.value)) {\n                // It matches the predicate.\n                return result;\n            }\n        }\n    }\n}","//\n// An iterator that concatenates multiple iterables.\n//\n\nexport class ConcatIterator<T> implements Iterator<T> {\n\n    iterables: Iterable<Iterable<T>>\n    iterator: Iterator<Iterable<T>>;\n    curIterator: Iterator<T> | null = null;\n\n    constructor(iterables: Iterable<Iterable<T>>) {\n        this.iterables = iterables;\n        this.iterator = iterables[Symbol.iterator]();\n        this.moveToNextIterable();\n    }\n\n    //\n    // Move onto the next iterable.\n    //\n    private moveToNextIterable () {\n        const nextIterable = this.iterator.next();\n        if (nextIterable.done) {\n            this.curIterator = null;\n        }\n        else {\n            this.curIterator = nextIterable.value[Symbol.iterator]();\n        }        \n    }\n\n    next(): IteratorResult<T> {\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            if (this.curIterator == null) {\n                // Finished iterating all sub-iterators.\n                // https://github.com/Microsoft/TypeScript/issues/8938\n                return ({ done: true } as IteratorResult<T>)  // <= explicit cast here!;\n            }\n\n            const result = this.curIterator.next();\n            if (!result.done) {\n                return result; // Found a valid result from the current iterable.    \n            }\n\n            // Find the next non empty iterable.\n            this.moveToNextIterable();\n        }\n    }\n\n}","//\n// Iterates an underlying iterable in the 'windows'.\n//\n\nimport { SeriesWindowIterator } from '../iterators/series-window-iterator';\nimport { ISeries, WhichIndex } from '../series';\n\nexport class SeriesWindowIterable<IndexT, ValueT> implements Iterable<[IndexT,ISeries<IndexT, ValueT>]> {\n\n    iterable: Iterable<[IndexT, ValueT]>;\n    period: number;\n    whichIndex: WhichIndex;\n\n    constructor(iterable: Iterable<[IndexT, ValueT]>, period: number, whichIndex: WhichIndex) {\n        this.iterable = iterable;\n        this.period = period;\n        this.whichIndex = whichIndex;\n    }\n\n    [Symbol.iterator](): Iterator<[IndexT,ISeries<IndexT, ValueT>]> {\n        return new SeriesWindowIterator(this.iterable, this.period, this.whichIndex);\n    }\n}","//\n// Iterates an underlying iterable in the 'windows'.\n//\n\nimport { TakeIterable } from '../iterables/take-iterable';\nimport { SkipIterable } from '../iterables/skip-iterable';\nimport { Series, ISeries, WhichIndex } from '../series';\n\nexport class SeriesWindowIterator<IndexT, ValueT> implements Iterator<[IndexT,ISeries<IndexT, ValueT>]> {\n\n    iterable: Iterable<[IndexT, ValueT]>;\n    iterator: Iterator<[IndexT, ValueT]> | undefined;\n    period: number;\n    whichIndex: WhichIndex;\n    \n    constructor(iterable: Iterable<[IndexT, ValueT]>, period: number, whichIndex: WhichIndex) {\n        this.iterable = iterable;\n        this.period = period;\n        this.whichIndex = whichIndex;\n    }\n\n    next(): IteratorResult<[IndexT,ISeries<IndexT, ValueT>]> {\n\n        if (!this.iterator) {\n            this.iterator = this.iterable[Symbol.iterator]();\n        }\n\n        const curWindow = [];\n\n        for (let i = 0; i < this.period; ++i) {\n            const curPos = this.iterator.next();\n            if (curPos.done) {\n                // Underlying iterator is finished.\n                break;\n            }\n            curWindow.push(curPos.value);\n        }\n\n        if (curWindow.length === 0) {\n            // Underlying iterator doesn't have required number of elements.\n            return ({ done: true } as IteratorResult<[IndexT,ISeries<IndexT, ValueT>]>);\n        }\n    \n        const window = new Series<IndexT, ValueT>({\n            pairs: curWindow\n        });\n\n        return {\n            //TODO: The way the index is figured out could have much better performance.\n            value: [this.whichIndex === WhichIndex.Start ? window.getIndex().first() : window.getIndex().last(), window],\n            done: false,\n        };\n\n    }\n}","//\n// An iterator that zips together each set of elements in child iterables.\n//\nimport { Series, ISeries } from '../series';\n\nexport type ZipFn<ValueT, ReturnT> = (input: ISeries<number, ValueT>) => ReturnT;\n\nexport class ZipIterator<ValueT, ReturnT> implements Iterator<ReturnT> {\n\n    iterators: Iterator<ValueT>[];\n    zipper: ZipFn<ValueT, ReturnT>;\n\n    constructor(iterables: Iterable<ValueT>[], zipper: ZipFn<ValueT, ReturnT>) {\n        this.iterators = iterables.map(iterable => iterable[Symbol.iterator]());\n        this.zipper = zipper;\n    }\n\n    next(): IteratorResult<ReturnT> {\n        const results = this.iterators.map(iterator => iterator.next());\n        for (const result of results) {\n            if (result.done) {\n                // If any are done we are all done.\n                // https://github.com/Microsoft/TypeScript/issues/8938\n                return ({ done: true } as IteratorResult<ReturnT>)  // <= explicit cast here!;                \n            }\n        }\n\n        const zippedValues = results.map(result => result.value);\n        const zipperInput = new Series<number, ValueT>(zippedValues);\n        return {\n            done: false,\n            value: this.zipper(zipperInput)\n        };\n    }\n}","//\n// An iterator that iterates the only distinct elements of another iterable.\n//\n\n/**\n * A selector function with no index. Transforms a value into another kind of value.\n */\nexport type SelectorFnNoIndex<FromT, ToT> = (value: FromT) => ToT;\n\nexport class DistinctIterator<FromT, ToT> implements Iterator<FromT> {\n\n    iterator: Iterator<FromT>;\n    selector?: SelectorFnNoIndex<FromT, ToT>;\n    valuesAlreadySeen: Set<any> = new Set<any>();\n\n    constructor(iterable: Iterable<FromT>, selector?: SelectorFnNoIndex<FromT, ToT>) {\n        this.iterator = iterable[Symbol.iterator]();\n        this.selector = selector;\n    }\n\n    next(): IteratorResult<FromT> {\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            const result = this.iterator.next();\n            if (result.done) {\n                return ({ done: true } as IteratorResult<FromT>);\n            }\n\n            let potentialOutput: ToT;\n            if (this.selector) {\n                potentialOutput = this.selector(result.value);\n            }\n            else {\n                potentialOutput = <ToT> <any> result.value;\n            }\n\n           \n            if (this.valuesAlreadySeen.has(potentialOutput)) {\n                // Already seen this value.\n                // Skip it and continue to next item.\n                continue;\n            }\n            \n            this.valuesAlreadySeen.add(potentialOutput);\n            return {\n                done: false,\n                value: result.value,\n            };\n        }\n    }\n}","//\n// Iterates an underlying iterable in the 'windows'.\n//\n\nimport { SeriesRollingWindowIterator } from '../iterators/series-rolling-window-iterator';\nimport { ISeries, WhichIndex } from '../series';\n\nexport class SeriesRollingWindowIterable<IndexT, ValueT> implements Iterable<[IndexT,ISeries<IndexT, ValueT>]> {\n\n    iterable: Iterable<[IndexT, ValueT]>;\n    period: number;\n    whichIndex: WhichIndex;\n\n    constructor(iterable: Iterable<[IndexT, ValueT]>, period: number, whichIndex: WhichIndex) {\n        this.iterable = iterable;\n        this.period = period;\n        this.whichIndex = whichIndex;\n    }\n\n    [Symbol.iterator](): Iterator<[IndexT,ISeries<IndexT, ValueT>]> {\n        return new SeriesRollingWindowIterator(this.iterable, this.period, this.whichIndex);\n    }\n}","//\n// Iterates an underlying iterable in the 'windows'.\n//\n\nimport { TakeIterable } from '../iterables/take-iterable';\nimport { SkipIterable } from '../iterables/skip-iterable';\nimport { Series, ISeries, WhichIndex } from '../series';\n\nexport class SeriesRollingWindowIterator<IndexT, ValueT> implements Iterator<[IndexT,ISeries<IndexT, ValueT>]> {\n\n    iterable: Iterable<[IndexT, ValueT]>;\n    iterator: Iterator<[IndexT, ValueT]> | undefined;\n    period: number;\n    whichIndex: WhichIndex;\n    curWindow: [IndexT, ValueT][] | undefined; \n    \n    constructor(iterable: Iterable<[IndexT, ValueT]>, period: number, whichIndex: WhichIndex) {\n        this.iterable = iterable;\n        this.period = period;\n        this.whichIndex = whichIndex;\n    }\n\n    next(): IteratorResult<[IndexT,ISeries<IndexT, ValueT>]> {\n\n        if (!this.curWindow) {\n            this.curWindow = [];\n            this.iterator = this.iterable[Symbol.iterator]();\n            for (let i = 0; i < this.period; ++i) {\n                const curPos = this.iterator.next();\n                if (curPos.done) {\n                    // Underlying iterator doesn't have required number of elements.\n                    return ({ done: true } as IteratorResult<[IndexT,ISeries<IndexT, ValueT>]>);\n                }\n                this.curWindow.push(curPos.value);\n            }\n        }\n        else {\n            this.curWindow.shift(); // Remove first item from window.\n            \n            const curPos = this.iterator!.next();\n            if (curPos.done) {\n                // Underlying iterator doesn't have enough elements left.\n                return ({ done: true } as IteratorResult<[IndexT,ISeries<IndexT, ValueT>]>);\n            }\n\n            this.curWindow.push(curPos.value); // Add next item to window.\n        }\n\n        const window = new Series<IndexT, ValueT>({\n            pairs: this.curWindow\n        });\n\n        return {\n            //TODO: The way the index is figured out could have much better performance.\n            value: [this.whichIndex === WhichIndex.Start ? window.getIndex().first() : window.getIndex().last(), window],\n            done: false,\n        };\n    }\n}","//\n// Iterates an underlying iterable in the 'windows'.\n//\n\nimport { SeriesVariableWindowIterator, ComparerFn } from '../iterators/series-variable-window-iterator';\nimport { ISeries } from '../series';\n\nexport class SeriesVariableWindowIterable<IndexT, ValueT> implements Iterable<ISeries<IndexT, ValueT>> {\n\n    iterable: Iterable<[IndexT, ValueT]>;\n    comparer: ComparerFn<ValueT>;\n\n    constructor(iterable: Iterable<[IndexT, ValueT]>, comparer: ComparerFn<ValueT>) {\n        this.iterable = iterable;\n        this.comparer = comparer;\n    }\n\n    [Symbol.iterator](): Iterator<ISeries<IndexT, ValueT>> {\n        return new SeriesVariableWindowIterator(this.iterable, this.comparer);\n    }\n}","//\n// Iterates an underlying iterable in the 'windows'.\n//\n\nimport { TakeIterable } from '../iterables/take-iterable';\nimport { SkipIterable } from '../iterables/skip-iterable';\nimport { Series, ISeries } from '../series';\n\n/**\n * Compares to values and returns true if they are equivalent.\n */\nexport type ComparerFn<ValueT> = (a: ValueT, b: ValueT) => boolean;\n\nexport class SeriesVariableWindowIterator<IndexT, ValueT> implements Iterator<ISeries<IndexT, ValueT>> {\n\n    iterator: Iterator<[IndexT, ValueT]>;\n    nextValue: IteratorResult<[IndexT, ValueT]>;\n    comparer: ComparerFn<ValueT>\n    \n    constructor(iterable: Iterable<[IndexT, ValueT]>, comparer: ComparerFn<ValueT>) {\n        this.iterator = iterable[Symbol.iterator]();\n        this.nextValue = this.iterator.next();\n        this.comparer = comparer;\n    }\n\n    next(): IteratorResult<ISeries<IndexT, ValueT>> {\n\n        if (this.nextValue.done) {\n            // Nothing more to read.\n            // https://github.com/Microsoft/TypeScript/issues/8938\n            return ({ done: true } as IteratorResult<ISeries<IndexT, ValueT>>)  // <= explicit cast here!;\n        }\n\n        const pairs = [\n            this.nextValue.value,\n        ];\n\n        let prevValue = this.nextValue.value;\n\n        // Pull values until there is one that doesn't compare.\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            this.nextValue = this.iterator.next();\n            if (this.nextValue.done) {\n                break; // No more values.\n            }\n\n            if (!this.comparer(prevValue[1], this.nextValue.value[1])) {\n                prevValue = this.nextValue.value;\n                break; // Doesn't compare. Start a new window.\n            }      \n            \n            pairs.push(this.nextValue.value);\n            prevValue = this.nextValue.value;\n        }\n\n        const window = new Series<IndexT, ValueT>({\n            pairs: pairs,\n        });\n\n        return {\n            value: window,\n            done: false,\n        };\n    }\n}","//\n// An iterator to extact an element from an array.\n//\n\nexport class ExtractElementIterator implements Iterator<any> {\n\n    iterator: Iterator<any[]>;\n    extractIndex: number;\n\n    constructor(iterator: Iterator<any[]>, extractIndex: number) {\n        this.iterator = iterator;\n        this.extractIndex = extractIndex;\n    }\n\n    next(): IteratorResult<any> {\n        \n        var result = this.iterator.next();\n        if (result.done) {\n            return result;\n        }\n        else {\n            return {\n                done: false,\n                value: result.value[this.extractIndex]\n            };\n        }\n    }\n}","//\n// An iterator that skips a number of values.\n//\n\nexport class SkipIterator implements Iterator<any> {\n\n    iterator: Iterator<any>;\n    numValues: number;\n\n    constructor(iterator: Iterator<any>, numValues: number) {\n        this.iterator = iterator;\n        this.numValues = numValues;\n    }\n\n    next(): IteratorResult<any> {\n        while (--this.numValues >= 0) {\n            var result = this.iterator.next();\n            if (result.done) {\n                return result;\n            }\n        }\n\n        return this.iterator.next();\n    }\n}","//\n// An iterator that skips a sequence of elements while a predicate function returns true.\n//\n\n/**\n * A predicate function, returns true or false based on input.\n */\nexport type PredicateFn<InputT> = (value: InputT) => boolean;\n\nexport class SkipWhileIterator<T> implements Iterator<T> {\n\n    childIterator: Iterator<T>;\n    predicate: PredicateFn<T>;\n    doneSkipping = false;\n\n    constructor(childIterator: Iterator<T>, predicate: PredicateFn<T>) {\n        this.childIterator = childIterator;\n        this.predicate = predicate;\n    }\n\n    next(): IteratorResult<T> {\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            var result = this.childIterator.next();\n            if (result.done) {\n                return result; // Done.\n            }\n\n            if (!this.doneSkipping && this.predicate(result.value)) {\n                continue; // Skip it.\n            }\n\n            // It matches, stop skipping.\n            this.doneSkipping = true;\n            return result;\n        }\n    }\n}","\"use strict\"\n\nvar defaults = require('defaults')\nvar combining = require('./combining')\n\nvar DEFAULTS = {\n  nul: 0,\n  control: 0\n}\n\nmodule.exports = function wcwidth(str) {\n  return wcswidth(str, DEFAULTS)\n}\n\nmodule.exports.config = function(opts) {\n  opts = defaults(opts || {}, DEFAULTS)\n  return function wcwidth(str) {\n    return wcswidth(str, opts)\n  }\n}\n\n/*\n *  The following functions define the column width of an ISO 10646\n *  character as follows:\n *  - The null character (U+0000) has a column width of 0.\n *  - Other C0/C1 control characters and DEL will lead to a return value\n *    of -1.\n *  - Non-spacing and enclosing combining characters (general category\n *    code Mn or Me in the\n *    Unicode database) have a column width of 0.\n *  - SOFT HYPHEN (U+00AD) has a column width of 1.\n *  - Other format characters (general category code Cf in the Unicode\n *    database) and ZERO WIDTH\n *    SPACE (U+200B) have a column width of 0.\n *  - Hangul Jamo medial vowels and final consonants (U+1160-U+11FF)\n *    have a column width of 0.\n *  - Spacing characters in the East Asian Wide (W) or East Asian\n *    Full-width (F) category as\n *    defined in Unicode Technical Report #11 have a column width of 2.\n *  - All remaining characters (including all printable ISO 8859-1 and\n *    WGL4 characters, Unicode control characters, etc.) have a column\n *    width of 1.\n *  This implementation assumes that characters are encoded in ISO 10646.\n*/\n\nfunction wcswidth(str, opts) {\n  if (typeof str !== 'string') return wcwidth(str, opts)\n\n  var s = 0\n  for (var i = 0; i < str.length; i++) {\n    var n = wcwidth(str.charCodeAt(i), opts)\n    if (n < 0) return -1\n    s += n\n  }\n\n  return s\n}\n\nfunction wcwidth(ucs, opts) {\n  // test for 8-bit control characters\n  if (ucs === 0) return opts.nul\n  if (ucs < 32 || (ucs >= 0x7f && ucs < 0xa0)) return opts.control\n\n  // binary search in table of non-spacing characters\n  if (bisearch(ucs)) return 0\n\n  // if we arrive here, ucs is not a combining or C0/C1 control character\n  return 1 +\n      (ucs >= 0x1100 &&\n       (ucs <= 0x115f ||                       // Hangul Jamo init. consonants\n        ucs == 0x2329 || ucs == 0x232a ||\n        (ucs >= 0x2e80 && ucs <= 0xa4cf &&\n         ucs != 0x303f) ||                     // CJK ... Yi\n        (ucs >= 0xac00 && ucs <= 0xd7a3) ||    // Hangul Syllables\n        (ucs >= 0xf900 && ucs <= 0xfaff) ||    // CJK Compatibility Ideographs\n        (ucs >= 0xfe10 && ucs <= 0xfe19) ||    // Vertical forms\n        (ucs >= 0xfe30 && ucs <= 0xfe6f) ||    // CJK Compatibility Forms\n        (ucs >= 0xff00 && ucs <= 0xff60) ||    // Fullwidth Forms\n        (ucs >= 0xffe0 && ucs <= 0xffe6) ||\n        (ucs >= 0x20000 && ucs <= 0x2fffd) ||\n        (ucs >= 0x30000 && ucs <= 0x3fffd)));\n}\n\nfunction bisearch(ucs) {\n  var min = 0\n  var max = combining.length - 1\n  var mid\n\n  if (ucs < combining[0][0] || ucs > combining[max][1]) return false\n\n  while (max >= min) {\n    mid = Math.floor((min + max) / 2)\n    if (ucs > combining[mid][1]) min = mid + 1\n    else if (ucs < combining[mid][0]) max = mid - 1\n    else return true\n  }\n\n  return false\n}\n","var clone = require('clone');\n\nmodule.exports = function(options, defaults) {\n  options = options || {};\n\n  Object.keys(defaults).forEach(function(key) {\n    if (typeof options[key] === 'undefined') {\n      options[key] = clone(defaults[key]);\n    }\n  });\n\n  return options;\n};","var clone = (function() {\n'use strict';\n\n/**\n * Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n*/\nfunction clone(parent, circular, depth, prototype) {\n  var filter;\n  if (typeof circular === 'object') {\n    depth = circular.depth;\n    prototype = circular.prototype;\n    filter = circular.filter;\n    circular = circular.circular\n  }\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  var allParents = [];\n  var allChildren = [];\n\n  var useBuffer = typeof Buffer != 'undefined';\n\n  if (typeof circular == 'undefined')\n    circular = true;\n\n  if (typeof depth == 'undefined')\n    depth = Infinity;\n\n  // recurse this function so we don't reset allParents and allChildren\n  function _clone(parent, depth) {\n    // cloning null always returns null\n    if (parent === null)\n      return null;\n\n    if (depth == 0)\n      return parent;\n\n    var child;\n    var proto;\n    if (typeof parent != 'object') {\n      return parent;\n    }\n\n    if (clone.__isArray(parent)) {\n      child = [];\n    } else if (clone.__isRegExp(parent)) {\n      child = new RegExp(parent.source, __getRegExpFlags(parent));\n      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n    } else if (clone.__isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else if (useBuffer && Buffer.isBuffer(parent)) {\n      if (Buffer.allocUnsafe) {\n        // Node.js >= 4.5.0\n        child = Buffer.allocUnsafe(parent.length);\n      } else {\n        // Older Node.js versions\n        child = new Buffer(parent.length);\n      }\n      parent.copy(child);\n      return child;\n    } else {\n      if (typeof prototype == 'undefined') {\n        proto = Object.getPrototypeOf(parent);\n        child = Object.create(proto);\n      }\n      else {\n        child = Object.create(prototype);\n        proto = prototype;\n      }\n    }\n\n    if (circular) {\n      var index = allParents.indexOf(parent);\n\n      if (index != -1) {\n        return allChildren[index];\n      }\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    for (var i in parent) {\n      var attrs;\n      if (proto) {\n        attrs = Object.getOwnPropertyDescriptor(proto, i);\n      }\n\n      if (attrs && attrs.set == null) {\n        continue;\n      }\n      child[i] = _clone(parent[i], depth - 1);\n    }\n\n    return child;\n  }\n\n  return _clone(parent, depth);\n}\n\n/**\n * Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.\n */\nclone.clonePrototype = function clonePrototype(parent) {\n  if (parent === null)\n    return null;\n\n  var c = function () {};\n  c.prototype = parent;\n  return new c();\n};\n\n// private utility functions\n\nfunction __objToStr(o) {\n  return Object.prototype.toString.call(o);\n};\nclone.__objToStr = __objToStr;\n\nfunction __isDate(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Date]';\n};\nclone.__isDate = __isDate;\n\nfunction __isArray(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Array]';\n};\nclone.__isArray = __isArray;\n\nfunction __isRegExp(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';\n};\nclone.__isRegExp = __isRegExp;\n\nfunction __getRegExpFlags(re) {\n  var flags = '';\n  if (re.global) flags += 'g';\n  if (re.ignoreCase) flags += 'i';\n  if (re.multiline) flags += 'm';\n  return flags;\n};\nclone.__getRegExpFlags = __getRegExpFlags;\n\nreturn clone;\n})();\n\nif (typeof module === 'object' && module.exports) {\n  module.exports = clone;\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","module.exports = [\n    [ 0x0300, 0x036F ], [ 0x0483, 0x0486 ], [ 0x0488, 0x0489 ],\n    [ 0x0591, 0x05BD ], [ 0x05BF, 0x05BF ], [ 0x05C1, 0x05C2 ],\n    [ 0x05C4, 0x05C5 ], [ 0x05C7, 0x05C7 ], [ 0x0600, 0x0603 ],\n    [ 0x0610, 0x0615 ], [ 0x064B, 0x065E ], [ 0x0670, 0x0670 ],\n    [ 0x06D6, 0x06E4 ], [ 0x06E7, 0x06E8 ], [ 0x06EA, 0x06ED ],\n    [ 0x070F, 0x070F ], [ 0x0711, 0x0711 ], [ 0x0730, 0x074A ],\n    [ 0x07A6, 0x07B0 ], [ 0x07EB, 0x07F3 ], [ 0x0901, 0x0902 ],\n    [ 0x093C, 0x093C ], [ 0x0941, 0x0948 ], [ 0x094D, 0x094D ],\n    [ 0x0951, 0x0954 ], [ 0x0962, 0x0963 ], [ 0x0981, 0x0981 ],\n    [ 0x09BC, 0x09BC ], [ 0x09C1, 0x09C4 ], [ 0x09CD, 0x09CD ],\n    [ 0x09E2, 0x09E3 ], [ 0x0A01, 0x0A02 ], [ 0x0A3C, 0x0A3C ],\n    [ 0x0A41, 0x0A42 ], [ 0x0A47, 0x0A48 ], [ 0x0A4B, 0x0A4D ],\n    [ 0x0A70, 0x0A71 ], [ 0x0A81, 0x0A82 ], [ 0x0ABC, 0x0ABC ],\n    [ 0x0AC1, 0x0AC5 ], [ 0x0AC7, 0x0AC8 ], [ 0x0ACD, 0x0ACD ],\n    [ 0x0AE2, 0x0AE3 ], [ 0x0B01, 0x0B01 ], [ 0x0B3C, 0x0B3C ],\n    [ 0x0B3F, 0x0B3F ], [ 0x0B41, 0x0B43 ], [ 0x0B4D, 0x0B4D ],\n    [ 0x0B56, 0x0B56 ], [ 0x0B82, 0x0B82 ], [ 0x0BC0, 0x0BC0 ],\n    [ 0x0BCD, 0x0BCD ], [ 0x0C3E, 0x0C40 ], [ 0x0C46, 0x0C48 ],\n    [ 0x0C4A, 0x0C4D ], [ 0x0C55, 0x0C56 ], [ 0x0CBC, 0x0CBC ],\n    [ 0x0CBF, 0x0CBF ], [ 0x0CC6, 0x0CC6 ], [ 0x0CCC, 0x0CCD ],\n    [ 0x0CE2, 0x0CE3 ], [ 0x0D41, 0x0D43 ], [ 0x0D4D, 0x0D4D ],\n    [ 0x0DCA, 0x0DCA ], [ 0x0DD2, 0x0DD4 ], [ 0x0DD6, 0x0DD6 ],\n    [ 0x0E31, 0x0E31 ], [ 0x0E34, 0x0E3A ], [ 0x0E47, 0x0E4E ],\n    [ 0x0EB1, 0x0EB1 ], [ 0x0EB4, 0x0EB9 ], [ 0x0EBB, 0x0EBC ],\n    [ 0x0EC8, 0x0ECD ], [ 0x0F18, 0x0F19 ], [ 0x0F35, 0x0F35 ],\n    [ 0x0F37, 0x0F37 ], [ 0x0F39, 0x0F39 ], [ 0x0F71, 0x0F7E ],\n    [ 0x0F80, 0x0F84 ], [ 0x0F86, 0x0F87 ], [ 0x0F90, 0x0F97 ],\n    [ 0x0F99, 0x0FBC ], [ 0x0FC6, 0x0FC6 ], [ 0x102D, 0x1030 ],\n    [ 0x1032, 0x1032 ], [ 0x1036, 0x1037 ], [ 0x1039, 0x1039 ],\n    [ 0x1058, 0x1059 ], [ 0x1160, 0x11FF ], [ 0x135F, 0x135F ],\n    [ 0x1712, 0x1714 ], [ 0x1732, 0x1734 ], [ 0x1752, 0x1753 ],\n    [ 0x1772, 0x1773 ], [ 0x17B4, 0x17B5 ], [ 0x17B7, 0x17BD ],\n    [ 0x17C6, 0x17C6 ], [ 0x17C9, 0x17D3 ], [ 0x17DD, 0x17DD ],\n    [ 0x180B, 0x180D ], [ 0x18A9, 0x18A9 ], [ 0x1920, 0x1922 ],\n    [ 0x1927, 0x1928 ], [ 0x1932, 0x1932 ], [ 0x1939, 0x193B ],\n    [ 0x1A17, 0x1A18 ], [ 0x1B00, 0x1B03 ], [ 0x1B34, 0x1B34 ],\n    [ 0x1B36, 0x1B3A ], [ 0x1B3C, 0x1B3C ], [ 0x1B42, 0x1B42 ],\n    [ 0x1B6B, 0x1B73 ], [ 0x1DC0, 0x1DCA ], [ 0x1DFE, 0x1DFF ],\n    [ 0x200B, 0x200F ], [ 0x202A, 0x202E ], [ 0x2060, 0x2063 ],\n    [ 0x206A, 0x206F ], [ 0x20D0, 0x20EF ], [ 0x302A, 0x302F ],\n    [ 0x3099, 0x309A ], [ 0xA806, 0xA806 ], [ 0xA80B, 0xA80B ],\n    [ 0xA825, 0xA826 ], [ 0xFB1E, 0xFB1E ], [ 0xFE00, 0xFE0F ],\n    [ 0xFE20, 0xFE23 ], [ 0xFEFF, 0xFEFF ], [ 0xFFF9, 0xFFFB ],\n    [ 0x10A01, 0x10A03 ], [ 0x10A05, 0x10A06 ], [ 0x10A0C, 0x10A0F ],\n    [ 0x10A38, 0x10A3A ], [ 0x10A3F, 0x10A3F ], [ 0x1D167, 0x1D169 ],\n    [ 0x1D173, 0x1D182 ], [ 0x1D185, 0x1D18B ], [ 0x1D1AA, 0x1D1AD ],\n    [ 0x1D242, 0x1D244 ], [ 0xE0001, 0xE0001 ], [ 0xE0020, 0xE007F ],\n    [ 0xE0100, 0xE01EF ]\n]\n","//\n// Iterates an underlying iterable in the 'windows'.\n//\n\nimport { DataFrameWindowIterator } from '../iterators/dataframe-window-iterator';\nimport { IDataFrame } from '../dataframe';\n\nexport class DataFrameWindowIterable<IndexT, ValueT> implements Iterable<IDataFrame<IndexT, ValueT>> {\n\n    columnNames: Iterable<string>;\n    iterable: Iterable<[IndexT, ValueT]>;\n    period: number;\n\n    constructor(columnNames: Iterable<string>, iterable: Iterable<[IndexT, ValueT]>, period: number) {\n        this.columnNames = columnNames;\n        this.iterable = iterable;\n        this.period = period;\n    }\n\n    [Symbol.iterator](): Iterator<IDataFrame<IndexT, ValueT>> {\n        return new DataFrameWindowIterator(this.columnNames, this.iterable, this.period);\n    }\n}","//\n// Iterates an underlying iterable in the 'windows'.\n//\n\nimport { TakeIterable } from '../iterables/take-iterable';\nimport { SkipIterable } from '../iterables/skip-iterable';\nimport { DataFrame, IDataFrame } from '../dataframe';\n\nexport class DataFrameWindowIterator<IndexT, ValueT> implements Iterator<IDataFrame<IndexT, ValueT>> {\n\n    columnNames: Iterable<string>;\n    iterable: Iterable<[IndexT, ValueT]>;\n    iterator: Iterator<[IndexT, ValueT]> | undefined;\n    period: number;\n    \n    constructor(columnNames: Iterable<string>, iterable: Iterable<[IndexT, ValueT]>, period: number) {\n        this.columnNames = columnNames;\n        this.iterable = iterable;\n        this.period = period;\n    }\n\n    next(): IteratorResult<IDataFrame<IndexT, ValueT>> {\n\n        if (!this.iterator) {\n            this.iterator = this.iterable[Symbol.iterator]();\n        }\n        \n        const curWindow = [];\n\n        for (let i = 0; i < this.period; ++i) {\n            const curPos = this.iterator.next();\n            if (curPos.done) {\n                // Underlying iterator is finished.\n                break;\n            }\n            curWindow.push(curPos.value);\n        }\n\n        if (curWindow.length === 0) {\n            // Underlying iterator doesn't have required number of elements.\n            return ({ done: true } as IteratorResult<IDataFrame<IndexT, ValueT>>);\n        }\n    \n        const window = new DataFrame<IndexT, ValueT>({\n            columnNames: this.columnNames,\n            pairs: curWindow\n        });\n\n        return {\n            value: window,\n            done: false,\n        };\n    }\n}","//\n// An iterable that iterates the rows of a CSV file.\n//\n\nimport { CsvRowsIterator } from '../iterators/csv-rows-iterator';\n\nexport class CsvRowsIterable implements Iterable<any> {\n\n    columnNames: Iterable<string>;\n    rows: Iterable<any>;\n\n    constructor(columnNames: Iterable<string>, rows: Iterable<any>) {\n        this.columnNames = columnNames;\n        this.rows = rows;\n    }\n\n    [Symbol.iterator](): Iterator<any> {\n        return new CsvRowsIterator(this.columnNames, this.rows);\n    }\n}","//\n// An iterator that iterates the rows of a CSV file.\n//\n\nexport class CsvRowsIterator implements Iterator<any> {\n\n    columnNames: string[];\n    rowsIterator: Iterator<any>;\n    index = 0;\n\n    constructor(columnNames: Iterable<string>, rowsIterable: Iterable<any>) {\n        this.columnNames = Array.from(columnNames);\n        this.rowsIterator = rowsIterable[Symbol.iterator]();\n    }\n\n    next(): IteratorResult<any> {\n\n        var result = this.rowsIterator.next();\n        if (result.done) {\n            // https://github.com/Microsoft/TypeScript/issues/8938\n            return ({ done: true } as IteratorResult<any>)  // <= explicit cast here!;\n        }\n\n        var row = result.value;\n        var value: any = {};\n        for (var cellIndex = 0; cellIndex < this.columnNames.length; ++cellIndex) {\n            var columnName = this.columnNames[cellIndex];\n            value[columnName] = row[cellIndex];\n        }\n\n        return {\n            done: false, \n            value: value,\n        };\n   }\n}","//\n// Iterates an underlying iterable in the 'windows'.\n//\n\nimport { DataFrameRollingWindowIterator } from '../iterators/dataframe-rolling-window-iterator';\nimport { IDataFrame } from '../dataframe';\n\nexport class DataFrameRollingWindowIterable<IndexT, ValueT> implements Iterable<IDataFrame<IndexT, ValueT>> {\n\n    columnNames: Iterable<string>;\n    iterable: Iterable<[IndexT, ValueT]>;\n    period: number;\n\n    constructor(columnNames: Iterable<string>, iterable: Iterable<[IndexT, ValueT]>, period: number) {\n        this.columnNames = columnNames;\n        this.iterable = iterable;\n        this.period = period;\n    }\n\n    [Symbol.iterator](): Iterator<IDataFrame<IndexT, ValueT>> {\n        return new DataFrameRollingWindowIterator(this.columnNames, this.iterable, this.period);\n    }\n}","//\n// Iterates an underlying iterable in the 'windows'.\n//\n\nimport { TakeIterable } from '../iterables/take-iterable';\nimport { SkipIterable } from '../iterables/skip-iterable';\nimport { DataFrame, IDataFrame } from '../dataframe';\n\nexport class DataFrameRollingWindowIterator<IndexT, ValueT> implements Iterator<IDataFrame<IndexT, ValueT>> {\n\n    columnNames: Iterable<string>;\n    iterable: Iterable<[IndexT, ValueT]>;\n    iterator: Iterator<[IndexT, ValueT]> | undefined;\n    period: number;\n    curWindow: [IndexT, ValueT][] | undefined; \n    \n    constructor(columnNames: Iterable<string>, iterable: Iterable<[IndexT, ValueT]>, period: number) {\n        this.columnNames = columnNames;\n        this.iterable = iterable;\n        this.period = period;\n    }\n\n    next(): IteratorResult<IDataFrame<IndexT, ValueT>> {\n\n        if (!this.curWindow) {\n            this.curWindow = [];\n            this.iterator = this.iterable[Symbol.iterator]();\n            for (let i = 0; i < this.period; ++i) {\n                const curPos = this.iterator.next();\n                if (curPos.done) {\n                    // Underlying iterator doesn't have required number of elements.\n                    return ({ done: true } as IteratorResult<IDataFrame<IndexT, ValueT>>);\n                }\n                this.curWindow.push(curPos.value);\n            }\n        }\n        else {\n            this.curWindow.shift(); // Remove first item from window.\n            \n            const curPos = this.iterator!.next();\n            if (curPos.done) {\n                // Underlying iterator doesn't have enough elements left.\n                return ({ done: true } as IteratorResult<IDataFrame<IndexT, ValueT>>);\n            }\n\n            this.curWindow.push(curPos.value); // Add next item to window.\n        }\n\n        const window = new DataFrame<IndexT, ValueT>({\n            columnNames: this.columnNames,\n            pairs: this.curWindow\n        });\n\n        return {\n            value: window,\n            done: false,\n        };\n    }\n}","//\n// Iterates an underlying iterable in the 'windows'.\n//\n\nimport { DataFrameVariableWindowIterator, ComparerFn } from '../iterators/dataframe-variable-window-iterator';\nimport { IDataFrame } from '../dataframe';\n\nexport class DataFrameVariableWindowIterable<IndexT, ValueT> implements Iterable<IDataFrame<IndexT, ValueT>> {\n\n    columnNames: Iterable<string>;\n    iterable: Iterable<[IndexT, ValueT]>;\n    comparer: ComparerFn<ValueT>;\n\n    constructor(columnNames: Iterable<string>, iterable: Iterable<[IndexT, ValueT]>, comparer: ComparerFn<ValueT>) {\n        this.columnNames = columnNames;\n        this.iterable = iterable;\n        this.comparer = comparer;\n    }\n\n    [Symbol.iterator](): Iterator<IDataFrame<IndexT, ValueT>> {\n        return new DataFrameVariableWindowIterator(this.columnNames, this.iterable, this.comparer);\n    }\n}","//\n// Iterates an underlying iterable in the 'windows'.\n//\n\nimport { TakeIterable } from '../iterables/take-iterable';\nimport { SkipIterable } from '../iterables/skip-iterable';\nimport { DataFrame, IDataFrame } from '../dataframe';\n\n/**\n * Compares to values and returns true if they are equivalent.\n */\nexport type ComparerFn<ValueT> = (a: ValueT, b: ValueT) => boolean;\n\nexport class DataFrameVariableWindowIterator<IndexT, ValueT> implements Iterator<IDataFrame<IndexT, ValueT>> {\n\n    columnNames: Iterable<string>;\n    iterator: Iterator<[IndexT, ValueT]>;\n    nextValue: IteratorResult<[IndexT, ValueT]>;\n    comparer: ComparerFn<ValueT>\n    \n    constructor(columnNames: Iterable<string>, iterable: Iterable<[IndexT, ValueT]>, comparer: ComparerFn<ValueT>) {\n        this.columnNames = columnNames;\n        this.iterator = iterable[Symbol.iterator]();\n        this.nextValue = this.iterator.next();\n        this.comparer = comparer;\n    }\n\n    next(): IteratorResult<IDataFrame<IndexT, ValueT>> {\n\n        if (this.nextValue.done) {\n            // Nothing more to read.\n            // https://github.com/Microsoft/TypeScript/issues/8938\n            return ({ done: true } as IteratorResult<IDataFrame<IndexT, ValueT>>)  // <= explicit cast here!;\n        }\n\n        const pairs = [\n            this.nextValue.value,\n        ];\n\n        let prevValue = this.nextValue.value;\n\n        // Pull values until there is one that doesn't compare.\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            this.nextValue = this.iterator.next();\n            if (this.nextValue.done) {\n                break; // No more values.\n            }\n\n            if (!this.comparer(prevValue[1], this.nextValue.value[1])) {\n                prevValue = this.nextValue.value;   \n                break; // Doesn't compare. Start a new window.\n            }      \n            \n            pairs.push(this.nextValue.value);\n            prevValue = this.nextValue.value;\n        }\n\n        const window = new DataFrame<IndexT, ValueT>({\n            columnNames: this.columnNames,\n            pairs: pairs,\n        });\n\n        return {\n            value: window,\n            done: false,\n        };\n    }\n}","//\n// An iterable that iterates the elements repeatedly.\n//\n\nimport { RepeatIterator } from '../iterators/repeat-iterator';\n\nexport class RepeatIterable<T> implements Iterable<T> {\n\n    iterable: Iterable<T>;\n    count: number;\n\n    constructor(iterable: Iterable<T>, count: number) {\n        this.iterable = iterable\n        this.count = count;\n    }\n\n    [Symbol.iterator](): Iterator<any> {\n        return new RepeatIterator(this.iterable, this.count);\n    }\n}","//\n// An iterator that iterates the elements of an iterable multiple times.\n// Implementation similar to https://numpy.org/doc/stable/reference/generated/numpy.repeat.html\n//\n\nexport class RepeatIterator<T> implements Iterator<T> {\n\n    iterator: Iterator<T>;\n    count: number;\n    repetition = 0;\n    result: IteratorResult<T>;\n\n    constructor(iterable: Iterable<T>, count: number) {\n        this.iterator = iterable[Symbol.iterator]();\n        this.count = count;\n        this.result = this.iterator.next()\n    }\n\n    next(): IteratorResult<T> {\n\n        if (this.count == 0) {\n            return ({ done: true } as IteratorResult<T>);\n        }\n\n        if (this.repetition == this.count) {\n            this.result = this.iterator.next();\n            this.repetition = 0;\n        }\n\n        this.repetition += 1;\n\n        if (this.result.done) {\n            // https://github.com/Microsoft/TypeScript/issues/8938\n            return ({ done: true } as IteratorResult<T>); // <= explicit cast here!;\n        }\n\n        return {\n            done: false,\n            value: this.result.value\n        };\n    }\n\n}","//\n// An iterable that iterates the elements repeatedly.\n//\n\nimport { TileIterator } from '../iterators/tile-iterator';\n\nexport class TileIterable<T> implements Iterable<T> {\n\n    iterable: Iterable<T>;\n    count: number;\n\n    constructor(iterable: Iterable<T>, count: number) {\n        this.iterable = iterable\n        this.count = count;\n    }\n\n    [Symbol.iterator](): Iterator<any> {\n        return new TileIterator(this.iterable, this.count);\n    }\n}","//\n// An iterator that iterates the elements of an iterable multiple times.\n// Implementation similar to - https://numpy.org/doc/stable/reference/generated/numpy.tile.html\n//\n\nexport class TileIterator<T> implements Iterator<T> {\n\n    iterator: Iterator<T>;\n    iterable: Iterable<T>;\n    count = 0;\n    repetition = 0;\n    firstIteration = true;\n\n    constructor(iterable: Iterable<T>, count: number) {\n        this.iterable = iterable;\n        this.iterator = iterable[Symbol.iterator]();\n        this.count = count;\n    }\n\n    next(): IteratorResult<T> {\n\n        let result = this.iterator.next();\n\n        // Return done for empty iterable\n        if (this.firstIteration && result.done) {\n            return ({ done: true } as IteratorResult<T>);\n        }\n\n        this.firstIteration = false;\n\n        if (result.done) {\n            this.repetition += 1;\n            // Reinitialize iterator once iterated completely\n            this.iterator = this.iterable[Symbol.iterator]();\n            \n            result = this.iterator.next();\n        }\n\n        if (this.repetition < this.count) {\n            return {\n                done: false,\n                value: result.value,\n            };\n        }\n        else {\n            // https://github.com/Microsoft/TypeScript/issues/8938\n            return ({ done: true } as IteratorResult<T>); // <= explicit cast here!;\n        }\n    }\n\n}","//\n// An iterable that converts sets of elements in child iterables to a single contiguous array.\n//\n\nimport { RavelIterator } from '../iterators/ravel-iterator';\n\nexport class RavelIterable<T> implements Iterable<T> {\n\n    iterables: Iterable<T>[];\n\n    constructor(iterables: Iterable<T>[]) {\n        this.iterables = iterables;\n    }\n\n    [Symbol.iterator](): Iterator<T> {\n        return new RavelIterator<T>(this.iterables);\n    }\n}","//\n// An iterator that produces a contiguous flattened array generated from each set of elements in child iterables.\n// Implementation similar to https://docs.scipy.org/doc/numpy/reference/generated/numpy.ravel.html with order 'C'\n//\n// Note that numpy does not work with arrays of varying lengths. However, the dataforge implementation ignores\n// that requirement due to the iterator architecture. Moreover, since the RavelIterator is only used internally\n// such cases will not occur.\n//\n\nexport class RavelIterator<T> implements Iterator<T> {\n\n    iterators: Iterator<T>[];\n    iteratorIndex = 0;\n\n    constructor(iterables: Iterable<T>[]) {\n        this.iterators = iterables.map(iterable => iterable[Symbol.iterator]());\n    }\n\n    next(): IteratorResult<T> {\n\n        if (this.iterators.length > 0) {\n            let result = this.iterators[this.iteratorIndex].next();\n\n            while (result.done) {\n                this.iteratorIndex += 1;\n    \n                if (this.iteratorIndex < this.iterators.length) {\n                    result = this.iterators[this.iteratorIndex].next();\n                }\n                else {\n                    // https://github.com/Microsoft/TypeScript/issues/8938\n                    return ({ done: true } as IteratorResult<T>); // <= explicit cast here!;\n                }\n            }\n    \n            return {\n                done: false,\n                value: result.value,\n            };\n        }\n        \n        // Return done if empty array passed\n        return ({ done: true } as IteratorResult<T>);\n    }\n\n}","//\n// An iterable that iterates the column names of lazy dataframe.\n//\n\nimport { ColumnNamesIterator } from '../iterators/column-names-iterator';\n\nexport class ColumnNamesIterable implements Iterable<string> {\n\n    values: Iterable<any>;\n    considerAllRows: boolean;\n\n    constructor(values: Iterable<any>, considerAllRows: boolean) {\n        this.values = values;\n        this.considerAllRows = considerAllRows\n    }\n\n    [Symbol.iterator](): Iterator<string> {\n        return new ColumnNamesIterator(this.values, this.considerAllRows);\n    }\n}","//\n// An iterator for the column names of lazy dataframe.\n//\n\nimport { ArrayIterator } from './array-iterator';\n\nexport class ColumnNamesIterator implements Iterator<string> {\n\n    columnNamesIterator: Iterator<string> | null = null;\n    values: Iterable<any>;\n    considerAllRows: boolean;\n\n    constructor(values: Iterable<any>, considerAllRows: boolean) {\n        this.values = values;\n        this.considerAllRows = considerAllRows;\n    }\n\n    next(): IteratorResult<string> {\n        if (this.columnNamesIterator === null)  {\n            if (this.considerAllRows) {\n                var combinedFields: any = {};\n                \n                // Check all items.\n                for (const value of this.values) {\n                    for (const fieldName of Object.keys(value)) {\n                        combinedFields[fieldName] = true;\n                    }\n                }\n\n                this.columnNamesIterator = new ArrayIterator(Object.keys(combinedFields));\n            }\n            else {\n                // Just check the first item.\n                var valuesIterator = this.values[Symbol.iterator]();\n                var firstResult = valuesIterator.next();\n                if (firstResult.done) {\n                    return {\n                        done: true,\n                        value: \"\",\n                    };\n                }\n\n                this.columnNamesIterator = new ArrayIterator(Object.keys(firstResult.value));\n            }\n        }\n\n        return this.columnNamesIterator.next();\n    }\n\n}","'use strict';Object.defineProperty(exports,'__esModule',{value:!0}),exports.addCustomTypes=exports.Schema=exports.t=void 0;var _typy=require('./typy'),_typy2=_interopRequireDefault(_typy);function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}var t=function(a,b){return new _typy2.default().t(a,b)},Schema=_typy2.default.Schema,addCustomTypes=function(a){if(t(a).isObject)Object.keys(a).forEach(function(b){if(t(a[b]).isFunction)_typy2.default.prototype.__defineGetter__(b,function(){return a[b](this.input)});else throw new Error('validator '+b+' is not a function')});else throw new Error('validators must be key value pairs')};exports.default=t,exports.t=t,exports.Schema=Schema,exports.addCustomTypes=addCustomTypes;","'use strict';Object.defineProperty(exports,'__esModule',{value:!0});var _typeof='function'==typeof Symbol&&'symbol'==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&'function'==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?'symbol':typeof a},_createClass=function(){function a(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,'value'in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}return function(b,c,d){return c&&a(b.prototype,c),d&&a(b,d),b}}(),_util=require('./util');function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError('Cannot call a class as a function')}var Typy=function(){function a(){var b=this;_classCallCheck(this,a),this.t=function(a,c){if(b.input=a,b.schemaCheck=null,c)if('string'==typeof c)b.input=(0,_util.getNestedObject)(b.input,c);else{var d=(0,_util.convertSchemaAndGetMatch)(b.input,c);-1===d?(b.schemaCheck=!1,b.input=a):(b.schemaCheck=!0,b.input=d)}return b}}return _createClass(a,[{key:'isValid',get:function get(){return null!==this.schemaCheck&&!0===this.schemaCheck&&null!==this.input&&void 0!==this.input}},{key:'isDefined',get:function get(){return'undefined'!=typeof this.input}},{key:'isUndefined',get:function get(){return'undefined'==typeof this.input}},{key:'isNull',get:function get(){return null===this.input&&'object'===_typeof(this.input)}},{key:'isNullOrUndefined',get:function get(){return!!(this.isNull||this.isUndefined)}},{key:'isBoolean',get:function get(){return _typeof(this.input)===_typeof(!0)}},{key:'isTrue',get:function get(){return!0===this.input}},{key:'isFalse',get:function get(){return!1===this.input}},{key:'isTruthy',get:function get(){return!!this.input}},{key:'isFalsy',get:function get(){return!this.input}},{key:'isObject',get:function get(){return'object'===_typeof(this.input)&&this.input===Object(this.input)&&'[object Array]'!==Object.prototype.toString.call(this.input)}},{key:'isEmptyObject',get:function get(){return!!(this.isObject&&0===Object.keys(this.input).length)}},{key:'isString',get:function get(){return'string'==typeof this.input}},{key:'isEmptyString',get:function get(){return!!(this.isString&&0===this.input.length)}},{key:'isNumber',get:function get(){return!!Number.isFinite(this.input)}},{key:'isArray',get:function get(){return!!Array.isArray(this.input)}},{key:'isEmptyArray',get:function get(){return!!(this.isArray&&0===this.input.length)}},{key:'isFunction',get:function get(){return'function'==typeof this.input}},{key:'safeObject',get:function get(){return this.input}},{key:'safeString',get:function get(){return this.isString?this.input:''}},{key:'safeNumber',get:function get(){return this.isNumber?this.input:0}},{key:'safeBoolean',get:function get(){return!!this.isBoolean&&this.input}},{key:'safeFunction',get:function get(){return this.isFunction?this.input:function(){}}}]),a}();Typy.Schema={Number:1,String:'typy',Boolean:!0,Null:null,Undefined:void 0,Array:[],Function:function Function(){}},exports.default=Typy,module.exports=exports['default'];","'use strict';var _typeof='function'==typeof Symbol&&'symbol'==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&'function'==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?'symbol':typeof a},_arguments=arguments,getNestedObject=function(a,b){if(!(1<_arguments.length&&'string'!=typeof b)){if('undefined'!=typeof a&&'string'==typeof b){var c=/[.\\[\\]'\"]/g,d=b.split(c).filter(function(a){return''!==a});a=d.reduce(function(a,b){return a&&'undefined'!==a[b]?a[b]:void 0},a)}return a}},buildSchema=function(a){if('[object Array]'===Object.prototype.toString.call(a))a.forEach(function(a){return buildSchema(a)});else if('[object Object]'===Object.prototype.toString.call(a))Object.keys(a).forEach(function(b){return buildSchema(a[b])});else return'undefined'==typeof a?'undefined':_typeof(a);return a},getSchemaMatch=function(a,b){var c=!1;if('[object Array]'===Object.prototype.toString.call(a)){if(b.length)for(var d=0;d<a.length;d+=1){if(!getSchemaMatch(a[d],b[d])){c=!1;break}c=!0}else return!0;}else if('[object Object]'===Object.prototype.toString.call(a))for(var e in a){if(!getSchemaMatch(a[e],b[e])){c=!1;break}c=!0}else return('undefined'==typeof b?'undefined':_typeof(b))===('undefined'==typeof a?'undefined':_typeof(a));return c},convertSchemaAndGetMatch=function(a,b){var c=buildSchema(b);return getSchemaMatch(a,c)?a:-1};module.exports={getNestedObject:getNestedObject,buildSchema:buildSchema,getSchemaMatch:getSchemaMatch,convertSchemaAndGetMatch:convertSchemaAndGetMatch};","//\n// An iterator that iterates the a \"cached iterator\" iterable.\n//\n\nimport { CachedIteratorIterable } from \"../iterables/cached-iterator-iterable\";\n\n\nexport class CachedIterator<T> implements Iterator<T> {\n\n    private index = 0;\n\n    constructor(private iterable: CachedIteratorIterable<T>) {\n    }\n\n    next(): IteratorResult<T> {\n        return this.iterable._next(this.index++);\n    }\n\n}","/*! @preserve\n * numeral.js\n * version : 2.0.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function (global, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define(factory);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = factory();\n    } else {\n        global.numeral = factory();\n    }\n}(this, function () {\n    /************************************\n        Variables\n    ************************************/\n\n    var numeral,\n        _,\n        VERSION = '2.0.6',\n        formats = {},\n        locales = {},\n        defaults = {\n            currentLocale: 'en',\n            zeroFormat: null,\n            nullFormat: null,\n            defaultFormat: '0,0',\n            scalePercentBy100: true\n        },\n        options = {\n            currentLocale: defaults.currentLocale,\n            zeroFormat: defaults.zeroFormat,\n            nullFormat: defaults.nullFormat,\n            defaultFormat: defaults.defaultFormat,\n            scalePercentBy100: defaults.scalePercentBy100\n        };\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n    // Numeral prototype object\n    function Numeral(input, number) {\n        this._input = input;\n\n        this._value = number;\n    }\n\n    numeral = function(input) {\n        var value,\n            kind,\n            unformatFunction,\n            regexp;\n\n        if (numeral.isNumeral(input)) {\n            value = input.value();\n        } else if (input === 0 || typeof input === 'undefined') {\n            value = 0;\n        } else if (input === null || _.isNaN(input)) {\n            value = null;\n        } else if (typeof input === 'string') {\n            if (options.zeroFormat && input === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && input === options.nullFormat || !input.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                for (kind in formats) {\n                    regexp = typeof formats[kind].regexps.unformat === 'function' ? formats[kind].regexps.unformat() : formats[kind].regexps.unformat;\n\n                    if (regexp && input.match(regexp)) {\n                        unformatFunction = formats[kind].unformat;\n\n                        break;\n                    }\n                }\n\n                unformatFunction = unformatFunction || numeral._.stringToNumber;\n\n                value = unformatFunction(input);\n            }\n        } else {\n            value = Number(input)|| null;\n        }\n\n        return new Numeral(input, value);\n    };\n\n    // version number\n    numeral.version = VERSION;\n\n    // compare numeral object\n    numeral.isNumeral = function(obj) {\n        return obj instanceof Numeral;\n    };\n\n    // helper functions\n    numeral._ = _ = {\n        // formats numbers separators, decimals places, signs, abbreviations\n        numberToFormat: function(value, format, roundingFunction) {\n            var locale = locales[numeral.options.currentLocale],\n                negP = false,\n                optDec = false,\n                leadingCount = 0,\n                abbr = '',\n                trillion = 1000000000000,\n                billion = 1000000000,\n                million = 1000000,\n                thousand = 1000,\n                decimal = '',\n                neg = false,\n                abbrForce, // force abbreviation\n                abs,\n                min,\n                max,\n                power,\n                int,\n                precision,\n                signed,\n                thousands,\n                output;\n\n            // make sure we never format a null value\n            value = value || 0;\n\n            abs = Math.abs(value);\n\n            // see if we should use parentheses for negative number or if we should prefix with a sign\n            // if both are present we default to parentheses\n            if (numeral._.includes(format, '(')) {\n                negP = true;\n                format = format.replace(/[\\(|\\)]/g, '');\n            } else if (numeral._.includes(format, '+') || numeral._.includes(format, '-')) {\n                signed = numeral._.includes(format, '+') ? format.indexOf('+') : value < 0 ? format.indexOf('-') : -1;\n                format = format.replace(/[\\+|\\-]/g, '');\n            }\n\n            // see if abbreviation is wanted\n            if (numeral._.includes(format, 'a')) {\n                abbrForce = format.match(/a(k|m|b|t)?/);\n\n                abbrForce = abbrForce ? abbrForce[1] : false;\n\n                // check for space before abbreviation\n                if (numeral._.includes(format, ' a')) {\n                    abbr = ' ';\n                }\n\n                format = format.replace(new RegExp(abbr + 'a[kmbt]?'), '');\n\n                if (abs >= trillion && !abbrForce || abbrForce === 't') {\n                    // trillion\n                    abbr += locale.abbreviations.trillion;\n                    value = value / trillion;\n                } else if (abs < trillion && abs >= billion && !abbrForce || abbrForce === 'b') {\n                    // billion\n                    abbr += locale.abbreviations.billion;\n                    value = value / billion;\n                } else if (abs < billion && abs >= million && !abbrForce || abbrForce === 'm') {\n                    // million\n                    abbr += locale.abbreviations.million;\n                    value = value / million;\n                } else if (abs < million && abs >= thousand && !abbrForce || abbrForce === 'k') {\n                    // thousand\n                    abbr += locale.abbreviations.thousand;\n                    value = value / thousand;\n                }\n            }\n\n            // check for optional decimals\n            if (numeral._.includes(format, '[.]')) {\n                optDec = true;\n                format = format.replace('[.]', '.');\n            }\n\n            // break number and format\n            int = value.toString().split('.')[0];\n            precision = format.split('.')[1];\n            thousands = format.indexOf(',');\n            leadingCount = (format.split('.')[0].split(',')[0].match(/0/g) || []).length;\n\n            if (precision) {\n                if (numeral._.includes(precision, '[')) {\n                    precision = precision.replace(']', '');\n                    precision = precision.split('[');\n                    decimal = numeral._.toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n                } else {\n                    decimal = numeral._.toFixed(value, precision.length, roundingFunction);\n                }\n\n                int = decimal.split('.')[0];\n\n                if (numeral._.includes(decimal, '.')) {\n                    decimal = locale.delimiters.decimal + decimal.split('.')[1];\n                } else {\n                    decimal = '';\n                }\n\n                if (optDec && Number(decimal.slice(1)) === 0) {\n                    decimal = '';\n                }\n            } else {\n                int = numeral._.toFixed(value, 0, roundingFunction);\n            }\n\n            // check abbreviation again after rounding\n            if (abbr && !abbrForce && Number(int) >= 1000 && abbr !== locale.abbreviations.trillion) {\n                int = String(Number(int) / 1000);\n\n                switch (abbr) {\n                    case locale.abbreviations.thousand:\n                        abbr = locale.abbreviations.million;\n                        break;\n                    case locale.abbreviations.million:\n                        abbr = locale.abbreviations.billion;\n                        break;\n                    case locale.abbreviations.billion:\n                        abbr = locale.abbreviations.trillion;\n                        break;\n                }\n            }\n\n\n            // format number\n            if (numeral._.includes(int, '-')) {\n                int = int.slice(1);\n                neg = true;\n            }\n\n            if (int.length < leadingCount) {\n                for (var i = leadingCount - int.length; i > 0; i--) {\n                    int = '0' + int;\n                }\n            }\n\n            if (thousands > -1) {\n                int = int.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + locale.delimiters.thousands);\n            }\n\n            if (format.indexOf('.') === 0) {\n                int = '';\n            }\n\n            output = int + decimal + (abbr ? abbr : '');\n\n            if (negP) {\n                output = (negP && neg ? '(' : '') + output + (negP && neg ? ')' : '');\n            } else {\n                if (signed >= 0) {\n                    output = signed === 0 ? (neg ? '-' : '+') + output : output + (neg ? '-' : '+');\n                } else if (neg) {\n                    output = '-' + output;\n                }\n            }\n\n            return output;\n        },\n        // unformats numbers separators, decimals places, signs, abbreviations\n        stringToNumber: function(string) {\n            var locale = locales[options.currentLocale],\n                stringOriginal = string,\n                abbreviations = {\n                    thousand: 3,\n                    million: 6,\n                    billion: 9,\n                    trillion: 12\n                },\n                abbreviation,\n                value,\n                i,\n                regexp;\n\n            if (options.zeroFormat && string === options.zeroFormat) {\n                value = 0;\n            } else if (options.nullFormat && string === options.nullFormat || !string.replace(/[^0-9]+/g, '').length) {\n                value = null;\n            } else {\n                value = 1;\n\n                if (locale.delimiters.decimal !== '.') {\n                    string = string.replace(/\\./g, '').replace(locale.delimiters.decimal, '.');\n                }\n\n                for (abbreviation in abbreviations) {\n                    regexp = new RegExp('[^a-zA-Z]' + locale.abbreviations[abbreviation] + '(?:\\\\)|(\\\\' + locale.currency.symbol + ')?(?:\\\\))?)?$');\n\n                    if (stringOriginal.match(regexp)) {\n                        value *= Math.pow(10, abbreviations[abbreviation]);\n                        break;\n                    }\n                }\n\n                // check for negative number\n                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;\n\n                // remove non numbers\n                string = string.replace(/[^0-9\\.]+/g, '');\n\n                value *= Number(string);\n            }\n\n            return value;\n        },\n        isNaN: function(value) {\n            return typeof value === 'number' && isNaN(value);\n        },\n        includes: function(string, search) {\n            return string.indexOf(search) !== -1;\n        },\n        insert: function(string, subString, start) {\n            return string.slice(0, start) + subString + string.slice(start);\n        },\n        reduce: function(array, callback /*, initialValue*/) {\n            if (this === null) {\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n\n            if (typeof callback !== 'function') {\n                throw new TypeError(callback + ' is not a function');\n            }\n\n            var t = Object(array),\n                len = t.length >>> 0,\n                k = 0,\n                value;\n\n            if (arguments.length === 3) {\n                value = arguments[2];\n            } else {\n                while (k < len && !(k in t)) {\n                    k++;\n                }\n\n                if (k >= len) {\n                    throw new TypeError('Reduce of empty array with no initial value');\n                }\n\n                value = t[k++];\n            }\n            for (; k < len; k++) {\n                if (k in t) {\n                    value = callback(value, t[k], k, t);\n                }\n            }\n            return value;\n        },\n        /**\n         * Computes the multiplier necessary to make x >= 1,\n         * effectively eliminating miscalculations caused by\n         * finite precision.\n         */\n        multiplier: function (x) {\n            var parts = x.toString().split('.');\n\n            return parts.length < 2 ? 1 : Math.pow(10, parts[1].length);\n        },\n        /**\n         * Given a variable number of arguments, returns the maximum\n         * multiplier that must be used to normalize an operation involving\n         * all of them.\n         */\n        correctionFactor: function () {\n            var args = Array.prototype.slice.call(arguments);\n\n            return args.reduce(function(accum, next) {\n                var mn = _.multiplier(next);\n                return accum > mn ? accum : mn;\n            }, 1);\n        },\n        /**\n         * Implementation of toFixed() that treats floats more like decimals\n         *\n         * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n         * problems for accounting- and finance-related software.\n         */\n        toFixed: function(value, maxDecimals, roundingFunction, optionals) {\n            var splitValue = value.toString().split('.'),\n                minDecimals = maxDecimals - (optionals || 0),\n                boundedPrecision,\n                optionalsRegExp,\n                power,\n                output;\n\n            // Use the smallest precision value possible to avoid errors from floating point representation\n            if (splitValue.length === 2) {\n              boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n            } else {\n              boundedPrecision = minDecimals;\n            }\n\n            power = Math.pow(10, boundedPrecision);\n\n            // Multiply up by precision, round accurately, then divide and use native toFixed():\n            output = (roundingFunction(value + 'e+' + boundedPrecision) / power).toFixed(boundedPrecision);\n\n            if (optionals > maxDecimals - boundedPrecision) {\n                optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n                output = output.replace(optionalsRegExp, '');\n            }\n\n            return output;\n        }\n    };\n\n    // avaliable options\n    numeral.options = options;\n\n    // avaliable formats\n    numeral.formats = formats;\n\n    // avaliable formats\n    numeral.locales = locales;\n\n    // This function sets the current locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    numeral.locale = function(key) {\n        if (key) {\n            options.currentLocale = key.toLowerCase();\n        }\n\n        return options.currentLocale;\n    };\n\n    // This function provides access to the loaded locale data.  If\n    // no arguments are passed in, it will simply return the current\n    // global locale object.\n    numeral.localeData = function(key) {\n        if (!key) {\n            return locales[options.currentLocale];\n        }\n\n        key = key.toLowerCase();\n\n        if (!locales[key]) {\n            throw new Error('Unknown locale : ' + key);\n        }\n\n        return locales[key];\n    };\n\n    numeral.reset = function() {\n        for (var property in defaults) {\n            options[property] = defaults[property];\n        }\n    };\n\n    numeral.zeroFormat = function(format) {\n        options.zeroFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.nullFormat = function (format) {\n        options.nullFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.defaultFormat = function(format) {\n        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    };\n\n    numeral.register = function(type, name, format) {\n        name = name.toLowerCase();\n\n        if (this[type + 's'][name]) {\n            throw new TypeError(name + ' ' + type + ' already registered.');\n        }\n\n        this[type + 's'][name] = format;\n\n        return format;\n    };\n\n\n    numeral.validate = function(val, culture) {\n        var _decimalSep,\n            _thousandSep,\n            _currSymbol,\n            _valArray,\n            _abbrObj,\n            _thousandRegEx,\n            localeData,\n            temp;\n\n        //coerce val to string\n        if (typeof val !== 'string') {\n            val += '';\n\n            if (console.warn) {\n                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n            }\n        }\n\n        //trim whitespaces from either sides\n        val = val.trim();\n\n        //if val is just digits return true\n        if (!!val.match(/^\\d+$/)) {\n            return true;\n        }\n\n        //if val is empty return false\n        if (val === '') {\n            return false;\n        }\n\n        //get the decimal and thousands separator from numeral.localeData\n        try {\n            //check if the culture is understood by numeral. if not, default it to current locale\n            localeData = numeral.localeData(culture);\n        } catch (e) {\n            localeData = numeral.localeData(numeral.locale());\n        }\n\n        //setup the delimiters and currency symbol based on culture/locale\n        _currSymbol = localeData.currency.symbol;\n        _abbrObj = localeData.abbreviations;\n        _decimalSep = localeData.delimiters.decimal;\n        if (localeData.delimiters.thousands === '.') {\n            _thousandSep = '\\\\.';\n        } else {\n            _thousandSep = localeData.delimiters.thousands;\n        }\n\n        // validating currency symbol\n        temp = val.match(/^[^\\d]+/);\n        if (temp !== null) {\n            val = val.substr(1);\n            if (temp[0] !== _currSymbol) {\n                return false;\n            }\n        }\n\n        //validating abbreviation symbol\n        temp = val.match(/[^\\d]+$/);\n        if (temp !== null) {\n            val = val.slice(0, -1);\n            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n                return false;\n            }\n        }\n\n        _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n        if (!val.match(/[^\\d.,]/g)) {\n            _valArray = val.split(_decimalSep);\n            if (_valArray.length > 2) {\n                return false;\n            } else {\n                if (_valArray.length < 2) {\n                    return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx));\n                } else {\n                    if (_valArray[0].length === 1) {\n                        return ( !! _valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    } else {\n                        return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n\n    /************************************\n        Numeral Prototype\n    ************************************/\n\n    numeral.fn = Numeral.prototype = {\n        clone: function() {\n            return numeral(this);\n        },\n        format: function(inputString, roundingFunction) {\n            var value = this._value,\n                format = inputString || options.defaultFormat,\n                kind,\n                output,\n                formatFunction;\n\n            // make sure we have a roundingFunction\n            roundingFunction = roundingFunction || Math.round;\n\n            // format based on value\n            if (value === 0 && options.zeroFormat !== null) {\n                output = options.zeroFormat;\n            } else if (value === null && options.nullFormat !== null) {\n                output = options.nullFormat;\n            } else {\n                for (kind in formats) {\n                    if (format.match(formats[kind].regexps.format)) {\n                        formatFunction = formats[kind].format;\n\n                        break;\n                    }\n                }\n\n                formatFunction = formatFunction || numeral._.numberToFormat;\n\n                output = formatFunction(value, format, roundingFunction);\n            }\n\n            return output;\n        },\n        value: function() {\n            return this._value;\n        },\n        input: function() {\n            return this._input;\n        },\n        set: function(value) {\n            this._value = Number(value);\n\n            return this;\n        },\n        add: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum + Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 0) / corrFactor;\n\n            return this;\n        },\n        subtract: function(value) {\n            var corrFactor = _.correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum - Math.round(corrFactor * curr);\n            }\n\n            this._value = _.reduce([value], cback, Math.round(this._value * corrFactor)) / corrFactor;\n\n            return this;\n        },\n        multiply: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) * Math.round(curr * corrFactor) / Math.round(corrFactor * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback, 1);\n\n            return this;\n        },\n        divide: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = _.correctionFactor(accum, curr);\n                return Math.round(accum * corrFactor) / Math.round(curr * corrFactor);\n            }\n\n            this._value = _.reduce([this._value, value], cback);\n\n            return this;\n        },\n        difference: function(value) {\n            return Math.abs(numeral(this._value).subtract(value).value());\n        }\n    };\n\n    /************************************\n        Default Locale && Format\n    ************************************/\n\n    numeral.register('locale', 'en', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function(number) {\n            var b = number % 10;\n            return (~~(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n\n    \n\n(function() {\n        numeral.register('format', 'bps', {\n            regexps: {\n                format: /(BPS)/,\n                unformat: /(BPS)/\n            },\n            format: function(value, format, roundingFunction) {\n                var space = numeral._.includes(format, ' BPS') ? ' ' : '',\n                    output;\n\n                value = value * 10000;\n\n                // check for space before BPS\n                format = format.replace(/\\s?BPS/, '');\n\n                output = numeral._.numberToFormat(value, format, roundingFunction);\n\n                if (numeral._.includes(output, ')')) {\n                    output = output.split('');\n\n                    output.splice(-1, 0, space + 'BPS');\n\n                    output = output.join('');\n                } else {\n                    output = output + space + 'BPS';\n                }\n\n                return output;\n            },\n            unformat: function(string) {\n                return +(numeral._.stringToNumber(string) * 0.0001).toFixed(15);\n            }\n        });\n})();\n\n\n(function() {\n        var decimal = {\n            base: 1000,\n            suffixes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n        },\n        binary = {\n            base: 1024,\n            suffixes: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n        };\n\n    var allSuffixes =  decimal.suffixes.concat(binary.suffixes.filter(function (item) {\n            return decimal.suffixes.indexOf(item) < 0;\n        }));\n        var unformatRegex = allSuffixes.join('|');\n        // Allow support for BPS (http://www.investopedia.com/terms/b/basispoint.asp)\n        unformatRegex = '(' + unformatRegex.replace('B', 'B(?!PS)') + ')';\n\n    numeral.register('format', 'bytes', {\n        regexps: {\n            format: /([0\\s]i?b)/,\n            unformat: new RegExp(unformatRegex)\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                bytes = numeral._.includes(format, 'ib') ? binary : decimal,\n                suffix = numeral._.includes(format, ' b') || numeral._.includes(format, ' ib') ? ' ' : '',\n                power,\n                min,\n                max;\n\n            // check for space before\n            format = format.replace(/\\s?i?b/, '');\n\n            for (power = 0; power <= bytes.suffixes.length; power++) {\n                min = Math.pow(bytes.base, power);\n                max = Math.pow(bytes.base, power + 1);\n\n                if (value === null || value === 0 || value >= min && value < max) {\n                    suffix += bytes.suffixes[power];\n\n                    if (min > 0) {\n                        value = value / min;\n                    }\n\n                    break;\n                }\n            }\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + suffix;\n        },\n        unformat: function(string) {\n            var value = numeral._.stringToNumber(string),\n                power,\n                bytesMultiplier;\n\n            if (value) {\n                for (power = decimal.suffixes.length - 1; power >= 0; power--) {\n                    if (numeral._.includes(string, decimal.suffixes[power])) {\n                        bytesMultiplier = Math.pow(decimal.base, power);\n\n                        break;\n                    }\n\n                    if (numeral._.includes(string, binary.suffixes[power])) {\n                        bytesMultiplier = Math.pow(binary.base, power);\n\n                        break;\n                    }\n                }\n\n                value *= (bytesMultiplier || 1);\n            }\n\n            return value;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'currency', {\n        regexps: {\n            format: /(\\$)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                symbols = {\n                    before: format.match(/^([\\+|\\-|\\(|\\s|\\$]*)/)[0],\n                    after: format.match(/([\\+|\\-|\\)|\\s|\\$]*)$/)[0]\n                },\n                output,\n                symbol,\n                i;\n\n            // strip format of spaces and $\n            format = format.replace(/\\s?\\$\\s?/, '');\n\n            // format the number\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            // update the before and after based on value\n            if (value >= 0) {\n                symbols.before = symbols.before.replace(/[\\-\\(]/, '');\n                symbols.after = symbols.after.replace(/[\\-\\)]/, '');\n            } else if (value < 0 && (!numeral._.includes(symbols.before, '-') && !numeral._.includes(symbols.before, '('))) {\n                symbols.before = '-' + symbols.before;\n            }\n\n            // loop through each before symbol\n            for (i = 0; i < symbols.before.length; i++) {\n                symbol = symbols.before[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = numeral._.insert(output, locale.currency.symbol, i);\n                        break;\n                    case ' ':\n                        output = numeral._.insert(output, ' ', i + locale.currency.symbol.length - 1);\n                        break;\n                }\n            }\n\n            // loop through each after symbol\n            for (i = symbols.after.length - 1; i >= 0; i--) {\n                symbol = symbols.after[i];\n\n                switch (symbol) {\n                    case '$':\n                        output = i === symbols.after.length - 1 ? output + locale.currency.symbol : numeral._.insert(output, locale.currency.symbol, -(symbols.after.length - (1 + i)));\n                        break;\n                    case ' ':\n                        output = i === symbols.after.length - 1 ? output + ' ' : numeral._.insert(output, ' ', -(symbols.after.length - (1 + i) + locale.currency.symbol.length - 1));\n                        break;\n                }\n            }\n\n\n            return output;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'exponential', {\n        regexps: {\n            format: /(e\\+|e-)/,\n            unformat: /(e\\+|e-)/\n        },\n        format: function(value, format, roundingFunction) {\n            var output,\n                exponential = typeof value === 'number' && !numeral._.isNaN(value) ? value.toExponential() : '0e+0',\n                parts = exponential.split('e');\n\n            format = format.replace(/e[\\+|\\-]{1}0/, '');\n\n            output = numeral._.numberToFormat(Number(parts[0]), format, roundingFunction);\n\n            return output + 'e' + parts[1];\n        },\n        unformat: function(string) {\n            var parts = numeral._.includes(string, 'e+') ? string.split('e+') : string.split('e-'),\n                value = Number(parts[0]),\n                power = Number(parts[1]);\n\n            power = numeral._.includes(string, 'e-') ? power *= -1 : power;\n\n            function cback(accum, curr, currI, O) {\n                var corrFactor = numeral._.correctionFactor(accum, curr),\n                    num = (accum * corrFactor) * (curr * corrFactor) / (corrFactor * corrFactor);\n                return num;\n            }\n\n            return numeral._.reduce([value, Math.pow(10, power)], cback, 1);\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'ordinal', {\n        regexps: {\n            format: /(o)/\n        },\n        format: function(value, format, roundingFunction) {\n            var locale = numeral.locales[numeral.options.currentLocale],\n                output,\n                ordinal = numeral._.includes(format, ' o') ? ' ' : '';\n\n            // check for space before\n            format = format.replace(/\\s?o/, '');\n\n            ordinal += locale.ordinal(value);\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            return output + ordinal;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'percentage', {\n        regexps: {\n            format: /(%)/,\n            unformat: /(%)/\n        },\n        format: function(value, format, roundingFunction) {\n            var space = numeral._.includes(format, ' %') ? ' ' : '',\n                output;\n\n            if (numeral.options.scalePercentBy100) {\n                value = value * 100;\n            }\n\n            // check for space before %\n            format = format.replace(/\\s?\\%/, '');\n\n            output = numeral._.numberToFormat(value, format, roundingFunction);\n\n            if (numeral._.includes(output, ')')) {\n                output = output.split('');\n\n                output.splice(-1, 0, space + '%');\n\n                output = output.join('');\n            } else {\n                output = output + space + '%';\n            }\n\n            return output;\n        },\n        unformat: function(string) {\n            var number = numeral._.stringToNumber(string);\n            if (numeral.options.scalePercentBy100) {\n                return number * 0.01;\n            }\n            return number;\n        }\n    });\n})();\n\n\n(function() {\n        numeral.register('format', 'time', {\n        regexps: {\n            format: /(:)/,\n            unformat: /(:)/\n        },\n        format: function(value, format, roundingFunction) {\n            var hours = Math.floor(value / 60 / 60),\n                minutes = Math.floor((value - (hours * 60 * 60)) / 60),\n                seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));\n\n            return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n        },\n        unformat: function(string) {\n            var timeArray = string.split(':'),\n                seconds = 0;\n\n            // turn hours and minutes into seconds and add them all up\n            if (timeArray.length === 3) {\n                // hours\n                seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n                // minutes\n                seconds = seconds + (Number(timeArray[1]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[2]);\n            } else if (timeArray.length === 2) {\n                // minutes\n                seconds = seconds + (Number(timeArray[0]) * 60);\n                // seconds\n                seconds = seconds + Number(timeArray[1]);\n            }\n            return Number(seconds);\n        }\n    });\n})();\n\nreturn numeral;\n}));\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||\n  function getOwnPropertyDescriptors(obj) {\n    var keys = Object.keys(obj);\n    var descriptors = {};\n    for (var i = 0; i < keys.length; i++) {\n      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);\n    }\n    return descriptors;\n  };\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  if (typeof process !== 'undefined' && process.noDeprecation === true) {\n    return fn;\n  }\n\n  // Allow for deprecating things in the process of starting up.\n  if (typeof process === 'undefined') {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nvar kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;\n\nexports.promisify = function promisify(original) {\n  if (typeof original !== 'function')\n    throw new TypeError('The \"original\" argument must be of type Function');\n\n  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {\n    var fn = original[kCustomPromisifiedSymbol];\n    if (typeof fn !== 'function') {\n      throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n    }\n    Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n      value: fn, enumerable: false, writable: false, configurable: true\n    });\n    return fn;\n  }\n\n  function fn() {\n    var promiseResolve, promiseReject;\n    var promise = new Promise(function (resolve, reject) {\n      promiseResolve = resolve;\n      promiseReject = reject;\n    });\n\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n    args.push(function (err, value) {\n      if (err) {\n        promiseReject(err);\n      } else {\n        promiseResolve(value);\n      }\n    });\n\n    try {\n      original.apply(this, args);\n    } catch (err) {\n      promiseReject(err);\n    }\n\n    return promise;\n  }\n\n  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\n\n  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n    value: fn, enumerable: false, writable: false, configurable: true\n  });\n  return Object.defineProperties(\n    fn,\n    getOwnPropertyDescriptors(original)\n  );\n}\n\nexports.promisify.custom = kCustomPromisifiedSymbol\n\nfunction callbackifyOnRejected(reason, cb) {\n  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).\n  // Because `null` is a special error value in callbacks which means \"no error\n  // occurred\", we error-wrap so the callback consumer can distinguish between\n  // \"the promise rejected with null\" or \"the promise fulfilled with undefined\".\n  if (!reason) {\n    var newReason = new Error('Promise was rejected with a falsy value');\n    newReason.reason = reason;\n    reason = newReason;\n  }\n  return cb(reason);\n}\n\nfunction callbackify(original) {\n  if (typeof original !== 'function') {\n    throw new TypeError('The \"original\" argument must be of type Function');\n  }\n\n  // We DO NOT return the promise as it gives the user a false sense that\n  // the promise is actually somehow related to the callback's execution\n  // and that the callback throwing will reject the promise.\n  function callbackified() {\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n\n    var maybeCb = args.pop();\n    if (typeof maybeCb !== 'function') {\n      throw new TypeError('The last argument must be of type Function');\n    }\n    var self = this;\n    var cb = function() {\n      return maybeCb.apply(self, arguments);\n    };\n    // In true node style we process the callback on `nextTick` with all the\n    // implications (stack, `uncaughtException`, `async_hooks`)\n    original.apply(this, args)\n      .then(function(ret) { process.nextTick(cb, null, ret) },\n            function(rej) { process.nextTick(callbackifyOnRejected, rej, cb) });\n  }\n\n  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));\n  Object.defineProperties(callbackified,\n                          getOwnPropertyDescriptors(original));\n  return callbackified;\n}\nexports.callbackify = callbackify;\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n"],"sourceRoot":""}